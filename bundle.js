(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),a.push([e.id,"body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n    height: 100vh;\n}\n\n#background {\n    /* Full height */\n    position: absolute;\n    height: 100%;\n\n  /* Center and scale the image nicely */\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n\n:root {\n    --primary: rgb(77, 77, 77);\n}\n\n.main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}\n\n.left-clm {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.weather-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n\n}\n\n.weather-left {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\n.bar {\n    background-color: var(--primary);\n    width: 1px;\n    height: 160px;\n}\n\n.container-transparent {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}  \n\n\n.city-current {\n    line-height: 100%;\n    font-size: 4rem;\n    font-weight: 300;\n    color: var(--primary);\n}\n\n.time-current {\n    font-size: 3rem;\n    font-weight: 200;\n    color: var(--primary);\n}\n\n.sunrise-current, .sunset-current {\n    font-size: 2rem;\n    font-weight: 100;\n    color: var(--primary);\n}\n\n.search-container {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n.searchbox {\n    background-color : transparent;\n    font-size: 2rem;\n    outline: none;\n    border-bottom: 1px solid var(--primary) ;\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    margin-right: auto;\n    \n}\n\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n    opacity: 1; /* Firefox */\n  }\n\n.submit {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\nbutton i {\n    color: var(--primary);\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n}\n*:focus {\n    outline: none;\n}\n\n\n\n\n.invalid {\n    border-bottom: 1px solid red;\n}\n\n\n.weatherid-current {\n    font-size: 2rem;\n    font-weight: 200;\n    color: var(--primary)\n}\n\n.weather-item {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    padding: 4px;\n    font-weight: 200;\n    font-size: 1.25rem;\n    color: var(--primary);\n}\n\n.temperature-current {\n    font-weight: 200;\n    font-size: 4.5rem;\n    line-height: 50%;\n    padding: 8px;\n    text-align: center;\n    color: var(--primary);\n}\n\n.weather-highlow {\n    font-weight: 200;\n    font-size: 1rem;\n    color: var(--primary);\n}\n\n.timeinfo {\n    font-size: 1rem;\n    text-align: center;\n    position: absolute;\n    margin-bottom: 8px;\n    bottom: 0;\n    color: var(--primary);\n}\n\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 800px) {\n    .main {\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n    .left-clm {\n        position: relative;\n    }\n\n    .search-container {\n        margin-top: 50px;\n        position: relative;\n        height:100px;\n    }\n\n    .searchbox {\n        font-size: 1.5rem;\n    }\n\n    .city-current {\n        font-size: 3rem;\n    }\n    .time-current {\n        font-size: 2rem;\n    }\n\n    .sunrise-current,.sunset-current {\n        font-size: 1.5rem;\n    }\n\n    \n}\n\n\n\n\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,qCAAqC;IACrC,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,YAAY;;EAEd,sCAAsC;IACpC,2BAA2B;IAC3B,4BAA4B;IAC5B,sBAAsB;AAC1B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;;AAEb;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,gCAAgC;IAChC,UAAU;IACV,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;;AAGA;IACI,iBAAiB;IACjB,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,QAAQ;AACZ;;AAEA;IACI,8BAA8B;IAC9B,eAAe;IACf,aAAa;IACb,wCAAwC;IACxC,wBAAwB;IACxB,0BAA0B;IAC1B,yBAAyB;IACzB,kBAAkB;;AAEtB;;AAEA,gBAAgB,yCAAyC;IACrD,qBAAqB;IACrB,qCAAqC;IACrC,gBAAgB;IAChB,UAAU,EAAE,YAAY;EAC1B;;AAEF;IACI,aAAa;IACb,YAAY;IACZ,6BAA6B;IAC7B,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,qCAAqC;IACrC,gBAAgB;AACpB;AACA;IACI,aAAa;AACjB;;;;;AAKA;IACI,4BAA4B;AAChC;;;AAGA;IACI,eAAe;IACf,gBAAgB;IAChB;AACJ;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,qBAAqB;AACzB;;;AAGA,iDAAiD;AACjD;IACI;QACI,sBAAsB;QACtB,2BAA2B;IAC/B;;IAEA;QACI,kBAAkB;IACtB;;IAEA;QACI,gBAAgB;QAChB,kBAAkB;QAClB,YAAY;IAChB;;IAEA;QACI,iBAAiB;IACrB;;IAEA;QACI,eAAe;IACnB;IACA;QACI,eAAe;IACnB;;IAEA;QACI,iBAAiB;IACrB;;;AAGJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n    height: 100vh;\n}\n\n#background {\n    /* Full height */\n    position: absolute;\n    height: 100%;\n\n  /* Center and scale the image nicely */\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n\n:root {\n    --primary: rgb(77, 77, 77);\n}\n\n.main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}\n\n.left-clm {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.weather-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n\n}\n\n.weather-left {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\n.bar {\n    background-color: var(--primary);\n    width: 1px;\n    height: 160px;\n}\n\n.container-transparent {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}  \n\n\n.city-current {\n    line-height: 100%;\n    font-size: 4rem;\n    font-weight: 300;\n    color: var(--primary);\n}\n\n.time-current {\n    font-size: 3rem;\n    font-weight: 200;\n    color: var(--primary);\n}\n\n.sunrise-current, .sunset-current {\n    font-size: 2rem;\n    font-weight: 100;\n    color: var(--primary);\n}\n\n.search-container {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n.searchbox {\n    background-color : transparent;\n    font-size: 2rem;\n    outline: none;\n    border-bottom: 1px solid var(--primary) ;\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    margin-right: auto;\n    \n}\n\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n    opacity: 1; /* Firefox */\n  }\n\n.submit {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\nbutton i {\n    color: var(--primary);\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n}\n*:focus {\n    outline: none;\n}\n\n\n\n\n.invalid {\n    border-bottom: 1px solid red;\n}\n\n\n.weatherid-current {\n    font-size: 2rem;\n    font-weight: 200;\n    color: var(--primary)\n}\n\n.weather-item {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    padding: 4px;\n    font-weight: 200;\n    font-size: 1.25rem;\n    color: var(--primary);\n}\n\n.temperature-current {\n    font-weight: 200;\n    font-size: 4.5rem;\n    line-height: 50%;\n    padding: 8px;\n    text-align: center;\n    color: var(--primary);\n}\n\n.weather-highlow {\n    font-weight: 200;\n    font-size: 1rem;\n    color: var(--primary);\n}\n\n.timeinfo {\n    font-size: 1rem;\n    text-align: center;\n    position: absolute;\n    margin-bottom: 8px;\n    bottom: 0;\n    color: var(--primary);\n}\n\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 800px) {\n    .main {\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n    .left-clm {\n        position: relative;\n    }\n\n    .search-container {\n        margin-top: 50px;\n        position: relative;\n        height:100px;\n    }\n\n    .searchbox {\n        font-size: 1.5rem;\n    }\n\n    .city-current {\n        font-size: 3rem;\n    }\n    .time-current {\n        font-size: 2rem;\n    }\n\n    .sunrise-current,.sunset-current {\n        font-size: 1.5rem;\n    }\n\n    \n}\n\n\n\n\n\n\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},490:(e,n)=>{function t(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,s(e,n)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function s(e,n){return s=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},s(e,n)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function c(e,n,t){return c=u()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var i=new(Function.bind.apply(e,r));return t&&s(i,t.prototype),i},c.apply(null,arguments)}function l(e){var n="function"==typeof Map?new Map:void 0;return l=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return c(e,arguments,a(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,e)},l(e)}function f(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}function d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function h(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?d(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var m=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(l(Error)),y=function(e){function n(n){return e.call(this,"Invalid DateTime: "+n.toMessage())||this}return o(n,e),n}(m),v=function(e){function n(n){return e.call(this,"Invalid Interval: "+n.toMessage())||this}return o(n,e),n}(m),p=function(e){function n(n){return e.call(this,"Invalid Duration: "+n.toMessage())||this}return o(n,e),n}(m),g=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(m),A=function(e){function n(n){return e.call(this,"Invalid unit "+n)||this}return o(n,e),n}(m),w=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(m),b=function(e){function n(){return e.call(this,"Zone is an abstract class")||this}return o(n,e),n}(m),k="numeric",C="short",I="long",S={year:k,month:k,day:k},T={year:k,month:C,day:k},O={year:k,month:C,day:k,weekday:C},M={year:k,month:I,day:k},x={year:k,month:I,day:k,weekday:I},B={hour:k,minute:k},E={hour:k,minute:k,second:k},N={hour:k,minute:k,second:k,timeZoneName:C},D={hour:k,minute:k,second:k,timeZoneName:I},V={hour:k,minute:k,hourCycle:"h23"},z={hour:k,minute:k,second:k,hourCycle:"h23"},L={hour:k,minute:k,second:k,hourCycle:"h23",timeZoneName:C},j={hour:k,minute:k,second:k,hourCycle:"h23",timeZoneName:I},q={year:k,month:k,day:k,hour:k,minute:k},F={year:k,month:k,day:k,hour:k,minute:k,second:k},Z={year:k,month:C,day:k,hour:k,minute:k},_={year:k,month:C,day:k,hour:k,minute:k,second:k},U={year:k,month:C,day:k,weekday:C,hour:k,minute:k},H={year:k,month:I,day:k,hour:k,minute:k,timeZoneName:C},P={year:k,month:I,day:k,hour:k,minute:k,second:k,timeZoneName:C},R={year:k,month:I,day:k,weekday:I,hour:k,minute:k,timeZoneName:I},Y={year:k,month:I,day:k,weekday:I,hour:k,minute:k,second:k,timeZoneName:I};function W(e){return void 0===e}function J(e){return"number"==typeof e}function $(e){return"number"==typeof e&&e%1==0}function G(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(e){return!1}}function Q(e,n,t){if(0!==e.length)return e.reduce((function(e,r){var i=[n(r),r];return e&&t(e[0],i[0])===e[0]?e:i}),null)[1]}function K(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function X(e,n,t){return $(e)&&e>=n&&e<=t}function ee(e,n){return void 0===n&&(n=2),e<0?"-"+(""+-e).padStart(n,"0"):(""+e).padStart(n,"0")}function ne(e){return W(e)||null===e||""===e?void 0:parseInt(e,10)}function te(e){return W(e)||null===e||""===e?void 0:parseFloat(e)}function re(e){if(!W(e)&&null!==e&&""!==e){var n=1e3*parseFloat("0."+e);return Math.floor(n)}}function ie(e,n,t){void 0===t&&(t=!1);var r=Math.pow(10,n);return(t?Math.trunc:Math.round)(e*r)/r}function oe(e){return e%4==0&&(e%100!=0||e%400==0)}function ae(e){return oe(e)?366:365}function se(e,n){var t,r=(t=n-1)-12*Math.floor(t/12)+1;return 2===r?oe(e+(n-r)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][r-1]}function ue(e){var n=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&e.year>=0&&(n=new Date(n)).setUTCFullYear(n.getUTCFullYear()-1900),+n}function ce(e){var n=(e+Math.floor(e/4)-Math.floor(e/100)+Math.floor(e/400))%7,t=e-1,r=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7;return 4===n||3===r?53:52}function le(e){return e>99?e:e>60?1900+e:2e3+e}function fe(e,n,t,r){void 0===r&&(r=null);var o=new Date(e),a={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(a.timeZone=r);var s=i({timeZoneName:n},a),u=new Intl.DateTimeFormat(t,s).formatToParts(o).find((function(e){return"timezonename"===e.type.toLowerCase()}));return u?u.value:null}function de(e,n){var t=parseInt(e,10);Number.isNaN(t)&&(t=0);var r=parseInt(n,10)||0;return 60*t+(t<0||Object.is(t,-0)?-r:r)}function he(e){var n=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(n))throw new w("Invalid unit value "+e);return n}function me(e,n){var t={};for(var r in e)if(K(e,r)){var i=e[r];if(null==i)continue;t[n(r)]=he(i)}return t}function ye(e,n){var t=Math.trunc(Math.abs(e/60)),r=Math.trunc(Math.abs(e%60)),i=e>=0?"+":"-";switch(n){case"short":return""+i+ee(t,2)+":"+ee(r,2);case"narrow":return""+i+t+(r>0?":"+r:"");case"techie":return""+i+ee(t,2)+ee(r,2);default:throw new RangeError("Value format "+n+" is out of range for property format")}}function ve(e){return function(e,n){return["hour","minute","second","millisecond"].reduce((function(n,t){return n[t]=e[t],n}),{})}(e)}var pe=/[A-Za-z_+-]{1,256}(:?\/[A-Za-z0-9_+-]{1,256}(\/[A-Za-z0-9_+-]{1,256})?)?/,ge=["January","February","March","April","May","June","July","August","September","October","November","December"],Ae=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],we=["J","F","M","A","M","J","J","A","S","O","N","D"];function be(e){switch(e){case"narrow":return[].concat(we);case"short":return[].concat(Ae);case"long":return[].concat(ge);case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}var ke=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Ce=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Ie=["M","T","W","T","F","S","S"];function Se(e){switch(e){case"narrow":return[].concat(Ie);case"short":return[].concat(Ce);case"long":return[].concat(ke);case"numeric":return["1","2","3","4","5","6","7"];default:return null}}var Te=["AM","PM"],Oe=["Before Christ","Anno Domini"],Me=["BC","AD"],xe=["B","A"];function Be(e){switch(e){case"narrow":return[].concat(xe);case"short":return[].concat(Me);case"long":return[].concat(Oe);default:return null}}function Ee(e,n){for(var t,r="",i=h(e);!(t=i()).done;){var o=t.value;o.literal?r+=o.val:r+=n(o.val)}return r}var Ne={D:S,DD:T,DDD:M,DDDD:x,t:B,tt:E,ttt:N,tttt:D,T:V,TT:z,TTT:L,TTTT:j,f:q,ff:Z,fff:H,ffff:R,F,FF:_,FFF:P,FFFF:Y},De=function(){function e(e,n){this.opts=n,this.loc=e,this.systemLoc=null}e.create=function(n,t){return void 0===t&&(t={}),new e(n,t)},e.parseFormat=function(e){for(var n=null,t="",r=!1,i=[],o=0;o<e.length;o++){var a=e.charAt(o);"'"===a?(t.length>0&&i.push({literal:r,val:t}),n=null,t="",r=!r):r||a===n?t+=a:(t.length>0&&i.push({literal:!1,val:t}),t=a,n=a)}return t.length>0&&i.push({literal:r,val:t}),i},e.macroTokenToFormatOpts=function(e){return Ne[e]};var n=e.prototype;return n.formatWithSystemDefault=function(e,n){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,i({},this.opts,n)).format()},n.formatDateTime=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).format()},n.formatDateTimeParts=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).formatToParts()},n.resolvedOptions=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).resolvedOptions()},n.num=function(e,n){if(void 0===n&&(n=0),this.opts.forceSimple)return ee(e,n);var t=i({},this.opts);return n>0&&(t.padTo=n),this.loc.numberFormatter(t).format(e)},n.formatDateTimeFromString=function(n,t){var r=this,i="en"===this.loc.listingMode(),o=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,a=function(e,t){return r.loc.extract(n,e,t)},s=function(e){return n.isOffsetFixed&&0===n.offset&&e.allowZ?"Z":n.isValid?n.zone.formatOffset(n.ts,e.format):""},u=function(e,t){return i?function(e,n){return be(n)[e.month-1]}(n,e):a(t?{month:e}:{month:e,day:"numeric"},"month")},c=function(e,t){return i?function(e,n){return Se(n)[e.weekday-1]}(n,e):a(t?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday")},l=function(e){return i?function(e,n){return Be(n)[e.year<0?0:1]}(n,e):a({era:e},"era")};return Ee(e.parseFormat(t),(function(t){switch(t){case"S":return r.num(n.millisecond);case"u":case"SSS":return r.num(n.millisecond,3);case"s":return r.num(n.second);case"ss":return r.num(n.second,2);case"uu":return r.num(Math.floor(n.millisecond/10),2);case"uuu":return r.num(Math.floor(n.millisecond/100));case"m":return r.num(n.minute);case"mm":return r.num(n.minute,2);case"h":return r.num(n.hour%12==0?12:n.hour%12);case"hh":return r.num(n.hour%12==0?12:n.hour%12,2);case"H":return r.num(n.hour);case"HH":return r.num(n.hour,2);case"Z":return s({format:"narrow",allowZ:r.opts.allowZ});case"ZZ":return s({format:"short",allowZ:r.opts.allowZ});case"ZZZ":return s({format:"techie",allowZ:r.opts.allowZ});case"ZZZZ":return n.zone.offsetName(n.ts,{format:"short",locale:r.loc.locale});case"ZZZZZ":return n.zone.offsetName(n.ts,{format:"long",locale:r.loc.locale});case"z":return n.zoneName;case"a":return i?function(e){return Te[e.hour<12?0:1]}(n):a({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return o?a({day:"numeric"},"day"):r.num(n.day);case"dd":return o?a({day:"2-digit"},"day"):r.num(n.day,2);case"c":case"E":return r.num(n.weekday);case"ccc":return c("short",!0);case"cccc":return c("long",!0);case"ccccc":return c("narrow",!0);case"EEE":return c("short",!1);case"EEEE":return c("long",!1);case"EEEEE":return c("narrow",!1);case"L":return o?a({month:"numeric",day:"numeric"},"month"):r.num(n.month);case"LL":return o?a({month:"2-digit",day:"numeric"},"month"):r.num(n.month,2);case"LLL":return u("short",!0);case"LLLL":return u("long",!0);case"LLLLL":return u("narrow",!0);case"M":return o?a({month:"numeric"},"month"):r.num(n.month);case"MM":return o?a({month:"2-digit"},"month"):r.num(n.month,2);case"MMM":return u("short",!1);case"MMMM":return u("long",!1);case"MMMMM":return u("narrow",!1);case"y":return o?a({year:"numeric"},"year"):r.num(n.year);case"yy":return o?a({year:"2-digit"},"year"):r.num(n.year.toString().slice(-2),2);case"yyyy":return o?a({year:"numeric"},"year"):r.num(n.year,4);case"yyyyyy":return o?a({year:"numeric"},"year"):r.num(n.year,6);case"G":return l("short");case"GG":return l("long");case"GGGGG":return l("narrow");case"kk":return r.num(n.weekYear.toString().slice(-2),2);case"kkkk":return r.num(n.weekYear,4);case"W":return r.num(n.weekNumber);case"WW":return r.num(n.weekNumber,2);case"o":return r.num(n.ordinal);case"ooo":return r.num(n.ordinal,3);case"q":return r.num(n.quarter);case"qq":return r.num(n.quarter,2);case"X":return r.num(Math.floor(n.ts/1e3));case"x":return r.num(n.ts);default:return function(t){var i=e.macroTokenToFormatOpts(t);return i?r.formatWithSystemDefault(n,i):t}(t)}}))},n.formatDurationFromString=function(n,t){var r,i=this,o=function(e){switch(e[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"M":return"month";case"y":return"year";default:return null}},a=e.parseFormat(t),s=a.reduce((function(e,n){var t=n.literal,r=n.val;return t?e:e.concat(r)}),[]),u=n.shiftTo.apply(n,s.map(o).filter((function(e){return e})));return Ee(a,(r=u,function(e){var n=o(e);return n?i.num(r.get(n),e.length):e}))},e}(),Ve=function(){function e(e,n){this.reason=e,this.explanation=n}return e.prototype.toMessage=function(){return this.explanation?this.reason+": "+this.explanation:this.reason},e}(),ze=function(){function e(){}var n=e.prototype;return n.offsetName=function(e,n){throw new b},n.formatOffset=function(e,n){throw new b},n.offset=function(e){throw new b},n.equals=function(e){throw new b},r(e,[{key:"type",get:function(){throw new b}},{key:"name",get:function(){throw new b}},{key:"isUniversal",get:function(){throw new b}},{key:"isValid",get:function(){throw new b}}]),e}(),Le=null,je=function(e){function n(){return e.apply(this,arguments)||this}o(n,e);var t=n.prototype;return t.offsetName=function(e,n){return fe(e,n.format,n.locale)},t.formatOffset=function(e,n){return ye(this.offset(e),n)},t.offset=function(e){return-new Date(e).getTimezoneOffset()},t.equals=function(e){return"system"===e.type},r(n,[{key:"type",get:function(){return"system"}},{key:"name",get:function(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!0}}],[{key:"instance",get:function(){return null===Le&&(Le=new n),Le}}]),n}(ze);RegExp("^"+pe.source+"$");var qe={},Fe={year:0,month:1,day:2,hour:3,minute:4,second:5},Ze={},_e=function(e){function n(t){var r;return(r=e.call(this)||this).zoneName=t,r.valid=n.isValidZone(t),r}o(n,e),n.create=function(e){return Ze[e]||(Ze[e]=new n(e)),Ze[e]},n.resetCache=function(){Ze={},qe={}},n.isValidSpecifier=function(e){return this.isValidZone(e)},n.isValidZone=function(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}};var t=n.prototype;return t.offsetName=function(e,n){return fe(e,n.format,n.locale,this.name)},t.formatOffset=function(e,n){return ye(this.offset(e),n)},t.offset=function(e){var n=new Date(e);if(isNaN(n))return NaN;var t,r=(t=this.name,qe[t]||(qe[t]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})),qe[t]),i=r.formatToParts?function(e,n){for(var t=e.formatToParts(n),r=[],i=0;i<t.length;i++){var o=t[i],a=o.type,s=o.value,u=Fe[a];W(u)||(r[u]=parseInt(s,10))}return r}(r,n):function(e,n){var t=e.format(n).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(t),i=r[1],o=r[2];return[r[3],i,o,r[4],r[5],r[6]]}(r,n),o=i[0],a=i[1],s=i[2],u=i[3],c=+n,l=c%1e3;return(ue({year:o,month:a,day:s,hour:24===u?0:u,minute:i[4],second:i[5],millisecond:0})-(c-=l>=0?l:1e3+l))/6e4},t.equals=function(e){return"iana"===e.type&&e.name===this.name},r(n,[{key:"type",get:function(){return"iana"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return this.valid}}]),n}(ze),Ue=null,He=function(e){function n(n){var t;return(t=e.call(this)||this).fixed=n,t}o(n,e),n.instance=function(e){return 0===e?n.utcInstance:new n(e)},n.parseSpecifier=function(e){if(e){var t=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(t)return new n(de(t[1],t[2]))}return null};var t=n.prototype;return t.offsetName=function(){return this.name},t.formatOffset=function(e,n){return ye(this.fixed,n)},t.offset=function(){return this.fixed},t.equals=function(e){return"fixed"===e.type&&e.fixed===this.fixed},r(n,[{key:"type",get:function(){return"fixed"}},{key:"name",get:function(){return 0===this.fixed?"UTC":"UTC"+ye(this.fixed,"narrow")}},{key:"isUniversal",get:function(){return!0}},{key:"isValid",get:function(){return!0}}],[{key:"utcInstance",get:function(){return null===Ue&&(Ue=new n(0)),Ue}}]),n}(ze),Pe=function(e){function n(n){var t;return(t=e.call(this)||this).zoneName=n,t}o(n,e);var t=n.prototype;return t.offsetName=function(){return null},t.formatOffset=function(){return""},t.offset=function(){return NaN},t.equals=function(){return!1},r(n,[{key:"type",get:function(){return"invalid"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!1}}]),n}(ze);function Re(e,n){if(W(e)||null===e)return n;if(e instanceof ze)return e;if("string"==typeof e){var t=e.toLowerCase();return"local"===t||"system"===t?n:"utc"===t||"gmt"===t?He.utcInstance:He.parseSpecifier(t)||_e.create(e)}return J(e)?He.instance(e):"object"==typeof e&&e.offset&&"number"==typeof e.offset?e:new Pe(e)}var Ye,We=function(){return Date.now()},Je="system",$e=null,Ge=null,Qe=null,Ke=function(){function e(){}return e.resetCaches=function(){dn.resetCache(),_e.resetCache()},r(e,null,[{key:"now",get:function(){return We},set:function(e){We=e}},{key:"defaultZone",get:function(){return Re(Je,je.instance)},set:function(e){Je=e}},{key:"defaultLocale",get:function(){return $e},set:function(e){$e=e}},{key:"defaultNumberingSystem",get:function(){return Ge},set:function(e){Ge=e}},{key:"defaultOutputCalendar",get:function(){return Qe},set:function(e){Qe=e}},{key:"throwOnInvalid",get:function(){return Ye},set:function(e){Ye=e}}]),e}(),Xe=["base"],en=["padTo","floor"],nn={},tn={};function rn(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=tn[t];return r||(r=new Intl.DateTimeFormat(e,n),tn[t]=r),r}var on={},an={},sn=null;function un(e,n,t,r,i){var o=e.listingMode(t);return"error"===o?null:"en"===o?r(n):i(n)}var cn=function(){function e(e,n,t){this.padTo=t.padTo||0,this.floor=t.floor||!1,t.padTo,t.floor;var r=f(t,en);if(!n||Object.keys(r).length>0){var o=i({useGrouping:!1},t);t.padTo>0&&(o.minimumIntegerDigits=t.padTo),this.inf=function(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=on[t];return r||(r=new Intl.NumberFormat(e,n),on[t]=r),r}(e,o)}}return e.prototype.format=function(e){if(this.inf){var n=this.floor?Math.floor(e):e;return this.inf.format(n)}return ee(this.floor?Math.floor(e):ie(e,3),this.padTo)},e}(),ln=function(){function e(e,n,t){var r;if(this.opts=t,e.zone.isUniversal){var o=e.offset/60*-1,a=o>=0?"Etc/GMT+"+o:"Etc/GMT"+o;0!==e.offset&&_e.create(a).valid?(r=a,this.dt=e):(r="UTC",t.timeZoneName?this.dt=e:this.dt=0===e.offset?e:lr.fromMillis(e.ts+60*e.offset*1e3))}else"system"===e.zone.type?this.dt=e:(this.dt=e,r=e.zone.name);var s=i({},this.opts);r&&(s.timeZone=r),this.dtf=rn(n,s)}var n=e.prototype;return n.format=function(){return this.dtf.format(this.dt.toJSDate())},n.formatToParts=function(){return this.dtf.formatToParts(this.dt.toJSDate())},n.resolvedOptions=function(){return this.dtf.resolvedOptions()},e}(),fn=function(){function e(e,n,t){this.opts=i({style:"long"},t),!n&&G()&&(this.rtf=function(e,n){void 0===n&&(n={});var t=n;t.base;var r=f(t,Xe),i=JSON.stringify([e,r]),o=an[i];return o||(o=new Intl.RelativeTimeFormat(e,n),an[i]=o),o}(e,t))}var n=e.prototype;return n.format=function(e,n){return this.rtf?this.rtf.format(e,n):function(e,n,t,r){void 0===t&&(t="always"),void 0===r&&(r=!1);var i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},o=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===t&&o){var a="days"===e;switch(n){case 1:return a?"tomorrow":"next "+i[e][0];case-1:return a?"yesterday":"last "+i[e][0];case 0:return a?"today":"this "+i[e][0]}}var s=Object.is(n,-0)||n<0,u=Math.abs(n),c=1===u,l=i[e],f=r?c?l[1]:l[2]||l[1]:c?i[e][0]:e;return s?u+" "+f+" ago":"in "+u+" "+f}(n,e,this.opts.numeric,"long"!==this.opts.style)},n.formatToParts=function(e,n){return this.rtf?this.rtf.formatToParts(e,n):[]},e}(),dn=function(){function e(e,n,t,r){var i=function(e){var n=e.indexOf("-u-");if(-1===n)return[e];var t,r=e.substring(0,n);try{t=rn(e).resolvedOptions()}catch(e){t=rn(r).resolvedOptions()}var i=t;return[r,i.numberingSystem,i.calendar]}(e),o=i[0],a=i[1],s=i[2];this.locale=o,this.numberingSystem=n||a||null,this.outputCalendar=t||s||null,this.intl=function(e,n,t){return t||n?(e+="-u",t&&(e+="-ca-"+t),n&&(e+="-nu-"+n),e):e}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=r,this.fastNumbersCached=null}e.fromOpts=function(n){return e.create(n.locale,n.numberingSystem,n.outputCalendar,n.defaultToEN)},e.create=function(n,t,r,i){void 0===i&&(i=!1);var o=n||Ke.defaultLocale;return new e(o||(i?"en-US":sn||(sn=(new Intl.DateTimeFormat).resolvedOptions().locale)),t||Ke.defaultNumberingSystem,r||Ke.defaultOutputCalendar,o)},e.resetCache=function(){sn=null,tn={},on={},an={}},e.fromObject=function(n){var t=void 0===n?{}:n,r=t.locale,i=t.numberingSystem,o=t.outputCalendar;return e.create(r,i,o)};var n=e.prototype;return n.listingMode=function(){var e=this.isEnglish(),n=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&n?"en":"intl"},n.clone=function(n){return n&&0!==Object.getOwnPropertyNames(n).length?e.create(n.locale||this.specifiedLocale,n.numberingSystem||this.numberingSystem,n.outputCalendar||this.outputCalendar,n.defaultToEN||!1):this},n.redefaultToEN=function(e){return void 0===e&&(e={}),this.clone(i({},e,{defaultToEN:!0}))},n.redefaultToSystem=function(e){return void 0===e&&(e={}),this.clone(i({},e,{defaultToEN:!1}))},n.months=function(e,n,t){var r=this;return void 0===n&&(n=!1),void 0===t&&(t=!0),un(this,e,t,be,(function(){var t=n?{month:e,day:"numeric"}:{month:e},i=n?"format":"standalone";return r.monthsCache[i][e]||(r.monthsCache[i][e]=function(e){for(var n=[],t=1;t<=12;t++){var r=lr.utc(2016,t,1);n.push(e(r))}return n}((function(e){return r.extract(e,t,"month")}))),r.monthsCache[i][e]}))},n.weekdays=function(e,n,t){var r=this;return void 0===n&&(n=!1),void 0===t&&(t=!0),un(this,e,t,Se,(function(){var t=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},i=n?"format":"standalone";return r.weekdaysCache[i][e]||(r.weekdaysCache[i][e]=function(e){for(var n=[],t=1;t<=7;t++){var r=lr.utc(2016,11,13+t);n.push(e(r))}return n}((function(e){return r.extract(e,t,"weekday")}))),r.weekdaysCache[i][e]}))},n.meridiems=function(e){var n=this;return void 0===e&&(e=!0),un(this,void 0,e,(function(){return Te}),(function(){if(!n.meridiemCache){var e={hour:"numeric",hourCycle:"h12"};n.meridiemCache=[lr.utc(2016,11,13,9),lr.utc(2016,11,13,19)].map((function(t){return n.extract(t,e,"dayperiod")}))}return n.meridiemCache}))},n.eras=function(e,n){var t=this;return void 0===n&&(n=!0),un(this,e,n,Be,(function(){var n={era:e};return t.eraCache[e]||(t.eraCache[e]=[lr.utc(-40,1,1),lr.utc(2017,1,1)].map((function(e){return t.extract(e,n,"era")}))),t.eraCache[e]}))},n.extract=function(e,n,t){var r=this.dtFormatter(e,n).formatToParts().find((function(e){return e.type.toLowerCase()===t}));return r?r.value:null},n.numberFormatter=function(e){return void 0===e&&(e={}),new cn(this.intl,e.forceSimple||this.fastNumbers,e)},n.dtFormatter=function(e,n){return void 0===n&&(n={}),new ln(e,this.intl,n)},n.relFormatter=function(e){return void 0===e&&(e={}),new fn(this.intl,this.isEnglish(),e)},n.listFormatter=function(e){return void 0===e&&(e={}),function(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=nn[t];return r||(r=new Intl.ListFormat(e,n),nn[t]=r),r}(this.intl,e)},n.isEnglish=function(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")},n.equals=function(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar},r(e,[{key:"fastNumbers",get:function(){var e;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(e=this).numberingSystem||"latn"===e.numberingSystem)&&("latn"===e.numberingSystem||!e.locale||e.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(e.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}}]),e}();function hn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];var r=n.reduce((function(e,n){return e+n.source}),"");return RegExp("^"+r+"$")}function mn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e){return n.reduce((function(n,t){var r=n[0],o=n[1],a=n[2],s=t(e,a),u=s[0],c=s[1],l=s[2];return[i({},r,u),o||c,l]}),[{},null,1]).slice(0,2)}}function yn(e){if(null==e)return[null,null];for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];for(var i=0,o=t;i<o.length;i++){var a=o[i],s=a[0],u=a[1],c=s.exec(e);if(c)return u(c)}return[null,null]}function vn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e,t){var r,i={};for(r=0;r<n.length;r++)i[n[r]]=ne(e[t+r]);return[i,null,t+r]}}var pn=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,gn=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,An=RegExp(""+gn.source+pn.source+"?"),wn=RegExp("(?:T"+An.source+")?"),bn=vn("weekYear","weekNumber","weekDay"),kn=vn("year","ordinal"),Cn=RegExp(gn.source+" ?(?:"+pn.source+"|("+pe.source+"))?"),In=RegExp("(?: "+Cn.source+")?");function Sn(e,n,t){var r=e[n];return W(r)?t:ne(r)}function Tn(e,n){return[{year:Sn(e,n),month:Sn(e,n+1,1),day:Sn(e,n+2,1)},null,n+3]}function On(e,n){return[{hours:Sn(e,n,0),minutes:Sn(e,n+1,0),seconds:Sn(e,n+2,0),milliseconds:re(e[n+3])},null,n+4]}function Mn(e,n){var t=!e[n]&&!e[n+1],r=de(e[n+1],e[n+2]);return[{},t?null:He.instance(r),n+3]}function xn(e,n){return[{},e[n]?_e.create(e[n]):null,n+1]}var Bn=RegExp("^T?"+gn.source+"$"),En=/^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;function Nn(e){var n=e[0],t=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8],l="-"===n[0],f=u&&"-"===u[0],d=function(e,n){return void 0===n&&(n=!1),void 0!==e&&(n||e&&l)?-e:e};return[{years:d(te(t)),months:d(te(r)),weeks:d(te(i)),days:d(te(o)),hours:d(te(a)),minutes:d(te(s)),seconds:d(te(u),"-0"===u),milliseconds:d(re(c),f)}]}var Dn={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Vn(e,n,t,r,i,o,a){var s={year:2===n.length?le(ne(n)):ne(n),month:Ae.indexOf(t)+1,day:ne(r),hour:ne(i),minute:ne(o)};return a&&(s.second=ne(a)),e&&(s.weekday=e.length>3?ke.indexOf(e)+1:Ce.indexOf(e)+1),s}var zn=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Ln(e){var n,t=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8],l=e[9],f=e[10],d=e[11],h=Vn(t,o,i,r,a,s,u);return n=c?Dn[c]:l?0:de(f,d),[h,new He(n)]}var jn=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,qn=/^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Fn=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function Zn(e){var n=e[1],t=e[2],r=e[3];return[Vn(n,e[4],r,t,e[5],e[6],e[7]),He.utcInstance]}function _n(e){var n=e[1],t=e[2],r=e[3],i=e[4],o=e[5],a=e[6];return[Vn(n,e[7],t,r,i,o,a),He.utcInstance]}var Un=hn(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,wn),Hn=hn(/(\d{4})-?W(\d\d)(?:-?(\d))?/,wn),Pn=hn(/(\d{4})-?(\d{3})/,wn),Rn=hn(An),Yn=mn(Tn,On,Mn),Wn=mn(bn,On,Mn),Jn=mn(kn,On,Mn),$n=mn(On,Mn),Gn=mn(On),Qn=hn(/(\d{4})-(\d\d)-(\d\d)/,In),Kn=hn(Cn),Xn=mn(Tn,On,Mn,xn),et=mn(On,Mn,xn),nt={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},tt=i({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},nt),rt=i({years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3}},nt),it=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],ot=it.slice(0).reverse();function at(e,n,t){void 0===t&&(t=!1);var r={values:t?n.values:i({},e.values,n.values||{}),loc:e.loc.clone(n.loc),conversionAccuracy:n.conversionAccuracy||e.conversionAccuracy};return new ut(r)}function st(e,n,t,r,i){var o=e[i][t],a=n[t]/o,s=Math.sign(a)!==Math.sign(r[i])&&0!==r[i]&&Math.abs(a)<=1?function(e){return e<0?Math.floor(e):Math.ceil(e)}(a):Math.trunc(a);r[i]+=s,n[t]-=s*o}var ut=function(){function e(e){var n="longterm"===e.conversionAccuracy||!1;this.values=e.values,this.loc=e.loc||dn.create(),this.conversionAccuracy=n?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=n?rt:tt,this.isLuxonDuration=!0}e.fromMillis=function(n,t){return e.fromObject({milliseconds:n},t)},e.fromObject=function(n,t){if(void 0===t&&(t={}),null==n||"object"!=typeof n)throw new w("Duration.fromObject: argument expected to be an object, got "+(null===n?"null":typeof n));return new e({values:me(n,e.normalizeUnit),loc:dn.fromObject(t),conversionAccuracy:t.conversionAccuracy})},e.fromDurationLike=function(n){if(J(n))return e.fromMillis(n);if(e.isDuration(n))return n;if("object"==typeof n)return e.fromObject(n);throw new w("Unknown duration argument "+n+" of type "+typeof n)},e.fromISO=function(n,t){var r=function(e){return yn(e,[En,Nn])}(n),i=r[0];return i?e.fromObject(i,t):e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.fromISOTime=function(n,t){var r=function(e){return yn(e,[Bn,Gn])}(n),i=r[0];return i?e.fromObject(i,t):e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the Duration is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Ke.throwOnInvalid)throw new p(r);return new e({invalid:r})},e.normalizeUnit=function(e){var n={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e?e.toLowerCase():e];if(!n)throw new A(e);return n},e.isDuration=function(e){return e&&e.isLuxonDuration||!1};var n=e.prototype;return n.toFormat=function(e,n){void 0===n&&(n={});var t=i({},n,{floor:!1!==n.round&&!1!==n.floor});return this.isValid?De.create(this.loc,t).formatDurationFromString(this,e):"Invalid Duration"},n.toHuman=function(e){var n=this;void 0===e&&(e={});var t=it.map((function(t){var r=n.values[t];return W(r)?null:n.loc.numberFormatter(i({style:"unit",unitDisplay:"long"},e,{unit:t.slice(0,-1)})).format(r)})).filter((function(e){return e}));return this.loc.listFormatter(i({type:"conjunction",style:e.listStyle||"narrow"},e)).format(t)},n.toObject=function(){return this.isValid?i({},this.values):{}},n.toISO=function(){if(!this.isValid)return null;var e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=ie(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e},n.toISOTime=function(e){if(void 0===e&&(e={}),!this.isValid)return null;var n=this.toMillis();if(n<0||n>=864e5)return null;e=i({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e);var t=this.shiftTo("hours","minutes","seconds","milliseconds"),r="basic"===e.format?"hhmm":"hh:mm";e.suppressSeconds&&0===t.seconds&&0===t.milliseconds||(r+="basic"===e.format?"ss":":ss",e.suppressMilliseconds&&0===t.milliseconds||(r+=".SSS"));var o=t.toFormat(r);return e.includePrefix&&(o="T"+o),o},n.toJSON=function(){return this.toISO()},n.toString=function(){return this.toISO()},n.toMillis=function(){return this.as("milliseconds")},n.valueOf=function(){return this.toMillis()},n.plus=function(n){if(!this.isValid)return this;for(var t,r=e.fromDurationLike(n),i={},o=h(it);!(t=o()).done;){var a=t.value;(K(r.values,a)||K(this.values,a))&&(i[a]=r.get(a)+this.get(a))}return at(this,{values:i},!0)},n.minus=function(n){if(!this.isValid)return this;var t=e.fromDurationLike(n);return this.plus(t.negate())},n.mapUnits=function(e){if(!this.isValid)return this;for(var n={},t=0,r=Object.keys(this.values);t<r.length;t++){var i=r[t];n[i]=he(e(this.values[i],i))}return at(this,{values:n},!0)},n.get=function(n){return this[e.normalizeUnit(n)]},n.set=function(n){return this.isValid?at(this,{values:i({},this.values,me(n,e.normalizeUnit))}):this},n.reconfigure=function(e){var n=void 0===e?{}:e,t=n.locale,r=n.numberingSystem,i=n.conversionAccuracy,o={loc:this.loc.clone({locale:t,numberingSystem:r})};return i&&(o.conversionAccuracy=i),at(this,o)},n.as=function(e){return this.isValid?this.shiftTo(e).get(e):NaN},n.normalize=function(){if(!this.isValid)return this;var e=this.toObject();return function(e,n){ot.reduce((function(t,r){return W(n[r])?t:(t&&st(e,n,t,n,r),r)}),null)}(this.matrix,e),at(this,{values:e},!0)},n.shiftTo=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!this.isValid)return this;if(0===t.length)return this;t=t.map((function(n){return e.normalizeUnit(n)}));for(var i,o,a={},s={},u=this.toObject(),c=h(it);!(o=c()).done;){var l=o.value;if(t.indexOf(l)>=0){i=l;var f=0;for(var d in s)f+=this.matrix[d][l]*s[d],s[d]=0;J(u[l])&&(f+=u[l]);var m=Math.trunc(f);for(var y in a[l]=m,s[l]=(1e3*f-1e3*m)/1e3,u)it.indexOf(y)>it.indexOf(l)&&st(this.matrix,u,y,a,l)}else J(u[l])&&(s[l]=u[l])}for(var v in s)0!==s[v]&&(a[i]+=v===i?s[v]:s[v]/this.matrix[i][v]);return at(this,{values:a},!0).normalize()},n.negate=function(){if(!this.isValid)return this;for(var e={},n=0,t=Object.keys(this.values);n<t.length;n++){var r=t[n];e[r]=0===this.values[r]?0:-this.values[r]}return at(this,{values:e},!0)},n.equals=function(e){if(!this.isValid||!e.isValid)return!1;if(!this.loc.equals(e.loc))return!1;for(var n,t=h(it);!(n=t()).done;){var r=n.value;if(i=this.values[r],o=e.values[r],!(void 0===i||0===i?void 0===o||0===o:i===o))return!1}var i,o;return!0},r(e,[{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"years",get:function(){return this.isValid?this.values.years||0:NaN}},{key:"quarters",get:function(){return this.isValid?this.values.quarters||0:NaN}},{key:"months",get:function(){return this.isValid?this.values.months||0:NaN}},{key:"weeks",get:function(){return this.isValid?this.values.weeks||0:NaN}},{key:"days",get:function(){return this.isValid?this.values.days||0:NaN}},{key:"hours",get:function(){return this.isValid?this.values.hours||0:NaN}},{key:"minutes",get:function(){return this.isValid?this.values.minutes||0:NaN}},{key:"seconds",get:function(){return this.isValid?this.values.seconds||0:NaN}},{key:"milliseconds",get:function(){return this.isValid?this.values.milliseconds||0:NaN}},{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),e}(),ct="Invalid Interval";function lt(e,n){return e&&e.isValid?n&&n.isValid?n<e?ft.invalid("end before start","The end of an interval must be after its start, but you had start="+e.toISO()+" and end="+n.toISO()):null:ft.invalid("missing or invalid end"):ft.invalid("missing or invalid start")}var ft=function(){function e(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the Interval is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Ke.throwOnInvalid)throw new v(r);return new e({invalid:r})},e.fromDateTimes=function(n,t){var r=fr(n),i=fr(t),o=lt(r,i);return null==o?new e({start:r,end:i}):o},e.after=function(n,t){var r=ut.fromDurationLike(t),i=fr(n);return e.fromDateTimes(i,i.plus(r))},e.before=function(n,t){var r=ut.fromDurationLike(t),i=fr(n);return e.fromDateTimes(i.minus(r),i)},e.fromISO=function(n,t){var r=(n||"").split("/",2),i=r[0],o=r[1];if(i&&o){var a,s,u,c;try{s=(a=lr.fromISO(i,t)).isValid}catch(o){s=!1}try{c=(u=lr.fromISO(o,t)).isValid}catch(o){c=!1}if(s&&c)return e.fromDateTimes(a,u);if(s){var l=ut.fromISO(o,t);if(l.isValid)return e.after(a,l)}else if(c){var f=ut.fromISO(i,t);if(f.isValid)return e.before(u,f)}}return e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.isInterval=function(e){return e&&e.isLuxonInterval||!1};var n=e.prototype;return n.length=function(e){return void 0===e&&(e="milliseconds"),this.isValid?this.toDuration.apply(this,[e]).get(e):NaN},n.count=function(e){if(void 0===e&&(e="milliseconds"),!this.isValid)return NaN;var n=this.start.startOf(e),t=this.end.startOf(e);return Math.floor(t.diff(n,e).get(e))+1},n.hasSame=function(e){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,e))},n.isEmpty=function(){return this.s.valueOf()===this.e.valueOf()},n.isAfter=function(e){return!!this.isValid&&this.s>e},n.isBefore=function(e){return!!this.isValid&&this.e<=e},n.contains=function(e){return!!this.isValid&&this.s<=e&&this.e>e},n.set=function(n){var t=void 0===n?{}:n,r=t.start,i=t.end;return this.isValid?e.fromDateTimes(r||this.s,i||this.e):this},n.splitAt=function(){var n=this;if(!this.isValid)return[];for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];for(var o=r.map(fr).filter((function(e){return n.contains(e)})).sort(),a=[],s=this.s,u=0;s<this.e;){var c=o[u]||this.e,l=+c>+this.e?this.e:c;a.push(e.fromDateTimes(s,l)),s=l,u+=1}return a},n.splitBy=function(n){var t=ut.fromDurationLike(n);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];for(var r,i=this.s,o=1,a=[];i<this.e;){var s=this.start.plus(t.mapUnits((function(e){return e*o})));r=+s>+this.e?this.e:s,a.push(e.fromDateTimes(i,r)),i=r,o+=1}return a},n.divideEqually=function(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]},n.overlaps=function(e){return this.e>e.s&&this.s<e.e},n.abutsStart=function(e){return!!this.isValid&&+this.e==+e.s},n.abutsEnd=function(e){return!!this.isValid&&+e.e==+this.s},n.engulfs=function(e){return!!this.isValid&&this.s<=e.s&&this.e>=e.e},n.equals=function(e){return!(!this.isValid||!e.isValid)&&this.s.equals(e.s)&&this.e.equals(e.e)},n.intersection=function(n){if(!this.isValid)return this;var t=this.s>n.s?this.s:n.s,r=this.e<n.e?this.e:n.e;return t>=r?null:e.fromDateTimes(t,r)},n.union=function(n){if(!this.isValid)return this;var t=this.s<n.s?this.s:n.s,r=this.e>n.e?this.e:n.e;return e.fromDateTimes(t,r)},e.merge=function(e){var n=e.sort((function(e,n){return e.s-n.s})).reduce((function(e,n){var t=e[0],r=e[1];return r?r.overlaps(n)||r.abutsStart(n)?[t,r.union(n)]:[t.concat([r]),n]:[t,n]}),[[],null]),t=n[0],r=n[1];return r&&t.push(r),t},e.xor=function(n){for(var t,r,i=null,o=0,a=[],s=n.map((function(e){return[{time:e.s,type:"s"},{time:e.e,type:"e"}]})),u=h((t=Array.prototype).concat.apply(t,s).sort((function(e,n){return e.time-n.time})));!(r=u()).done;){var c=r.value;1===(o+="s"===c.type?1:-1)?i=c.time:(i&&+i!=+c.time&&a.push(e.fromDateTimes(i,c.time)),i=null)}return e.merge(a)},n.difference=function(){for(var n=this,t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];return e.xor([this].concat(r)).map((function(e){return n.intersection(e)})).filter((function(e){return e&&!e.isEmpty()}))},n.toString=function(){return this.isValid?"["+this.s.toISO()+" – "+this.e.toISO()+")":ct},n.toISO=function(e){return this.isValid?this.s.toISO(e)+"/"+this.e.toISO(e):ct},n.toISODate=function(){return this.isValid?this.s.toISODate()+"/"+this.e.toISODate():ct},n.toISOTime=function(e){return this.isValid?this.s.toISOTime(e)+"/"+this.e.toISOTime(e):ct},n.toFormat=function(e,n){var t=(void 0===n?{}:n).separator,r=void 0===t?" – ":t;return this.isValid?""+this.s.toFormat(e)+r+this.e.toFormat(e):ct},n.toDuration=function(e,n){return this.isValid?this.e.diff(this.s,e,n):ut.invalid(this.invalidReason)},n.mapEndpoints=function(n){return e.fromDateTimes(n(this.s),n(this.e))},r(e,[{key:"start",get:function(){return this.isValid?this.s:null}},{key:"end",get:function(){return this.isValid?this.e:null}},{key:"isValid",get:function(){return null===this.invalidReason}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),e}(),dt=function(){function e(){}return e.hasDST=function(e){void 0===e&&(e=Ke.defaultZone);var n=lr.now().setZone(e).set({month:12});return!e.isUniversal&&n.offset!==n.set({month:6}).offset},e.isValidIANAZone=function(e){return _e.isValidZone(e)},e.normalizeZone=function(e){return Re(e,Ke.defaultZone)},e.months=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,s=t.locObj,u=void 0===s?null:s,c=t.outputCalendar,l=void 0===c?"gregory":c;return(u||dn.create(i,a,l)).months(e)},e.monthsFormat=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,s=t.locObj,u=void 0===s?null:s,c=t.outputCalendar,l=void 0===c?"gregory":c;return(u||dn.create(i,a,l)).months(e,!0)},e.weekdays=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,s=t.locObj;return((void 0===s?null:s)||dn.create(i,a,null)).weekdays(e)},e.weekdaysFormat=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,s=t.locObj;return((void 0===s?null:s)||dn.create(i,a,null)).weekdays(e,!0)},e.meridiems=function(e){var n=(void 0===e?{}:e).locale,t=void 0===n?null:n;return dn.create(t).meridiems()},e.eras=function(e,n){void 0===e&&(e="short");var t=(void 0===n?{}:n).locale,r=void 0===t?null:t;return dn.create(r,null,"gregory").eras(e)},e.features=function(){return{relative:G()}},e}();function ht(e,n){var t=function(e){return e.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf()},r=t(n)-t(e);return Math.floor(ut.fromMillis(r).as("days"))}var mt={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},yt={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},vt=mt.hanidec.replace(/[\[|\]]/g,"").split("");function pt(e,n){var t=e.numberingSystem;return void 0===n&&(n=""),new RegExp(""+mt[t||"latn"]+n)}function gt(e,n){return void 0===n&&(n=function(e){return e}),{regex:e,deser:function(e){var t=e[0];return n(function(e){var n=parseInt(e,10);if(isNaN(n)){n="";for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(-1!==e[t].search(mt.hanidec))n+=vt.indexOf(e[t]);else for(var i in yt){var o=yt[i],a=o[0],s=o[1];r>=a&&r<=s&&(n+=r-a)}}return parseInt(n,10)}return n}(t))}}}var At="( |"+String.fromCharCode(160)+")",wt=new RegExp(At,"g");function bt(e){return e.replace(/\./g,"\\.?").replace(wt,At)}function kt(e){return e.replace(/\./g,"").replace(wt," ").toLowerCase()}function Ct(e,n){return null===e?null:{regex:RegExp(e.map(bt).join("|")),deser:function(t){var r=t[0];return e.findIndex((function(e){return kt(r)===kt(e)}))+n}}}function It(e,n){return{regex:e,deser:function(e){return de(e[1],e[2])},groups:n}}function St(e){return{regex:e,deser:function(e){return e[0]}}}var Tt={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"}},Ot=null;function Mt(e,n,t){var r=function(e,n){var t;return(t=Array.prototype).concat.apply(t,e.map((function(e){return function(e,n){if(e.literal)return e;var t=De.macroTokenToFormatOpts(e.val);if(!t)return e;var r=De.create(n,t).formatDateTimeParts((Ot||(Ot=lr.fromMillis(1555555555555)),Ot)).map((function(e){return function(e,n,t){var r=e.type,i=e.value;if("literal"===r)return{literal:!0,val:i};var o=t[r],a=Tt[r];return"object"==typeof a&&(a=a[o]),a?{literal:!1,val:a}:void 0}(e,0,t)}));return r.includes(void 0)?e:r}(e,n)})))}(De.parseFormat(t),e),i=r.map((function(n){return t=n,i=pt(r=e),o=pt(r,"{2}"),a=pt(r,"{3}"),s=pt(r,"{4}"),u=pt(r,"{6}"),c=pt(r,"{1,2}"),l=pt(r,"{1,3}"),f=pt(r,"{1,6}"),d=pt(r,"{1,9}"),h=pt(r,"{2,4}"),m=pt(r,"{4,6}"),y=function(e){return{regex:RegExp((n=e.val,n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:function(e){return e[0]},literal:!0};var n},v=function(e){if(t.literal)return y(e);switch(e.val){case"G":return Ct(r.eras("short",!1),0);case"GG":return Ct(r.eras("long",!1),0);case"y":return gt(f);case"yy":case"kk":return gt(h,le);case"yyyy":case"kkkk":return gt(s);case"yyyyy":return gt(m);case"yyyyyy":return gt(u);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return gt(c);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return gt(o);case"MMM":return Ct(r.months("short",!0,!1),1);case"MMMM":return Ct(r.months("long",!0,!1),1);case"LLL":return Ct(r.months("short",!1,!1),1);case"LLLL":return Ct(r.months("long",!1,!1),1);case"o":case"S":return gt(l);case"ooo":case"SSS":return gt(a);case"u":return St(d);case"uu":return St(c);case"uuu":case"E":case"c":return gt(i);case"a":return Ct(r.meridiems(),0);case"EEE":return Ct(r.weekdays("short",!1,!1),1);case"EEEE":return Ct(r.weekdays("long",!1,!1),1);case"ccc":return Ct(r.weekdays("short",!0,!1),1);case"cccc":return Ct(r.weekdays("long",!0,!1),1);case"Z":case"ZZ":return It(new RegExp("([+-]"+c.source+")(?::("+o.source+"))?"),2);case"ZZZ":return It(new RegExp("([+-]"+c.source+")("+o.source+")?"),2);case"z":return St(/[a-z_+-/]{1,256}?/i);default:return y(e)}}(t)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"},v.token=t,v;var t,r,i,o,a,s,u,c,l,f,d,h,m,y,v})),o=i.find((function(e){return e.invalidReason}));if(o)return{input:n,tokens:r,invalidReason:o.invalidReason};var a=function(e){return["^"+e.map((function(e){return e.regex})).reduce((function(e,n){return e+"("+n.source+")"}),"")+"$",e]}(i),s=a[0],u=a[1],c=RegExp(s,"i"),l=function(e,n,t){var r=e.match(n);if(r){var i={},o=1;for(var a in t)if(K(t,a)){var s=t[a],u=s.groups?s.groups+1:1;!s.literal&&s.token&&(i[s.token.val[0]]=s.deser(r.slice(o,o+u))),o+=u}return[r,i]}return[r,{}]}(n,c,u),f=l[0],d=l[1],h=d?function(e){var n,t=null;return W(e.z)||(t=_e.create(e.z)),W(e.Z)||(t||(t=new He(e.Z)),n=e.Z),W(e.q)||(e.M=3*(e.q-1)+1),W(e.h)||(e.h<12&&1===e.a?e.h+=12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),W(e.u)||(e.S=re(e.u)),[Object.keys(e).reduce((function(n,t){var r=function(e){switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}}(t);return r&&(n[r]=e[t]),n}),{}),t,n]}(d):[null,null,void 0],m=h[0],y=h[1],v=h[2];if(K(d,"a")&&K(d,"H"))throw new g("Can't include meridiem when specifying 24-hour format");return{input:n,tokens:r,regex:c,rawMatches:f,matches:d,result:m,zone:y,specificOffset:v}}var xt=[0,31,59,90,120,151,181,212,243,273,304,334],Bt=[0,31,60,91,121,152,182,213,244,274,305,335];function Et(e,n){return new Ve("unit out of range","you specified "+n+" (of type "+typeof n+") as a "+e+", which is invalid")}function Nt(e,n,t){var r=new Date(Date.UTC(e,n-1,t)).getUTCDay();return 0===r?7:r}function Dt(e,n,t){return t+(oe(e)?Bt:xt)[n-1]}function Vt(e,n){var t=oe(e)?Bt:xt,r=t.findIndex((function(e){return e<n}));return{month:r+1,day:n-t[r]}}function zt(e){var n,t=e.year,r=e.month,o=e.day,a=Dt(t,r,o),s=Nt(t,r,o),u=Math.floor((a-s+10)/7);return u<1?u=ce(n=t-1):u>ce(t)?(n=t+1,u=1):n=t,i({weekYear:n,weekNumber:u,weekday:s},ve(e))}function Lt(e){var n,t=e.weekYear,r=e.weekNumber,o=e.weekday,a=Nt(t,1,4),s=ae(t),u=7*r+o-a-3;u<1?u+=ae(n=t-1):u>s?(n=t+1,u-=ae(t)):n=t;var c=Vt(n,u);return i({year:n,month:c.month,day:c.day},ve(e))}function jt(e){var n=e.year;return i({year:n,ordinal:Dt(n,e.month,e.day)},ve(e))}function qt(e){var n=e.year,t=Vt(n,e.ordinal);return i({year:n,month:t.month,day:t.day},ve(e))}function Ft(e){var n=$(e.year),t=X(e.month,1,12),r=X(e.day,1,se(e.year,e.month));return n?t?!r&&Et("day",e.day):Et("month",e.month):Et("year",e.year)}function Zt(e){var n=e.hour,t=e.minute,r=e.second,i=e.millisecond,o=X(n,0,23)||24===n&&0===t&&0===r&&0===i,a=X(t,0,59),s=X(r,0,59),u=X(i,0,999);return o?a?s?!u&&Et("millisecond",i):Et("second",r):Et("minute",t):Et("hour",n)}var _t="Invalid DateTime",Ut=864e13;function Ht(e){return new Ve("unsupported zone",'the zone "'+e.name+'" is not supported')}function Pt(e){return null===e.weekData&&(e.weekData=zt(e.c)),e.weekData}function Rt(e,n){var t={ts:e.ts,zone:e.zone,c:e.c,o:e.o,loc:e.loc,invalid:e.invalid};return new lr(i({},t,n,{old:t}))}function Yt(e,n,t){var r=e-60*n*1e3,i=t.offset(r);if(n===i)return[r,n];r-=60*(i-n)*1e3;var o=t.offset(r);return i===o?[r,i]:[e-60*Math.min(i,o)*1e3,Math.max(i,o)]}function Wt(e,n){var t=new Date(e+=60*n*1e3);return{year:t.getUTCFullYear(),month:t.getUTCMonth()+1,day:t.getUTCDate(),hour:t.getUTCHours(),minute:t.getUTCMinutes(),second:t.getUTCSeconds(),millisecond:t.getUTCMilliseconds()}}function Jt(e,n,t){return Yt(ue(e),n,t)}function $t(e,n){var t=e.o,r=e.c.year+Math.trunc(n.years),o=e.c.month+Math.trunc(n.months)+3*Math.trunc(n.quarters),a=i({},e.c,{year:r,month:o,day:Math.min(e.c.day,se(r,o))+Math.trunc(n.days)+7*Math.trunc(n.weeks)}),s=ut.fromObject({years:n.years-Math.trunc(n.years),quarters:n.quarters-Math.trunc(n.quarters),months:n.months-Math.trunc(n.months),weeks:n.weeks-Math.trunc(n.weeks),days:n.days-Math.trunc(n.days),hours:n.hours,minutes:n.minutes,seconds:n.seconds,milliseconds:n.milliseconds}).as("milliseconds"),u=Yt(ue(a),t,e.zone),c=u[0],l=u[1];return 0!==s&&(c+=s,l=e.zone.offset(c)),{ts:c,o:l}}function Gt(e,n,t,r,o,a){var s=t.setZone,u=t.zone;if(e&&0!==Object.keys(e).length){var c=n||u,l=lr.fromObject(e,i({},t,{zone:c,specificOffset:a}));return s?l:l.setZone(u)}return lr.invalid(new Ve("unparsable",'the input "'+o+"\" can't be parsed as "+r))}function Qt(e,n,t){return void 0===t&&(t=!0),e.isValid?De.create(dn.create("en-US"),{allowZ:t,forceSimple:!0}).formatDateTimeFromString(e,n):null}function Kt(e,n){var t=e.c.year>9999||e.c.year<0,r="";return t&&e.c.year>=0&&(r+="+"),r+=ee(e.c.year,t?6:4),n?(r+="-",r+=ee(e.c.month),r+="-",r+=ee(e.c.day)):(r+=ee(e.c.month),r+=ee(e.c.day)),r}function Xt(e,n,t,r,i){var o=ee(e.c.hour);return n?(o+=":",o+=ee(e.c.minute),0===e.c.second&&t||(o+=":")):o+=ee(e.c.minute),0===e.c.second&&t||(o+=ee(e.c.second),0===e.c.millisecond&&r||(o+=".",o+=ee(e.c.millisecond,3))),i&&(e.isOffsetFixed&&0===e.offset?o+="Z":e.o<0?(o+="-",o+=ee(Math.trunc(-e.o/60)),o+=":",o+=ee(Math.trunc(-e.o%60))):(o+="+",o+=ee(Math.trunc(e.o/60)),o+=":",o+=ee(Math.trunc(e.o%60)))),o}var er={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},nr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},tr={ordinal:1,hour:0,minute:0,second:0,millisecond:0},rr=["year","month","day","hour","minute","second","millisecond"],ir=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],or=["year","ordinal","hour","minute","second","millisecond"];function ar(e){var n={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[e.toLowerCase()];if(!n)throw new A(e);return n}function sr(e,n){var t,r,i=Re(n.zone,Ke.defaultZone),o=dn.fromObject(n),a=Ke.now();if(W(e.year))t=a;else{for(var s,u=h(rr);!(s=u()).done;){var c=s.value;W(e[c])&&(e[c]=er[c])}var l=Ft(e)||Zt(e);if(l)return lr.invalid(l);var f=Jt(e,i.offset(a),i);t=f[0],r=f[1]}return new lr({ts:t,zone:i,loc:o,o:r})}function ur(e,n,t){var r=!!W(t.round)||t.round,i=function(e,i){return e=ie(e,r||t.calendary?0:2,!0),n.loc.clone(t).relFormatter(t).format(e,i)},o=function(r){return t.calendary?n.hasSame(e,r)?0:n.startOf(r).diff(e.startOf(r),r).get(r):n.diff(e,r).get(r)};if(t.unit)return i(o(t.unit),t.unit);for(var a,s=h(t.units);!(a=s()).done;){var u=a.value,c=o(u);if(Math.abs(c)>=1)return i(c,u)}return i(e>n?-0:0,t.units[t.units.length-1])}function cr(e){var n,t={};return e.length>0&&"object"==typeof e[e.length-1]?(t=e[e.length-1],n=Array.from(e).slice(0,e.length-1)):n=Array.from(e),[t,n]}var lr=function(){function e(e){var n=e.zone||Ke.defaultZone,t=e.invalid||(Number.isNaN(e.ts)?new Ve("invalid input"):null)||(n.isValid?null:Ht(n));this.ts=W(e.ts)?Ke.now():e.ts;var r=null,i=null;if(!t)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(n)){var o=[e.old.c,e.old.o];r=o[0],i=o[1]}else{var a=n.offset(this.ts);r=Wt(this.ts,a),r=(t=Number.isNaN(r.year)?new Ve("invalid input"):null)?null:r,i=t?null:a}this._zone=n,this.loc=e.loc||dn.create(),this.invalid=t,this.weekData=null,this.c=r,this.o=i,this.isLuxonDateTime=!0}e.now=function(){return new e({})},e.local=function(){var e=cr(arguments),n=e[0],t=e[1],r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6];return sr({year:r,month:i,day:o,hour:a,minute:s,second:u,millisecond:c},n)},e.utc=function(){var e=cr(arguments),n=e[0],t=e[1],r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6];return n.zone=He.utcInstance,sr({year:r,month:i,day:o,hour:a,minute:s,second:u,millisecond:c},n)},e.fromJSDate=function(n,t){void 0===t&&(t={});var r,i=(r=n,"[object Date]"===Object.prototype.toString.call(r)?n.valueOf():NaN);if(Number.isNaN(i))return e.invalid("invalid input");var o=Re(t.zone,Ke.defaultZone);return o.isValid?new e({ts:i,zone:o,loc:dn.fromObject(t)}):e.invalid(Ht(o))},e.fromMillis=function(n,t){if(void 0===t&&(t={}),J(n))return n<-Ut||n>Ut?e.invalid("Timestamp out of range"):new e({ts:n,zone:Re(t.zone,Ke.defaultZone),loc:dn.fromObject(t)});throw new w("fromMillis requires a numerical input, but received a "+typeof n+" with value "+n)},e.fromSeconds=function(n,t){if(void 0===t&&(t={}),J(n))return new e({ts:1e3*n,zone:Re(t.zone,Ke.defaultZone),loc:dn.fromObject(t)});throw new w("fromSeconds requires a numerical input")},e.fromObject=function(n,t){void 0===t&&(t={}),n=n||{};var r=Re(t.zone,Ke.defaultZone);if(!r.isValid)return e.invalid(Ht(r));var i=Ke.now(),o=W(t.specificOffset)?r.offset(i):t.specificOffset,a=me(n,ar),s=!W(a.ordinal),u=!W(a.year),c=!W(a.month)||!W(a.day),l=u||c,f=a.weekYear||a.weekNumber,d=dn.fromObject(t);if((l||s)&&f)throw new g("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(c&&s)throw new g("Can't mix ordinal dates with month/day");var m,y,v=f||a.weekday&&!l,p=Wt(i,o);v?(m=ir,y=nr,p=zt(p)):s?(m=or,y=tr,p=jt(p)):(m=rr,y=er);for(var A,w=!1,b=h(m);!(A=b()).done;){var k=A.value;W(a[k])?a[k]=w?y[k]:p[k]:w=!0}var C=v?function(e){var n=$(e.weekYear),t=X(e.weekNumber,1,ce(e.weekYear)),r=X(e.weekday,1,7);return n?t?!r&&Et("weekday",e.weekday):Et("week",e.week):Et("weekYear",e.weekYear)}(a):s?function(e){var n=$(e.year),t=X(e.ordinal,1,ae(e.year));return n?!t&&Et("ordinal",e.ordinal):Et("year",e.year)}(a):Ft(a),I=C||Zt(a);if(I)return e.invalid(I);var S=Jt(v?Lt(a):s?qt(a):a,o,r),T=new e({ts:S[0],zone:r,o:S[1],loc:d});return a.weekday&&l&&n.weekday!==T.weekday?e.invalid("mismatched weekday","you can't specify both a weekday of "+a.weekday+" and a date of "+T.toISO()):T},e.fromISO=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[Un,Yn],[Hn,Wn],[Pn,Jn],[Rn,$n])}(e);return Gt(t[0],t[1],n,"ISO 8601",e)},e.fromRFC2822=function(e,n){void 0===n&&(n={});var t=function(e){return yn(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e),[zn,Ln])}(e);return Gt(t[0],t[1],n,"RFC 2822",e)},e.fromHTTP=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[jn,Zn],[qn,Zn],[Fn,_n])}(e);return Gt(t[0],t[1],n,"HTTP",n)},e.fromFormat=function(n,t,r){if(void 0===r&&(r={}),W(n)||W(t))throw new w("fromFormat requires an input string and a format");var i=r,o=i.locale,a=void 0===o?null:o,s=i.numberingSystem,u=void 0===s?null:s,c=function(e,n,t){var r=Mt(e,n,t);return[r.result,r.zone,r.specificOffset,r.invalidReason]}(dn.fromOpts({locale:a,numberingSystem:u,defaultToEN:!0}),n,t),l=c[0],f=c[1],d=c[2],h=c[3];return h?e.invalid(h):Gt(l,f,r,"format "+t,n,d)},e.fromString=function(n,t,r){return void 0===r&&(r={}),e.fromFormat(n,t,r)},e.fromSQL=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[Qn,Xn],[Kn,et])}(e);return Gt(t[0],t[1],n,"SQL",e)},e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the DateTime is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Ke.throwOnInvalid)throw new y(r);return new e({invalid:r})},e.isDateTime=function(e){return e&&e.isLuxonDateTime||!1};var n=e.prototype;return n.get=function(e){return this[e]},n.resolvedLocaleOptions=function(e){void 0===e&&(e={});var n=De.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:n.locale,numberingSystem:n.numberingSystem,outputCalendar:n.calendar}},n.toUTC=function(e,n){return void 0===e&&(e=0),void 0===n&&(n={}),this.setZone(He.instance(e),n)},n.toLocal=function(){return this.setZone(Ke.defaultZone)},n.setZone=function(n,t){var r=void 0===t?{}:t,i=r.keepLocalTime,o=void 0!==i&&i,a=r.keepCalendarTime,s=void 0!==a&&a;if((n=Re(n,Ke.defaultZone)).equals(this.zone))return this;if(n.isValid){var u=this.ts;if(o||s){var c=n.offset(this.ts);u=Jt(this.toObject(),c,n)[0]}return Rt(this,{ts:u,zone:n})}return e.invalid(Ht(n))},n.reconfigure=function(e){var n=void 0===e?{}:e,t=n.locale,r=n.numberingSystem,i=n.outputCalendar;return Rt(this,{loc:this.loc.clone({locale:t,numberingSystem:r,outputCalendar:i})})},n.setLocale=function(e){return this.reconfigure({locale:e})},n.set=function(e){if(!this.isValid)return this;var n,t=me(e,ar),r=!W(t.weekYear)||!W(t.weekNumber)||!W(t.weekday),o=!W(t.ordinal),a=!W(t.year),s=!W(t.month)||!W(t.day),u=a||s,c=t.weekYear||t.weekNumber;if((u||o)&&c)throw new g("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(s&&o)throw new g("Can't mix ordinal dates with month/day");r?n=Lt(i({},zt(this.c),t)):W(t.ordinal)?(n=i({},this.toObject(),t),W(t.day)&&(n.day=Math.min(se(n.year,n.month),n.day))):n=qt(i({},jt(this.c),t));var l=Jt(n,this.o,this.zone);return Rt(this,{ts:l[0],o:l[1]})},n.plus=function(e){return this.isValid?Rt(this,$t(this,ut.fromDurationLike(e))):this},n.minus=function(e){return this.isValid?Rt(this,$t(this,ut.fromDurationLike(e).negate())):this},n.startOf=function(e){if(!this.isValid)return this;var n={},t=ut.normalizeUnit(e);switch(t){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0}if("weeks"===t&&(n.weekday=1),"quarters"===t){var r=Math.ceil(this.month/3);n.month=3*(r-1)+1}return this.set(n)},n.endOf=function(e){var n;return this.isValid?this.plus((n={},n[e]=1,n)).startOf(e).minus(1):this},n.toFormat=function(e,n){return void 0===n&&(n={}),this.isValid?De.create(this.loc.redefaultToEN(n)).formatDateTimeFromString(this,e):_t},n.toLocaleString=function(e,n){return void 0===e&&(e=S),void 0===n&&(n={}),this.isValid?De.create(this.loc.clone(n),e).formatDateTime(this):_t},n.toLocaleParts=function(e){return void 0===e&&(e={}),this.isValid?De.create(this.loc.clone(e),e).formatDateTimeParts(this):[]},n.toISO=function(e){var n=void 0===e?{}:e,t=n.format,r=void 0===t?"extended":t,i=n.suppressSeconds,o=void 0!==i&&i,a=n.suppressMilliseconds,s=void 0!==a&&a,u=n.includeOffset,c=void 0===u||u;if(!this.isValid)return null;var l="extended"===r,f=Kt(this,l);return(f+="T")+Xt(this,l,o,s,c)},n.toISODate=function(e){var n=(void 0===e?{}:e).format,t=void 0===n?"extended":n;return this.isValid?Kt(this,"extended"===t):null},n.toISOWeekDate=function(){return Qt(this,"kkkk-'W'WW-c")},n.toISOTime=function(e){var n=void 0===e?{}:e,t=n.suppressMilliseconds,r=void 0!==t&&t,i=n.suppressSeconds,o=void 0!==i&&i,a=n.includeOffset,s=void 0===a||a,u=n.includePrefix,c=void 0!==u&&u,l=n.format,f=void 0===l?"extended":l;return this.isValid?(c?"T":"")+Xt(this,"extended"===f,o,r,s):null},n.toRFC2822=function(){return Qt(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)},n.toHTTP=function(){return Qt(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")},n.toSQLDate=function(){return this.isValid?Kt(this,!0):null},n.toSQLTime=function(e){var n=void 0===e?{}:e,t=n.includeOffset,r=void 0===t||t,i=n.includeZone,o=void 0!==i&&i,a=n.includeOffsetSpace,s="HH:mm:ss.SSS";return(o||r)&&((void 0===a||a)&&(s+=" "),o?s+="z":r&&(s+="ZZ")),Qt(this,s,!0)},n.toSQL=function(e){return void 0===e&&(e={}),this.isValid?this.toSQLDate()+" "+this.toSQLTime(e):null},n.toString=function(){return this.isValid?this.toISO():_t},n.valueOf=function(){return this.toMillis()},n.toMillis=function(){return this.isValid?this.ts:NaN},n.toSeconds=function(){return this.isValid?this.ts/1e3:NaN},n.toUnixInteger=function(){return this.isValid?Math.floor(this.ts/1e3):NaN},n.toJSON=function(){return this.toISO()},n.toBSON=function(){return this.toJSDate()},n.toObject=function(e){if(void 0===e&&(e={}),!this.isValid)return{};var n=i({},this.c);return e.includeConfig&&(n.outputCalendar=this.outputCalendar,n.numberingSystem=this.loc.numberingSystem,n.locale=this.loc.locale),n},n.toJSDate=function(){return new Date(this.isValid?this.ts:NaN)},n.diff=function(e,n,t){if(void 0===n&&(n="milliseconds"),void 0===t&&(t={}),!this.isValid||!e.isValid)return ut.invalid("created by diffing an invalid DateTime");var r,o=i({locale:this.locale,numberingSystem:this.numberingSystem},t),a=(r=n,Array.isArray(r)?r:[r]).map(ut.normalizeUnit),s=e.valueOf()>this.valueOf(),u=function(e,n,t,r){var i,o=function(e,n,t){for(var r,i,o={},a=0,s=[["years",function(e,n){return n.year-e.year}],["quarters",function(e,n){return n.quarter-e.quarter}],["months",function(e,n){return n.month-e.month+12*(n.year-e.year)}],["weeks",function(e,n){var t=ht(e,n);return(t-t%7)/7}],["days",ht]];a<s.length;a++){var u=s[a],c=u[0],l=u[1];if(t.indexOf(c)>=0){var f;r=c;var d,h=l(e,n);(i=e.plus(((f={})[c]=h,f)))>n?(e=e.plus(((d={})[c]=h-1,d)),h-=1):e=i,o[c]=h}}return[e,o,i,r]}(e,n,t),a=o[0],s=o[1],u=o[2],c=o[3],l=n-a,f=t.filter((function(e){return["hours","minutes","seconds","milliseconds"].indexOf(e)>=0}));0===f.length&&(u<n&&(u=a.plus(((i={})[c]=1,i))),u!==a&&(s[c]=(s[c]||0)+l/(u-a)));var d,h=ut.fromObject(s,r);return f.length>0?(d=ut.fromMillis(l,r)).shiftTo.apply(d,f).plus(h):h}(s?this:e,s?e:this,a,o);return s?u.negate():u},n.diffNow=function(n,t){return void 0===n&&(n="milliseconds"),void 0===t&&(t={}),this.diff(e.now(),n,t)},n.until=function(e){return this.isValid?ft.fromDateTimes(this,e):this},n.hasSame=function(e,n){if(!this.isValid)return!1;var t=e.valueOf(),r=this.setZone(e.zone,{keepLocalTime:!0});return r.startOf(n)<=t&&t<=r.endOf(n)},n.equals=function(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)},n.toRelative=function(n){if(void 0===n&&(n={}),!this.isValid)return null;var t=n.base||e.fromObject({},{zone:this.zone}),r=n.padding?this<t?-n.padding:n.padding:0,o=["years","months","days","hours","minutes","seconds"],a=n.unit;return Array.isArray(n.unit)&&(o=n.unit,a=void 0),ur(t,this.plus(r),i({},n,{numeric:"always",units:o,unit:a}))},n.toRelativeCalendar=function(n){return void 0===n&&(n={}),this.isValid?ur(n.base||e.fromObject({},{zone:this.zone}),this,i({},n,{numeric:"auto",units:["years","months","days"],calendary:!0})):null},e.min=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!t.every(e.isDateTime))throw new w("min requires all arguments be DateTimes");return Q(t,(function(e){return e.valueOf()}),Math.min)},e.max=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!t.every(e.isDateTime))throw new w("max requires all arguments be DateTimes");return Q(t,(function(e){return e.valueOf()}),Math.max)},e.fromFormatExplain=function(e,n,t){void 0===t&&(t={});var r=t,i=r.locale,o=void 0===i?null:i,a=r.numberingSystem,s=void 0===a?null:a;return Mt(dn.fromOpts({locale:o,numberingSystem:s,defaultToEN:!0}),e,n)},e.fromStringExplain=function(n,t,r){return void 0===r&&(r={}),e.fromFormatExplain(n,t,r)},r(e,[{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}},{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"outputCalendar",get:function(){return this.isValid?this.loc.outputCalendar:null}},{key:"zone",get:function(){return this._zone}},{key:"zoneName",get:function(){return this.isValid?this.zone.name:null}},{key:"year",get:function(){return this.isValid?this.c.year:NaN}},{key:"quarter",get:function(){return this.isValid?Math.ceil(this.c.month/3):NaN}},{key:"month",get:function(){return this.isValid?this.c.month:NaN}},{key:"day",get:function(){return this.isValid?this.c.day:NaN}},{key:"hour",get:function(){return this.isValid?this.c.hour:NaN}},{key:"minute",get:function(){return this.isValid?this.c.minute:NaN}},{key:"second",get:function(){return this.isValid?this.c.second:NaN}},{key:"millisecond",get:function(){return this.isValid?this.c.millisecond:NaN}},{key:"weekYear",get:function(){return this.isValid?Pt(this).weekYear:NaN}},{key:"weekNumber",get:function(){return this.isValid?Pt(this).weekNumber:NaN}},{key:"weekday",get:function(){return this.isValid?Pt(this).weekday:NaN}},{key:"ordinal",get:function(){return this.isValid?jt(this.c).ordinal:NaN}},{key:"monthShort",get:function(){return this.isValid?dt.months("short",{locObj:this.loc})[this.month-1]:null}},{key:"monthLong",get:function(){return this.isValid?dt.months("long",{locObj:this.loc})[this.month-1]:null}},{key:"weekdayShort",get:function(){return this.isValid?dt.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}},{key:"weekdayLong",get:function(){return this.isValid?dt.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}},{key:"offset",get:function(){return this.isValid?+this.o:NaN}},{key:"offsetNameShort",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}},{key:"offsetNameLong",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}},{key:"isOffsetFixed",get:function(){return this.isValid?this.zone.isUniversal:null}},{key:"isInDST",get:function(){return!this.isOffsetFixed&&(this.offset>this.set({month:1}).offset||this.offset>this.set({month:5}).offset)}},{key:"isInLeapYear",get:function(){return oe(this.year)}},{key:"daysInMonth",get:function(){return se(this.year,this.month)}},{key:"daysInYear",get:function(){return this.isValid?ae(this.year):NaN}},{key:"weeksInWeekYear",get:function(){return this.isValid?ce(this.weekYear):NaN}}],[{key:"DATE_SHORT",get:function(){return S}},{key:"DATE_MED",get:function(){return T}},{key:"DATE_MED_WITH_WEEKDAY",get:function(){return O}},{key:"DATE_FULL",get:function(){return M}},{key:"DATE_HUGE",get:function(){return x}},{key:"TIME_SIMPLE",get:function(){return B}},{key:"TIME_WITH_SECONDS",get:function(){return E}},{key:"TIME_WITH_SHORT_OFFSET",get:function(){return N}},{key:"TIME_WITH_LONG_OFFSET",get:function(){return D}},{key:"TIME_24_SIMPLE",get:function(){return V}},{key:"TIME_24_WITH_SECONDS",get:function(){return z}},{key:"TIME_24_WITH_SHORT_OFFSET",get:function(){return L}},{key:"TIME_24_WITH_LONG_OFFSET",get:function(){return j}},{key:"DATETIME_SHORT",get:function(){return q}},{key:"DATETIME_SHORT_WITH_SECONDS",get:function(){return F}},{key:"DATETIME_MED",get:function(){return Z}},{key:"DATETIME_MED_WITH_SECONDS",get:function(){return _}},{key:"DATETIME_MED_WITH_WEEKDAY",get:function(){return U}},{key:"DATETIME_FULL",get:function(){return H}},{key:"DATETIME_FULL_WITH_SECONDS",get:function(){return P}},{key:"DATETIME_HUGE",get:function(){return R}},{key:"DATETIME_HUGE_WITH_SECONDS",get:function(){return Y}}]),e}();function fr(e){if(lr.isDateTime(e))return e;if(e&&e.valueOf&&J(e.valueOf()))return lr.fromJSDate(e);if(e&&"object"==typeof e)return lr.fromObject(e);throw new w("Unknown datetime argument: "+e+", of type "+typeof e)}n.ou=lr},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var u=e[s],c=r.base?u[0]+r.base:u[0],l=o[c]||0,f="".concat(c," ").concat(l);o[c]=l+1;var d=t(f),h={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(h);else{var m=i(h,r);r.byIndex=s,n.splice(s,0,{identifier:f,updater:m,references:1})}a.push(f)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var u=r(e,i),c=0;c<o.length;c++){var l=t(o[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=u}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},140:(e,n,t)=>{e.exports=t.p+"cc3372ee8de8266ce712.jpeg"},256:(e,n,t)=>{e.exports=t.p+"6f6e40140c1ed91b7014.jpeg"},541:(e,n,t)=>{e.exports=t.p+"2869aa9b0b1493822b16.jpeg"},544:(e,n,t)=>{e.exports=t.p+"f16e0e112a37ff2600ee.jpeg"},626:(e,n,t)=>{e.exports=t.p+"245b5d3127b0a5b61c13.jpeg"},54:(e,n,t)=>{e.exports=t.p+"d66eb74e8968d6f17bb2.jpeg"},870:(e,n,t)=>{e.exports=t.p+"2084dfc731019acaee96.jpeg"},966:(e,n,t)=>{e.exports=t.p+"3daa2191ead08b244476.jpeg"},109:(e,n,t)=>{e.exports=t.p+"a63528099e98dc5b1540.jpeg"},207:(e,n,t)=>{e.exports=t.p+"769de745a33dfe9d66ff.jpeg"},388:(e,n,t)=>{e.exports=t.p+"d86e399ed8d996c1de0c.jpeg"},942:(e,n,t)=>{e.exports=t.p+"a34eaa824b8118b82362.jpeg"},766:(e,n,t)=>{e.exports=t.p+"fe937d180479e0b975e6.jpeg"},969:(e,n,t)=>{e.exports=t.p+"85b87548d83879da52d3.jpeg"},799:(e,n,t)=>{e.exports=t.p+"1bd671929258779a3c97.jpeg"},947:(e,n,t)=>{e.exports=t.p+"d3e441ae98198bbdf0dc.jpeg"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),u=t.n(s),c=t(216),l=t.n(c),f=t(589),d=t.n(f),h=t(426),m={};m.styleTagTransform=d(),m.setAttributes=u(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),n()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var y=t(490),v=t(947),p=t(140),g=t(256),A=t(541),w=t(544),b=t(626),k=t(870),C=t(207),I=t(388),S=t(942),T=t(766),O=t(966),M=t(109),x=t(969),B=t(799),E=t(54);function N(e){document.body.style.backgroundImage=`url('${e}')`,document.body.style.backgroundRepeat="no-repeat",document.body.style.backgroundSize="cover"}function D(e,n){let t=e+n;return y.ou.fromSeconds(t).minus({hours:1}).toLocaleString(y.ou.TIME_24_SIMPLE)}function V(e){return Math.trunc(e)}async function z(e){let n=`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&appid=8713dd0c20edf39f938c122b0184f85b`,t=await fetch(n,{mode:"cors"});if(!t.ok)throw new Error(`City ${e} not found`);var r,i;r=await t.json(),document.querySelector("#searchbox").value="",document.querySelector(".city-current").innerHTML=`${r.name}, ${r.sys.country}`,document.querySelector(".time-current").innerHTML=`${D(r.dt,r.timezone)}`,document.querySelector(".sunrise-current").innerHTML=`Sunrise ${D(r.sys.sunrise,r.timezone)}`,document.querySelector(".sunset-current").innerHTML=`Sunset ${D(r.sys.sunset,r.timezone)}`,document.querySelector(".temperature-current").innerHTML=`${V(r.main.temp)}&#176;`,document.querySelector(".weatherid-current").innerHTML=`${i=r.weather[0].description,i.charAt(0).toUpperCase()+i.slice(1)}`,document.querySelector(".weather-highlow").innerHTML=`H: ${V(r.main.temp_max)}&#176; | L: ${V(r.main.temp_min)}&#176;`,document.querySelector(".feelslike-current").innerHTML=`${V(r.main.feels_like)}&#176;`,document.querySelector(".humidity-current").innerHTML=`${r.main.humidity}%`,document.querySelector(".pressure-current").innerHTML=`${r.main.pressure}hPa`,document.querySelector(".wind-current").innerHTML=`${V(r.wind.speed)}m/s`,console.log(r.weather[0].id),console.log(r),function(e){const n=e.weather[0].id,t=D(e.dt,e.timezone).toString(),r=D(e.sys.sunset,e.timezone).toString(),i=D(e.sys.sunrise,e.timezone).toString();let o=!1;const a=parseInt(t.replace(":","")),s=parseInt(r.replace(":","")),u=parseInt(i.replace(":",""));a<s&&a>u&&(o=!0),function(e){const n=document.querySelector(":root");!0===e?n.style.setProperty("--primary","rgb(77, 77, 77)"):n.style.setProperty("--primary","white")}(o),n>=200&&n<=232?(N(v),document.querySelector(":root").style.setProperty("--primary","white")):n>=300&&n<=321?N(E):n>=500&&n<=521?1==o?(N(I),document.querySelector(":root").style.setProperty("--primary","white")):N(S):n>=600&&n<=622?N(1==o?x:B):n>=701&&n<=781?N(1==o?O:M):800==n?1==o?(N(A),document.querySelector(":root").style.setProperty("--primary","white")):N(w):n>=801&&n<=804&&(1==o&&801==n?N(k):1==o&&802==n?(document.querySelector(":root").style.setProperty("--primary","black"),N(T)):1==o&&803==n?N(p):1==o&&804==n?(N(C),document.querySelector(":root").style.setProperty("--primary","black")):N(0==o&&803==n?g:b))}(r)}const L=document.querySelector(".submit"),j=document.querySelector("#searchbox");let q;z("gdynia"),j.addEventListener("input",(()=>{q=j.value.toLowerCase(),j.classList.remove("invalid"),""===q&&j.classList.add("invalid")})),L.addEventListener("click",(e=>{e.preventDefault(),""==q||void 0===q?console.log("no city"):(console.log(q),z(q))})),console.log("hello")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,