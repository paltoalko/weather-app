(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),a.push([e.id,"body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n    height: 100vh;\n    background-color: pink;\n}\n\n:root {\n    --primary: rgb(77, 77, 77);\n}\n\n.main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}\n\n.left-clm {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.weather-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n\n}\n\n.weather-left {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\n.bar {\n    background-color: var(--primary);\n    width: 1px;\n    height: 160px;\n}\n\n.container-transparent {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}  \n\n\n.city-current {\n    line-height: 100%;\n    font-size: 4rem;\n    font-weight: 300;\n    color: var(--primary);\n}\n\n.time-current {\n    font-size: 3rem;\n    font-weight: 200;\n    color: var(--primary);\n}\n\n.sunrise-current, .sunset-current {\n    font-size: 2rem;\n    font-weight: 100;\n    color: var(--primary);\n}\n\n.search-container {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n.searchbox {\n    background-color : transparent;\n    font-size: 2rem;\n    outline: none;\n    border-bottom: 1px solid var(--primary) ;\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    margin-right: auto;\n    \n}\n\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n    opacity: 1; /* Firefox */\n  }\n\n.submit {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\nbutton i {\n    color: var(--primary);\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n}\n*:focus {\n    outline: none;\n}\n\n\n.invalid {\n    border-bottom: 1px solid red;\n}\n\n\n.weatherid-current {\n    font-size: 2rem;\n    font-weight: 200;\n    color: var(--primary)\n}\n\n.weather-item {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    padding: 4px;\n    font-weight: 200;\n    font-size: 1.25rem;\n    color: var(--primary);\n}\n\n.temperature-current {\n    font-weight: 200;\n    font-size: 4.5rem;\n    line-height: 50%;\n    padding: 8px;\n    text-align: center;\n    color: var(--primary);\n}\n\n.weather-highlow {\n    font-weight: 200;\n    font-size: 1rem;\n    color: var(--primary);\n}\n\n.timeinfo {\n    font-size: 1rem;\n    text-align: center;\n    position: absolute;\n    margin-bottom: 8px;\n    bottom: 0;\n    color: var(--primary);\n}\n\n\n\n\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,qCAAqC;IACrC,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;;AAEb;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,gCAAgC;IAChC,UAAU;IACV,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;;AAGA;IACI,iBAAiB;IACjB,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,QAAQ;AACZ;;AAEA;IACI,8BAA8B;IAC9B,eAAe;IACf,aAAa;IACb,wCAAwC;IACxC,wBAAwB;IACxB,0BAA0B;IAC1B,yBAAyB;IACzB,kBAAkB;;AAEtB;;AAEA,gBAAgB,yCAAyC;IACrD,qBAAqB;IACrB,qCAAqC;IACrC,gBAAgB;IAChB,UAAU,EAAE,YAAY;EAC1B;;AAEF;IACI,aAAa;IACb,YAAY;IACZ,6BAA6B;IAC7B,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;;;AAGA;IACI,4BAA4B;AAChC;;;AAGA;IACI,eAAe;IACf,gBAAgB;IAChB;AACJ;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,qBAAqB;AACzB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n    height: 100vh;\n    background-color: pink;\n}\n\n:root {\n    --primary: rgb(77, 77, 77);\n}\n\n.main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}\n\n.left-clm {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.weather-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n\n}\n\n.weather-left {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n}\n\n.bar {\n    background-color: var(--primary);\n    width: 1px;\n    height: 160px;\n}\n\n.container-transparent {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}  \n\n\n.city-current {\n    line-height: 100%;\n    font-size: 4rem;\n    font-weight: 300;\n    color: var(--primary);\n}\n\n.time-current {\n    font-size: 3rem;\n    font-weight: 200;\n    color: var(--primary);\n}\n\n.sunrise-current, .sunset-current {\n    font-size: 2rem;\n    font-weight: 100;\n    color: var(--primary);\n}\n\n.search-container {\n    margin: 16px;\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n.searchbox {\n    background-color : transparent;\n    font-size: 2rem;\n    outline: none;\n    border-bottom: 1px solid var(--primary) ;\n    border-top-style: hidden;\n    border-right-style: hidden;\n    border-left-style: hidden;\n    margin-right: auto;\n    \n}\n\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--primary);\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n    opacity: 1; /* Firefox */\n  }\n\n.submit {\n    outline: none;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\nbutton i {\n    color: var(--primary);\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n}\n*:focus {\n    outline: none;\n}\n\n\n.invalid {\n    border-bottom: 1px solid red;\n}\n\n\n.weatherid-current {\n    font-size: 2rem;\n    font-weight: 200;\n    color: var(--primary)\n}\n\n.weather-item {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    padding: 4px;\n    font-weight: 200;\n    font-size: 1.25rem;\n    color: var(--primary);\n}\n\n.temperature-current {\n    font-weight: 200;\n    font-size: 4.5rem;\n    line-height: 50%;\n    padding: 8px;\n    text-align: center;\n    color: var(--primary);\n}\n\n.weather-highlow {\n    font-weight: 200;\n    font-size: 1rem;\n    color: var(--primary);\n}\n\n.timeinfo {\n    font-size: 1rem;\n    text-align: center;\n    position: absolute;\n    margin-bottom: 8px;\n    bottom: 0;\n    color: var(--primary);\n}\n\n\n\n\n\n\n"],sourceRoot:""}]);const u=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},490:(e,n)=>{function t(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,u(e,n)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function u(e,n){return u=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},u(e,n)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function c(e,n,t){return c=s()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var i=new(Function.bind.apply(e,r));return t&&u(i,t.prototype),i},c.apply(null,arguments)}function l(e){var n="function"==typeof Map?new Map:void 0;return l=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return c(e,arguments,a(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)},l(e)}function f(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}function d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function h(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?d(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var m=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(l(Error)),y=function(e){function n(n){return e.call(this,"Invalid DateTime: "+n.toMessage())||this}return o(n,e),n}(m),v=function(e){function n(n){return e.call(this,"Invalid Interval: "+n.toMessage())||this}return o(n,e),n}(m),p=function(e){function n(n){return e.call(this,"Invalid Duration: "+n.toMessage())||this}return o(n,e),n}(m),g=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(m),A=function(e){function n(n){return e.call(this,"Invalid unit "+n)||this}return o(n,e),n}(m),w=function(e){function n(){return e.apply(this,arguments)||this}return o(n,e),n}(m),k=function(e){function n(){return e.call(this,"Zone is an abstract class")||this}return o(n,e),n}(m),b="numeric",S="short",T="long",C={year:b,month:b,day:b},I={year:b,month:S,day:b},O={year:b,month:S,day:b,weekday:S},M={year:b,month:T,day:b},N={year:b,month:T,day:b,weekday:T},x={hour:b,minute:b},E={hour:b,minute:b,second:b},B={hour:b,minute:b,second:b,timeZoneName:S},D={hour:b,minute:b,second:b,timeZoneName:T},V={hour:b,minute:b,hourCycle:"h23"},L={hour:b,minute:b,second:b,hourCycle:"h23"},F={hour:b,minute:b,second:b,hourCycle:"h23",timeZoneName:S},z={hour:b,minute:b,second:b,hourCycle:"h23",timeZoneName:T},q={year:b,month:b,day:b,hour:b,minute:b},Z={year:b,month:b,day:b,hour:b,minute:b,second:b},j={year:b,month:S,day:b,hour:b,minute:b},_={year:b,month:S,day:b,hour:b,minute:b,second:b},U={year:b,month:S,day:b,weekday:S,hour:b,minute:b},H={year:b,month:T,day:b,hour:b,minute:b,timeZoneName:S},R={year:b,month:T,day:b,hour:b,minute:b,second:b,timeZoneName:S},P={year:b,month:T,day:b,weekday:T,hour:b,minute:b,timeZoneName:T},Y={year:b,month:T,day:b,weekday:T,hour:b,minute:b,second:b,timeZoneName:T};function W(e){return void 0===e}function J(e){return"number"==typeof e}function G(e){return"number"==typeof e&&e%1==0}function $(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(e){return!1}}function Q(e,n,t){if(0!==e.length)return e.reduce((function(e,r){var i=[n(r),r];return e&&t(e[0],i[0])===e[0]?e:i}),null)[1]}function X(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function K(e,n,t){return G(e)&&e>=n&&e<=t}function ee(e,n){return void 0===n&&(n=2),e<0?"-"+(""+-e).padStart(n,"0"):(""+e).padStart(n,"0")}function ne(e){return W(e)||null===e||""===e?void 0:parseInt(e,10)}function te(e){return W(e)||null===e||""===e?void 0:parseFloat(e)}function re(e){if(!W(e)&&null!==e&&""!==e){var n=1e3*parseFloat("0."+e);return Math.floor(n)}}function ie(e,n,t){void 0===t&&(t=!1);var r=Math.pow(10,n);return(t?Math.trunc:Math.round)(e*r)/r}function oe(e){return e%4==0&&(e%100!=0||e%400==0)}function ae(e){return oe(e)?366:365}function ue(e,n){var t,r=(t=n-1)-12*Math.floor(t/12)+1;return 2===r?oe(e+(n-r)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][r-1]}function se(e){var n=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&e.year>=0&&(n=new Date(n)).setUTCFullYear(n.getUTCFullYear()-1900),+n}function ce(e){var n=(e+Math.floor(e/4)-Math.floor(e/100)+Math.floor(e/400))%7,t=e-1,r=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7;return 4===n||3===r?53:52}function le(e){return e>99?e:e>60?1900+e:2e3+e}function fe(e,n,t,r){void 0===r&&(r=null);var o=new Date(e),a={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(a.timeZone=r);var u=i({timeZoneName:n},a),s=new Intl.DateTimeFormat(t,u).formatToParts(o).find((function(e){return"timezonename"===e.type.toLowerCase()}));return s?s.value:null}function de(e,n){var t=parseInt(e,10);Number.isNaN(t)&&(t=0);var r=parseInt(n,10)||0;return 60*t+(t<0||Object.is(t,-0)?-r:r)}function he(e){var n=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(n))throw new w("Invalid unit value "+e);return n}function me(e,n){var t={};for(var r in e)if(X(e,r)){var i=e[r];if(null==i)continue;t[n(r)]=he(i)}return t}function ye(e,n){var t=Math.trunc(Math.abs(e/60)),r=Math.trunc(Math.abs(e%60)),i=e>=0?"+":"-";switch(n){case"short":return""+i+ee(t,2)+":"+ee(r,2);case"narrow":return""+i+t+(r>0?":"+r:"");case"techie":return""+i+ee(t,2)+ee(r,2);default:throw new RangeError("Value format "+n+" is out of range for property format")}}function ve(e){return function(e,n){return["hour","minute","second","millisecond"].reduce((function(n,t){return n[t]=e[t],n}),{})}(e)}var pe=/[A-Za-z_+-]{1,256}(:?\/[A-Za-z0-9_+-]{1,256}(\/[A-Za-z0-9_+-]{1,256})?)?/,ge=["January","February","March","April","May","June","July","August","September","October","November","December"],Ae=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],we=["J","F","M","A","M","J","J","A","S","O","N","D"];function ke(e){switch(e){case"narrow":return[].concat(we);case"short":return[].concat(Ae);case"long":return[].concat(ge);case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}var be=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Se=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Te=["M","T","W","T","F","S","S"];function Ce(e){switch(e){case"narrow":return[].concat(Te);case"short":return[].concat(Se);case"long":return[].concat(be);case"numeric":return["1","2","3","4","5","6","7"];default:return null}}var Ie=["AM","PM"],Oe=["Before Christ","Anno Domini"],Me=["BC","AD"],Ne=["B","A"];function xe(e){switch(e){case"narrow":return[].concat(Ne);case"short":return[].concat(Me);case"long":return[].concat(Oe);default:return null}}function Ee(e,n){for(var t,r="",i=h(e);!(t=i()).done;){var o=t.value;o.literal?r+=o.val:r+=n(o.val)}return r}var Be={D:C,DD:I,DDD:M,DDDD:N,t:x,tt:E,ttt:B,tttt:D,T:V,TT:L,TTT:F,TTTT:z,f:q,ff:j,fff:H,ffff:P,F:Z,FF:_,FFF:R,FFFF:Y},De=function(){function e(e,n){this.opts=n,this.loc=e,this.systemLoc=null}e.create=function(n,t){return void 0===t&&(t={}),new e(n,t)},e.parseFormat=function(e){for(var n=null,t="",r=!1,i=[],o=0;o<e.length;o++){var a=e.charAt(o);"'"===a?(t.length>0&&i.push({literal:r,val:t}),n=null,t="",r=!r):r||a===n?t+=a:(t.length>0&&i.push({literal:!1,val:t}),t=a,n=a)}return t.length>0&&i.push({literal:r,val:t}),i},e.macroTokenToFormatOpts=function(e){return Be[e]};var n=e.prototype;return n.formatWithSystemDefault=function(e,n){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,i({},this.opts,n)).format()},n.formatDateTime=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).format()},n.formatDateTimeParts=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).formatToParts()},n.resolvedOptions=function(e,n){return void 0===n&&(n={}),this.loc.dtFormatter(e,i({},this.opts,n)).resolvedOptions()},n.num=function(e,n){if(void 0===n&&(n=0),this.opts.forceSimple)return ee(e,n);var t=i({},this.opts);return n>0&&(t.padTo=n),this.loc.numberFormatter(t).format(e)},n.formatDateTimeFromString=function(n,t){var r=this,i="en"===this.loc.listingMode(),o=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,a=function(e,t){return r.loc.extract(n,e,t)},u=function(e){return n.isOffsetFixed&&0===n.offset&&e.allowZ?"Z":n.isValid?n.zone.formatOffset(n.ts,e.format):""},s=function(e,t){return i?function(e,n){return ke(n)[e.month-1]}(n,e):a(t?{month:e}:{month:e,day:"numeric"},"month")},c=function(e,t){return i?function(e,n){return Ce(n)[e.weekday-1]}(n,e):a(t?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday")},l=function(e){return i?function(e,n){return xe(n)[e.year<0?0:1]}(n,e):a({era:e},"era")};return Ee(e.parseFormat(t),(function(t){switch(t){case"S":return r.num(n.millisecond);case"u":case"SSS":return r.num(n.millisecond,3);case"s":return r.num(n.second);case"ss":return r.num(n.second,2);case"uu":return r.num(Math.floor(n.millisecond/10),2);case"uuu":return r.num(Math.floor(n.millisecond/100));case"m":return r.num(n.minute);case"mm":return r.num(n.minute,2);case"h":return r.num(n.hour%12==0?12:n.hour%12);case"hh":return r.num(n.hour%12==0?12:n.hour%12,2);case"H":return r.num(n.hour);case"HH":return r.num(n.hour,2);case"Z":return u({format:"narrow",allowZ:r.opts.allowZ});case"ZZ":return u({format:"short",allowZ:r.opts.allowZ});case"ZZZ":return u({format:"techie",allowZ:r.opts.allowZ});case"ZZZZ":return n.zone.offsetName(n.ts,{format:"short",locale:r.loc.locale});case"ZZZZZ":return n.zone.offsetName(n.ts,{format:"long",locale:r.loc.locale});case"z":return n.zoneName;case"a":return i?function(e){return Ie[e.hour<12?0:1]}(n):a({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return o?a({day:"numeric"},"day"):r.num(n.day);case"dd":return o?a({day:"2-digit"},"day"):r.num(n.day,2);case"c":case"E":return r.num(n.weekday);case"ccc":return c("short",!0);case"cccc":return c("long",!0);case"ccccc":return c("narrow",!0);case"EEE":return c("short",!1);case"EEEE":return c("long",!1);case"EEEEE":return c("narrow",!1);case"L":return o?a({month:"numeric",day:"numeric"},"month"):r.num(n.month);case"LL":return o?a({month:"2-digit",day:"numeric"},"month"):r.num(n.month,2);case"LLL":return s("short",!0);case"LLLL":return s("long",!0);case"LLLLL":return s("narrow",!0);case"M":return o?a({month:"numeric"},"month"):r.num(n.month);case"MM":return o?a({month:"2-digit"},"month"):r.num(n.month,2);case"MMM":return s("short",!1);case"MMMM":return s("long",!1);case"MMMMM":return s("narrow",!1);case"y":return o?a({year:"numeric"},"year"):r.num(n.year);case"yy":return o?a({year:"2-digit"},"year"):r.num(n.year.toString().slice(-2),2);case"yyyy":return o?a({year:"numeric"},"year"):r.num(n.year,4);case"yyyyyy":return o?a({year:"numeric"},"year"):r.num(n.year,6);case"G":return l("short");case"GG":return l("long");case"GGGGG":return l("narrow");case"kk":return r.num(n.weekYear.toString().slice(-2),2);case"kkkk":return r.num(n.weekYear,4);case"W":return r.num(n.weekNumber);case"WW":return r.num(n.weekNumber,2);case"o":return r.num(n.ordinal);case"ooo":return r.num(n.ordinal,3);case"q":return r.num(n.quarter);case"qq":return r.num(n.quarter,2);case"X":return r.num(Math.floor(n.ts/1e3));case"x":return r.num(n.ts);default:return function(t){var i=e.macroTokenToFormatOpts(t);return i?r.formatWithSystemDefault(n,i):t}(t)}}))},n.formatDurationFromString=function(n,t){var r,i=this,o=function(e){switch(e[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"M":return"month";case"y":return"year";default:return null}},a=e.parseFormat(t),u=a.reduce((function(e,n){var t=n.literal,r=n.val;return t?e:e.concat(r)}),[]),s=n.shiftTo.apply(n,u.map(o).filter((function(e){return e})));return Ee(a,(r=s,function(e){var n=o(e);return n?i.num(r.get(n),e.length):e}))},e}(),Ve=function(){function e(e,n){this.reason=e,this.explanation=n}return e.prototype.toMessage=function(){return this.explanation?this.reason+": "+this.explanation:this.reason},e}(),Le=function(){function e(){}var n=e.prototype;return n.offsetName=function(e,n){throw new k},n.formatOffset=function(e,n){throw new k},n.offset=function(e){throw new k},n.equals=function(e){throw new k},r(e,[{key:"type",get:function(){throw new k}},{key:"name",get:function(){throw new k}},{key:"isUniversal",get:function(){throw new k}},{key:"isValid",get:function(){throw new k}}]),e}(),Fe=null,ze=function(e){function n(){return e.apply(this,arguments)||this}o(n,e);var t=n.prototype;return t.offsetName=function(e,n){return fe(e,n.format,n.locale)},t.formatOffset=function(e,n){return ye(this.offset(e),n)},t.offset=function(e){return-new Date(e).getTimezoneOffset()},t.equals=function(e){return"system"===e.type},r(n,[{key:"type",get:function(){return"system"}},{key:"name",get:function(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!0}}],[{key:"instance",get:function(){return null===Fe&&(Fe=new n),Fe}}]),n}(Le);RegExp("^"+pe.source+"$");var qe={},Ze={year:0,month:1,day:2,hour:3,minute:4,second:5},je={},_e=function(e){function n(t){var r;return(r=e.call(this)||this).zoneName=t,r.valid=n.isValidZone(t),r}o(n,e),n.create=function(e){return je[e]||(je[e]=new n(e)),je[e]},n.resetCache=function(){je={},qe={}},n.isValidSpecifier=function(e){return this.isValidZone(e)},n.isValidZone=function(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}};var t=n.prototype;return t.offsetName=function(e,n){return fe(e,n.format,n.locale,this.name)},t.formatOffset=function(e,n){return ye(this.offset(e),n)},t.offset=function(e){var n=new Date(e);if(isNaN(n))return NaN;var t,r=(t=this.name,qe[t]||(qe[t]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})),qe[t]),i=r.formatToParts?function(e,n){for(var t=e.formatToParts(n),r=[],i=0;i<t.length;i++){var o=t[i],a=o.type,u=o.value,s=Ze[a];W(s)||(r[s]=parseInt(u,10))}return r}(r,n):function(e,n){var t=e.format(n).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(t),i=r[1],o=r[2];return[r[3],i,o,r[4],r[5],r[6]]}(r,n),o=i[0],a=i[1],u=i[2],s=i[3],c=+n,l=c%1e3;return(se({year:o,month:a,day:u,hour:24===s?0:s,minute:i[4],second:i[5],millisecond:0})-(c-=l>=0?l:1e3+l))/6e4},t.equals=function(e){return"iana"===e.type&&e.name===this.name},r(n,[{key:"type",get:function(){return"iana"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return this.valid}}]),n}(Le),Ue=null,He=function(e){function n(n){var t;return(t=e.call(this)||this).fixed=n,t}o(n,e),n.instance=function(e){return 0===e?n.utcInstance:new n(e)},n.parseSpecifier=function(e){if(e){var t=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(t)return new n(de(t[1],t[2]))}return null};var t=n.prototype;return t.offsetName=function(){return this.name},t.formatOffset=function(e,n){return ye(this.fixed,n)},t.offset=function(){return this.fixed},t.equals=function(e){return"fixed"===e.type&&e.fixed===this.fixed},r(n,[{key:"type",get:function(){return"fixed"}},{key:"name",get:function(){return 0===this.fixed?"UTC":"UTC"+ye(this.fixed,"narrow")}},{key:"isUniversal",get:function(){return!0}},{key:"isValid",get:function(){return!0}}],[{key:"utcInstance",get:function(){return null===Ue&&(Ue=new n(0)),Ue}}]),n}(Le),Re=function(e){function n(n){var t;return(t=e.call(this)||this).zoneName=n,t}o(n,e);var t=n.prototype;return t.offsetName=function(){return null},t.formatOffset=function(){return""},t.offset=function(){return NaN},t.equals=function(){return!1},r(n,[{key:"type",get:function(){return"invalid"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!1}}]),n}(Le);function Pe(e,n){if(W(e)||null===e)return n;if(e instanceof Le)return e;if("string"==typeof e){var t=e.toLowerCase();return"local"===t||"system"===t?n:"utc"===t||"gmt"===t?He.utcInstance:He.parseSpecifier(t)||_e.create(e)}return J(e)?He.instance(e):"object"==typeof e&&e.offset&&"number"==typeof e.offset?e:new Re(e)}var Ye,We=function(){return Date.now()},Je="system",Ge=null,$e=null,Qe=null,Xe=function(){function e(){}return e.resetCaches=function(){dn.resetCache(),_e.resetCache()},r(e,null,[{key:"now",get:function(){return We},set:function(e){We=e}},{key:"defaultZone",get:function(){return Pe(Je,ze.instance)},set:function(e){Je=e}},{key:"defaultLocale",get:function(){return Ge},set:function(e){Ge=e}},{key:"defaultNumberingSystem",get:function(){return $e},set:function(e){$e=e}},{key:"defaultOutputCalendar",get:function(){return Qe},set:function(e){Qe=e}},{key:"throwOnInvalid",get:function(){return Ye},set:function(e){Ye=e}}]),e}(),Ke=["base"],en=["padTo","floor"],nn={},tn={};function rn(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=tn[t];return r||(r=new Intl.DateTimeFormat(e,n),tn[t]=r),r}var on={},an={},un=null;function sn(e,n,t,r,i){var o=e.listingMode(t);return"error"===o?null:"en"===o?r(n):i(n)}var cn=function(){function e(e,n,t){this.padTo=t.padTo||0,this.floor=t.floor||!1,t.padTo,t.floor;var r=f(t,en);if(!n||Object.keys(r).length>0){var o=i({useGrouping:!1},t);t.padTo>0&&(o.minimumIntegerDigits=t.padTo),this.inf=function(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=on[t];return r||(r=new Intl.NumberFormat(e,n),on[t]=r),r}(e,o)}}return e.prototype.format=function(e){if(this.inf){var n=this.floor?Math.floor(e):e;return this.inf.format(n)}return ee(this.floor?Math.floor(e):ie(e,3),this.padTo)},e}(),ln=function(){function e(e,n,t){var r;if(this.opts=t,e.zone.isUniversal){var o=e.offset/60*-1,a=o>=0?"Etc/GMT+"+o:"Etc/GMT"+o;0!==e.offset&&_e.create(a).valid?(r=a,this.dt=e):(r="UTC",t.timeZoneName?this.dt=e:this.dt=0===e.offset?e:lr.fromMillis(e.ts+60*e.offset*1e3))}else"system"===e.zone.type?this.dt=e:(this.dt=e,r=e.zone.name);var u=i({},this.opts);r&&(u.timeZone=r),this.dtf=rn(n,u)}var n=e.prototype;return n.format=function(){return this.dtf.format(this.dt.toJSDate())},n.formatToParts=function(){return this.dtf.formatToParts(this.dt.toJSDate())},n.resolvedOptions=function(){return this.dtf.resolvedOptions()},e}(),fn=function(){function e(e,n,t){this.opts=i({style:"long"},t),!n&&$()&&(this.rtf=function(e,n){void 0===n&&(n={});var t=n;t.base;var r=f(t,Ke),i=JSON.stringify([e,r]),o=an[i];return o||(o=new Intl.RelativeTimeFormat(e,n),an[i]=o),o}(e,t))}var n=e.prototype;return n.format=function(e,n){return this.rtf?this.rtf.format(e,n):function(e,n,t,r){void 0===t&&(t="always"),void 0===r&&(r=!1);var i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},o=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===t&&o){var a="days"===e;switch(n){case 1:return a?"tomorrow":"next "+i[e][0];case-1:return a?"yesterday":"last "+i[e][0];case 0:return a?"today":"this "+i[e][0]}}var u=Object.is(n,-0)||n<0,s=Math.abs(n),c=1===s,l=i[e],f=r?c?l[1]:l[2]||l[1]:c?i[e][0]:e;return u?s+" "+f+" ago":"in "+s+" "+f}(n,e,this.opts.numeric,"long"!==this.opts.style)},n.formatToParts=function(e,n){return this.rtf?this.rtf.formatToParts(e,n):[]},e}(),dn=function(){function e(e,n,t,r){var i=function(e){var n=e.indexOf("-u-");if(-1===n)return[e];var t,r=e.substring(0,n);try{t=rn(e).resolvedOptions()}catch(e){t=rn(r).resolvedOptions()}var i=t;return[r,i.numberingSystem,i.calendar]}(e),o=i[0],a=i[1],u=i[2];this.locale=o,this.numberingSystem=n||a||null,this.outputCalendar=t||u||null,this.intl=function(e,n,t){return t||n?(e+="-u",t&&(e+="-ca-"+t),n&&(e+="-nu-"+n),e):e}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=r,this.fastNumbersCached=null}e.fromOpts=function(n){return e.create(n.locale,n.numberingSystem,n.outputCalendar,n.defaultToEN)},e.create=function(n,t,r,i){void 0===i&&(i=!1);var o=n||Xe.defaultLocale;return new e(o||(i?"en-US":un||(un=(new Intl.DateTimeFormat).resolvedOptions().locale)),t||Xe.defaultNumberingSystem,r||Xe.defaultOutputCalendar,o)},e.resetCache=function(){un=null,tn={},on={},an={}},e.fromObject=function(n){var t=void 0===n?{}:n,r=t.locale,i=t.numberingSystem,o=t.outputCalendar;return e.create(r,i,o)};var n=e.prototype;return n.listingMode=function(){var e=this.isEnglish(),n=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&n?"en":"intl"},n.clone=function(n){return n&&0!==Object.getOwnPropertyNames(n).length?e.create(n.locale||this.specifiedLocale,n.numberingSystem||this.numberingSystem,n.outputCalendar||this.outputCalendar,n.defaultToEN||!1):this},n.redefaultToEN=function(e){return void 0===e&&(e={}),this.clone(i({},e,{defaultToEN:!0}))},n.redefaultToSystem=function(e){return void 0===e&&(e={}),this.clone(i({},e,{defaultToEN:!1}))},n.months=function(e,n,t){var r=this;return void 0===n&&(n=!1),void 0===t&&(t=!0),sn(this,e,t,ke,(function(){var t=n?{month:e,day:"numeric"}:{month:e},i=n?"format":"standalone";return r.monthsCache[i][e]||(r.monthsCache[i][e]=function(e){for(var n=[],t=1;t<=12;t++){var r=lr.utc(2016,t,1);n.push(e(r))}return n}((function(e){return r.extract(e,t,"month")}))),r.monthsCache[i][e]}))},n.weekdays=function(e,n,t){var r=this;return void 0===n&&(n=!1),void 0===t&&(t=!0),sn(this,e,t,Ce,(function(){var t=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},i=n?"format":"standalone";return r.weekdaysCache[i][e]||(r.weekdaysCache[i][e]=function(e){for(var n=[],t=1;t<=7;t++){var r=lr.utc(2016,11,13+t);n.push(e(r))}return n}((function(e){return r.extract(e,t,"weekday")}))),r.weekdaysCache[i][e]}))},n.meridiems=function(e){var n=this;return void 0===e&&(e=!0),sn(this,void 0,e,(function(){return Ie}),(function(){if(!n.meridiemCache){var e={hour:"numeric",hourCycle:"h12"};n.meridiemCache=[lr.utc(2016,11,13,9),lr.utc(2016,11,13,19)].map((function(t){return n.extract(t,e,"dayperiod")}))}return n.meridiemCache}))},n.eras=function(e,n){var t=this;return void 0===n&&(n=!0),sn(this,e,n,xe,(function(){var n={era:e};return t.eraCache[e]||(t.eraCache[e]=[lr.utc(-40,1,1),lr.utc(2017,1,1)].map((function(e){return t.extract(e,n,"era")}))),t.eraCache[e]}))},n.extract=function(e,n,t){var r=this.dtFormatter(e,n).formatToParts().find((function(e){return e.type.toLowerCase()===t}));return r?r.value:null},n.numberFormatter=function(e){return void 0===e&&(e={}),new cn(this.intl,e.forceSimple||this.fastNumbers,e)},n.dtFormatter=function(e,n){return void 0===n&&(n={}),new ln(e,this.intl,n)},n.relFormatter=function(e){return void 0===e&&(e={}),new fn(this.intl,this.isEnglish(),e)},n.listFormatter=function(e){return void 0===e&&(e={}),function(e,n){void 0===n&&(n={});var t=JSON.stringify([e,n]),r=nn[t];return r||(r=new Intl.ListFormat(e,n),nn[t]=r),r}(this.intl,e)},n.isEnglish=function(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")},n.equals=function(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar},r(e,[{key:"fastNumbers",get:function(){var e;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(e=this).numberingSystem||"latn"===e.numberingSystem)&&("latn"===e.numberingSystem||!e.locale||e.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(e.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}}]),e}();function hn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];var r=n.reduce((function(e,n){return e+n.source}),"");return RegExp("^"+r+"$")}function mn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e){return n.reduce((function(n,t){var r=n[0],o=n[1],a=n[2],u=t(e,a),s=u[0],c=u[1],l=u[2];return[i({},r,s),o||c,l]}),[{},null,1]).slice(0,2)}}function yn(e){if(null==e)return[null,null];for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];for(var i=0,o=t;i<o.length;i++){var a=o[i],u=a[0],s=a[1],c=u.exec(e);if(c)return s(c)}return[null,null]}function vn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e,t){var r,i={};for(r=0;r<n.length;r++)i[n[r]]=ne(e[t+r]);return[i,null,t+r]}}var pn=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,gn=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,An=RegExp(""+gn.source+pn.source+"?"),wn=RegExp("(?:T"+An.source+")?"),kn=vn("weekYear","weekNumber","weekDay"),bn=vn("year","ordinal"),Sn=RegExp(gn.source+" ?(?:"+pn.source+"|("+pe.source+"))?"),Tn=RegExp("(?: "+Sn.source+")?");function Cn(e,n,t){var r=e[n];return W(r)?t:ne(r)}function In(e,n){return[{year:Cn(e,n),month:Cn(e,n+1,1),day:Cn(e,n+2,1)},null,n+3]}function On(e,n){return[{hours:Cn(e,n,0),minutes:Cn(e,n+1,0),seconds:Cn(e,n+2,0),milliseconds:re(e[n+3])},null,n+4]}function Mn(e,n){var t=!e[n]&&!e[n+1],r=de(e[n+1],e[n+2]);return[{},t?null:He.instance(r),n+3]}function Nn(e,n){return[{},e[n]?_e.create(e[n]):null,n+1]}var xn=RegExp("^T?"+gn.source+"$"),En=/^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;function Bn(e){var n=e[0],t=e[1],r=e[2],i=e[3],o=e[4],a=e[5],u=e[6],s=e[7],c=e[8],l="-"===n[0],f=s&&"-"===s[0],d=function(e,n){return void 0===n&&(n=!1),void 0!==e&&(n||e&&l)?-e:e};return[{years:d(te(t)),months:d(te(r)),weeks:d(te(i)),days:d(te(o)),hours:d(te(a)),minutes:d(te(u)),seconds:d(te(s),"-0"===s),milliseconds:d(re(c),f)}]}var Dn={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Vn(e,n,t,r,i,o,a){var u={year:2===n.length?le(ne(n)):ne(n),month:Ae.indexOf(t)+1,day:ne(r),hour:ne(i),minute:ne(o)};return a&&(u.second=ne(a)),e&&(u.weekday=e.length>3?be.indexOf(e)+1:Se.indexOf(e)+1),u}var Ln=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Fn(e){var n,t=e[1],r=e[2],i=e[3],o=e[4],a=e[5],u=e[6],s=e[7],c=e[8],l=e[9],f=e[10],d=e[11],h=Vn(t,o,i,r,a,u,s);return n=c?Dn[c]:l?0:de(f,d),[h,new He(n)]}var zn=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,qn=/^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Zn=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function jn(e){var n=e[1],t=e[2],r=e[3];return[Vn(n,e[4],r,t,e[5],e[6],e[7]),He.utcInstance]}function _n(e){var n=e[1],t=e[2],r=e[3],i=e[4],o=e[5],a=e[6];return[Vn(n,e[7],t,r,i,o,a),He.utcInstance]}var Un=hn(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,wn),Hn=hn(/(\d{4})-?W(\d\d)(?:-?(\d))?/,wn),Rn=hn(/(\d{4})-?(\d{3})/,wn),Pn=hn(An),Yn=mn(In,On,Mn),Wn=mn(kn,On,Mn),Jn=mn(bn,On,Mn),Gn=mn(On,Mn),$n=mn(On),Qn=hn(/(\d{4})-(\d\d)-(\d\d)/,Tn),Xn=hn(Sn),Kn=mn(In,On,Mn,Nn),et=mn(On,Mn,Nn),nt={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},tt=i({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},nt),rt=i({years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3}},nt),it=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],ot=it.slice(0).reverse();function at(e,n,t){void 0===t&&(t=!1);var r={values:t?n.values:i({},e.values,n.values||{}),loc:e.loc.clone(n.loc),conversionAccuracy:n.conversionAccuracy||e.conversionAccuracy};return new st(r)}function ut(e,n,t,r,i){var o=e[i][t],a=n[t]/o,u=Math.sign(a)!==Math.sign(r[i])&&0!==r[i]&&Math.abs(a)<=1?function(e){return e<0?Math.floor(e):Math.ceil(e)}(a):Math.trunc(a);r[i]+=u,n[t]-=u*o}var st=function(){function e(e){var n="longterm"===e.conversionAccuracy||!1;this.values=e.values,this.loc=e.loc||dn.create(),this.conversionAccuracy=n?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=n?rt:tt,this.isLuxonDuration=!0}e.fromMillis=function(n,t){return e.fromObject({milliseconds:n},t)},e.fromObject=function(n,t){if(void 0===t&&(t={}),null==n||"object"!=typeof n)throw new w("Duration.fromObject: argument expected to be an object, got "+(null===n?"null":typeof n));return new e({values:me(n,e.normalizeUnit),loc:dn.fromObject(t),conversionAccuracy:t.conversionAccuracy})},e.fromDurationLike=function(n){if(J(n))return e.fromMillis(n);if(e.isDuration(n))return n;if("object"==typeof n)return e.fromObject(n);throw new w("Unknown duration argument "+n+" of type "+typeof n)},e.fromISO=function(n,t){var r=function(e){return yn(e,[En,Bn])}(n),i=r[0];return i?e.fromObject(i,t):e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.fromISOTime=function(n,t){var r=function(e){return yn(e,[xn,$n])}(n),i=r[0];return i?e.fromObject(i,t):e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the Duration is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Xe.throwOnInvalid)throw new p(r);return new e({invalid:r})},e.normalizeUnit=function(e){var n={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e?e.toLowerCase():e];if(!n)throw new A(e);return n},e.isDuration=function(e){return e&&e.isLuxonDuration||!1};var n=e.prototype;return n.toFormat=function(e,n){void 0===n&&(n={});var t=i({},n,{floor:!1!==n.round&&!1!==n.floor});return this.isValid?De.create(this.loc,t).formatDurationFromString(this,e):"Invalid Duration"},n.toHuman=function(e){var n=this;void 0===e&&(e={});var t=it.map((function(t){var r=n.values[t];return W(r)?null:n.loc.numberFormatter(i({style:"unit",unitDisplay:"long"},e,{unit:t.slice(0,-1)})).format(r)})).filter((function(e){return e}));return this.loc.listFormatter(i({type:"conjunction",style:e.listStyle||"narrow"},e)).format(t)},n.toObject=function(){return this.isValid?i({},this.values):{}},n.toISO=function(){if(!this.isValid)return null;var e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=ie(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e},n.toISOTime=function(e){if(void 0===e&&(e={}),!this.isValid)return null;var n=this.toMillis();if(n<0||n>=864e5)return null;e=i({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e);var t=this.shiftTo("hours","minutes","seconds","milliseconds"),r="basic"===e.format?"hhmm":"hh:mm";e.suppressSeconds&&0===t.seconds&&0===t.milliseconds||(r+="basic"===e.format?"ss":":ss",e.suppressMilliseconds&&0===t.milliseconds||(r+=".SSS"));var o=t.toFormat(r);return e.includePrefix&&(o="T"+o),o},n.toJSON=function(){return this.toISO()},n.toString=function(){return this.toISO()},n.toMillis=function(){return this.as("milliseconds")},n.valueOf=function(){return this.toMillis()},n.plus=function(n){if(!this.isValid)return this;for(var t,r=e.fromDurationLike(n),i={},o=h(it);!(t=o()).done;){var a=t.value;(X(r.values,a)||X(this.values,a))&&(i[a]=r.get(a)+this.get(a))}return at(this,{values:i},!0)},n.minus=function(n){if(!this.isValid)return this;var t=e.fromDurationLike(n);return this.plus(t.negate())},n.mapUnits=function(e){if(!this.isValid)return this;for(var n={},t=0,r=Object.keys(this.values);t<r.length;t++){var i=r[t];n[i]=he(e(this.values[i],i))}return at(this,{values:n},!0)},n.get=function(n){return this[e.normalizeUnit(n)]},n.set=function(n){return this.isValid?at(this,{values:i({},this.values,me(n,e.normalizeUnit))}):this},n.reconfigure=function(e){var n=void 0===e?{}:e,t=n.locale,r=n.numberingSystem,i=n.conversionAccuracy,o={loc:this.loc.clone({locale:t,numberingSystem:r})};return i&&(o.conversionAccuracy=i),at(this,o)},n.as=function(e){return this.isValid?this.shiftTo(e).get(e):NaN},n.normalize=function(){if(!this.isValid)return this;var e=this.toObject();return function(e,n){ot.reduce((function(t,r){return W(n[r])?t:(t&&ut(e,n,t,n,r),r)}),null)}(this.matrix,e),at(this,{values:e},!0)},n.shiftTo=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!this.isValid)return this;if(0===t.length)return this;t=t.map((function(n){return e.normalizeUnit(n)}));for(var i,o,a={},u={},s=this.toObject(),c=h(it);!(o=c()).done;){var l=o.value;if(t.indexOf(l)>=0){i=l;var f=0;for(var d in u)f+=this.matrix[d][l]*u[d],u[d]=0;J(s[l])&&(f+=s[l]);var m=Math.trunc(f);for(var y in a[l]=m,u[l]=(1e3*f-1e3*m)/1e3,s)it.indexOf(y)>it.indexOf(l)&&ut(this.matrix,s,y,a,l)}else J(s[l])&&(u[l]=s[l])}for(var v in u)0!==u[v]&&(a[i]+=v===i?u[v]:u[v]/this.matrix[i][v]);return at(this,{values:a},!0).normalize()},n.negate=function(){if(!this.isValid)return this;for(var e={},n=0,t=Object.keys(this.values);n<t.length;n++){var r=t[n];e[r]=0===this.values[r]?0:-this.values[r]}return at(this,{values:e},!0)},n.equals=function(e){if(!this.isValid||!e.isValid)return!1;if(!this.loc.equals(e.loc))return!1;for(var n,t=h(it);!(n=t()).done;){var r=n.value;if(i=this.values[r],o=e.values[r],!(void 0===i||0===i?void 0===o||0===o:i===o))return!1}var i,o;return!0},r(e,[{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"years",get:function(){return this.isValid?this.values.years||0:NaN}},{key:"quarters",get:function(){return this.isValid?this.values.quarters||0:NaN}},{key:"months",get:function(){return this.isValid?this.values.months||0:NaN}},{key:"weeks",get:function(){return this.isValid?this.values.weeks||0:NaN}},{key:"days",get:function(){return this.isValid?this.values.days||0:NaN}},{key:"hours",get:function(){return this.isValid?this.values.hours||0:NaN}},{key:"minutes",get:function(){return this.isValid?this.values.minutes||0:NaN}},{key:"seconds",get:function(){return this.isValid?this.values.seconds||0:NaN}},{key:"milliseconds",get:function(){return this.isValid?this.values.milliseconds||0:NaN}},{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),e}(),ct="Invalid Interval";function lt(e,n){return e&&e.isValid?n&&n.isValid?n<e?ft.invalid("end before start","The end of an interval must be after its start, but you had start="+e.toISO()+" and end="+n.toISO()):null:ft.invalid("missing or invalid end"):ft.invalid("missing or invalid start")}var ft=function(){function e(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the Interval is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Xe.throwOnInvalid)throw new v(r);return new e({invalid:r})},e.fromDateTimes=function(n,t){var r=fr(n),i=fr(t),o=lt(r,i);return null==o?new e({start:r,end:i}):o},e.after=function(n,t){var r=st.fromDurationLike(t),i=fr(n);return e.fromDateTimes(i,i.plus(r))},e.before=function(n,t){var r=st.fromDurationLike(t),i=fr(n);return e.fromDateTimes(i.minus(r),i)},e.fromISO=function(n,t){var r=(n||"").split("/",2),i=r[0],o=r[1];if(i&&o){var a,u,s,c;try{u=(a=lr.fromISO(i,t)).isValid}catch(o){u=!1}try{c=(s=lr.fromISO(o,t)).isValid}catch(o){c=!1}if(u&&c)return e.fromDateTimes(a,s);if(u){var l=st.fromISO(o,t);if(l.isValid)return e.after(a,l)}else if(c){var f=st.fromISO(i,t);if(f.isValid)return e.before(s,f)}}return e.invalid("unparsable",'the input "'+n+"\" can't be parsed as ISO 8601")},e.isInterval=function(e){return e&&e.isLuxonInterval||!1};var n=e.prototype;return n.length=function(e){return void 0===e&&(e="milliseconds"),this.isValid?this.toDuration.apply(this,[e]).get(e):NaN},n.count=function(e){if(void 0===e&&(e="milliseconds"),!this.isValid)return NaN;var n=this.start.startOf(e),t=this.end.startOf(e);return Math.floor(t.diff(n,e).get(e))+1},n.hasSame=function(e){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,e))},n.isEmpty=function(){return this.s.valueOf()===this.e.valueOf()},n.isAfter=function(e){return!!this.isValid&&this.s>e},n.isBefore=function(e){return!!this.isValid&&this.e<=e},n.contains=function(e){return!!this.isValid&&this.s<=e&&this.e>e},n.set=function(n){var t=void 0===n?{}:n,r=t.start,i=t.end;return this.isValid?e.fromDateTimes(r||this.s,i||this.e):this},n.splitAt=function(){var n=this;if(!this.isValid)return[];for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];for(var o=r.map(fr).filter((function(e){return n.contains(e)})).sort(),a=[],u=this.s,s=0;u<this.e;){var c=o[s]||this.e,l=+c>+this.e?this.e:c;a.push(e.fromDateTimes(u,l)),u=l,s+=1}return a},n.splitBy=function(n){var t=st.fromDurationLike(n);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];for(var r,i=this.s,o=1,a=[];i<this.e;){var u=this.start.plus(t.mapUnits((function(e){return e*o})));r=+u>+this.e?this.e:u,a.push(e.fromDateTimes(i,r)),i=r,o+=1}return a},n.divideEqually=function(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]},n.overlaps=function(e){return this.e>e.s&&this.s<e.e},n.abutsStart=function(e){return!!this.isValid&&+this.e==+e.s},n.abutsEnd=function(e){return!!this.isValid&&+e.e==+this.s},n.engulfs=function(e){return!!this.isValid&&this.s<=e.s&&this.e>=e.e},n.equals=function(e){return!(!this.isValid||!e.isValid)&&this.s.equals(e.s)&&this.e.equals(e.e)},n.intersection=function(n){if(!this.isValid)return this;var t=this.s>n.s?this.s:n.s,r=this.e<n.e?this.e:n.e;return t>=r?null:e.fromDateTimes(t,r)},n.union=function(n){if(!this.isValid)return this;var t=this.s<n.s?this.s:n.s,r=this.e>n.e?this.e:n.e;return e.fromDateTimes(t,r)},e.merge=function(e){var n=e.sort((function(e,n){return e.s-n.s})).reduce((function(e,n){var t=e[0],r=e[1];return r?r.overlaps(n)||r.abutsStart(n)?[t,r.union(n)]:[t.concat([r]),n]:[t,n]}),[[],null]),t=n[0],r=n[1];return r&&t.push(r),t},e.xor=function(n){for(var t,r,i=null,o=0,a=[],u=n.map((function(e){return[{time:e.s,type:"s"},{time:e.e,type:"e"}]})),s=h((t=Array.prototype).concat.apply(t,u).sort((function(e,n){return e.time-n.time})));!(r=s()).done;){var c=r.value;1===(o+="s"===c.type?1:-1)?i=c.time:(i&&+i!=+c.time&&a.push(e.fromDateTimes(i,c.time)),i=null)}return e.merge(a)},n.difference=function(){for(var n=this,t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];return e.xor([this].concat(r)).map((function(e){return n.intersection(e)})).filter((function(e){return e&&!e.isEmpty()}))},n.toString=function(){return this.isValid?"["+this.s.toISO()+" – "+this.e.toISO()+")":ct},n.toISO=function(e){return this.isValid?this.s.toISO(e)+"/"+this.e.toISO(e):ct},n.toISODate=function(){return this.isValid?this.s.toISODate()+"/"+this.e.toISODate():ct},n.toISOTime=function(e){return this.isValid?this.s.toISOTime(e)+"/"+this.e.toISOTime(e):ct},n.toFormat=function(e,n){var t=(void 0===n?{}:n).separator,r=void 0===t?" – ":t;return this.isValid?""+this.s.toFormat(e)+r+this.e.toFormat(e):ct},n.toDuration=function(e,n){return this.isValid?this.e.diff(this.s,e,n):st.invalid(this.invalidReason)},n.mapEndpoints=function(n){return e.fromDateTimes(n(this.s),n(this.e))},r(e,[{key:"start",get:function(){return this.isValid?this.s:null}},{key:"end",get:function(){return this.isValid?this.e:null}},{key:"isValid",get:function(){return null===this.invalidReason}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),e}(),dt=function(){function e(){}return e.hasDST=function(e){void 0===e&&(e=Xe.defaultZone);var n=lr.now().setZone(e).set({month:12});return!e.isUniversal&&n.offset!==n.set({month:6}).offset},e.isValidIANAZone=function(e){return _e.isValidZone(e)},e.normalizeZone=function(e){return Pe(e,Xe.defaultZone)},e.months=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,u=t.locObj,s=void 0===u?null:u,c=t.outputCalendar,l=void 0===c?"gregory":c;return(s||dn.create(i,a,l)).months(e)},e.monthsFormat=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,u=t.locObj,s=void 0===u?null:u,c=t.outputCalendar,l=void 0===c?"gregory":c;return(s||dn.create(i,a,l)).months(e,!0)},e.weekdays=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,u=t.locObj;return((void 0===u?null:u)||dn.create(i,a,null)).weekdays(e)},e.weekdaysFormat=function(e,n){void 0===e&&(e="long");var t=void 0===n?{}:n,r=t.locale,i=void 0===r?null:r,o=t.numberingSystem,a=void 0===o?null:o,u=t.locObj;return((void 0===u?null:u)||dn.create(i,a,null)).weekdays(e,!0)},e.meridiems=function(e){var n=(void 0===e?{}:e).locale,t=void 0===n?null:n;return dn.create(t).meridiems()},e.eras=function(e,n){void 0===e&&(e="short");var t=(void 0===n?{}:n).locale,r=void 0===t?null:t;return dn.create(r,null,"gregory").eras(e)},e.features=function(){return{relative:$()}},e}();function ht(e,n){var t=function(e){return e.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf()},r=t(n)-t(e);return Math.floor(st.fromMillis(r).as("days"))}var mt={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},yt={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},vt=mt.hanidec.replace(/[\[|\]]/g,"").split("");function pt(e,n){var t=e.numberingSystem;return void 0===n&&(n=""),new RegExp(""+mt[t||"latn"]+n)}function gt(e,n){return void 0===n&&(n=function(e){return e}),{regex:e,deser:function(e){var t=e[0];return n(function(e){var n=parseInt(e,10);if(isNaN(n)){n="";for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(-1!==e[t].search(mt.hanidec))n+=vt.indexOf(e[t]);else for(var i in yt){var o=yt[i],a=o[0],u=o[1];r>=a&&r<=u&&(n+=r-a)}}return parseInt(n,10)}return n}(t))}}}var At="( |"+String.fromCharCode(160)+")",wt=new RegExp(At,"g");function kt(e){return e.replace(/\./g,"\\.?").replace(wt,At)}function bt(e){return e.replace(/\./g,"").replace(wt," ").toLowerCase()}function St(e,n){return null===e?null:{regex:RegExp(e.map(kt).join("|")),deser:function(t){var r=t[0];return e.findIndex((function(e){return bt(r)===bt(e)}))+n}}}function Tt(e,n){return{regex:e,deser:function(e){return de(e[1],e[2])},groups:n}}function Ct(e){return{regex:e,deser:function(e){return e[0]}}}var It={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"}},Ot=null;function Mt(e,n,t){var r=function(e,n){var t;return(t=Array.prototype).concat.apply(t,e.map((function(e){return function(e,n){if(e.literal)return e;var t=De.macroTokenToFormatOpts(e.val);if(!t)return e;var r=De.create(n,t).formatDateTimeParts((Ot||(Ot=lr.fromMillis(1555555555555)),Ot)).map((function(e){return function(e,n,t){var r=e.type,i=e.value;if("literal"===r)return{literal:!0,val:i};var o=t[r],a=It[r];return"object"==typeof a&&(a=a[o]),a?{literal:!1,val:a}:void 0}(e,0,t)}));return r.includes(void 0)?e:r}(e,n)})))}(De.parseFormat(t),e),i=r.map((function(n){return t=n,i=pt(r=e),o=pt(r,"{2}"),a=pt(r,"{3}"),u=pt(r,"{4}"),s=pt(r,"{6}"),c=pt(r,"{1,2}"),l=pt(r,"{1,3}"),f=pt(r,"{1,6}"),d=pt(r,"{1,9}"),h=pt(r,"{2,4}"),m=pt(r,"{4,6}"),y=function(e){return{regex:RegExp((n=e.val,n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:function(e){return e[0]},literal:!0};var n},v=function(e){if(t.literal)return y(e);switch(e.val){case"G":return St(r.eras("short",!1),0);case"GG":return St(r.eras("long",!1),0);case"y":return gt(f);case"yy":case"kk":return gt(h,le);case"yyyy":case"kkkk":return gt(u);case"yyyyy":return gt(m);case"yyyyyy":return gt(s);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return gt(c);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return gt(o);case"MMM":return St(r.months("short",!0,!1),1);case"MMMM":return St(r.months("long",!0,!1),1);case"LLL":return St(r.months("short",!1,!1),1);case"LLLL":return St(r.months("long",!1,!1),1);case"o":case"S":return gt(l);case"ooo":case"SSS":return gt(a);case"u":return Ct(d);case"uu":return Ct(c);case"uuu":case"E":case"c":return gt(i);case"a":return St(r.meridiems(),0);case"EEE":return St(r.weekdays("short",!1,!1),1);case"EEEE":return St(r.weekdays("long",!1,!1),1);case"ccc":return St(r.weekdays("short",!0,!1),1);case"cccc":return St(r.weekdays("long",!0,!1),1);case"Z":case"ZZ":return Tt(new RegExp("([+-]"+c.source+")(?::("+o.source+"))?"),2);case"ZZZ":return Tt(new RegExp("([+-]"+c.source+")("+o.source+")?"),2);case"z":return Ct(/[a-z_+-/]{1,256}?/i);default:return y(e)}}(t)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"},v.token=t,v;var t,r,i,o,a,u,s,c,l,f,d,h,m,y,v})),o=i.find((function(e){return e.invalidReason}));if(o)return{input:n,tokens:r,invalidReason:o.invalidReason};var a=function(e){return["^"+e.map((function(e){return e.regex})).reduce((function(e,n){return e+"("+n.source+")"}),"")+"$",e]}(i),u=a[0],s=a[1],c=RegExp(u,"i"),l=function(e,n,t){var r=e.match(n);if(r){var i={},o=1;for(var a in t)if(X(t,a)){var u=t[a],s=u.groups?u.groups+1:1;!u.literal&&u.token&&(i[u.token.val[0]]=u.deser(r.slice(o,o+s))),o+=s}return[r,i]}return[r,{}]}(n,c,s),f=l[0],d=l[1],h=d?function(e){var n,t=null;return W(e.z)||(t=_e.create(e.z)),W(e.Z)||(t||(t=new He(e.Z)),n=e.Z),W(e.q)||(e.M=3*(e.q-1)+1),W(e.h)||(e.h<12&&1===e.a?e.h+=12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),W(e.u)||(e.S=re(e.u)),[Object.keys(e).reduce((function(n,t){var r=function(e){switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}}(t);return r&&(n[r]=e[t]),n}),{}),t,n]}(d):[null,null,void 0],m=h[0],y=h[1],v=h[2];if(X(d,"a")&&X(d,"H"))throw new g("Can't include meridiem when specifying 24-hour format");return{input:n,tokens:r,regex:c,rawMatches:f,matches:d,result:m,zone:y,specificOffset:v}}var Nt=[0,31,59,90,120,151,181,212,243,273,304,334],xt=[0,31,60,91,121,152,182,213,244,274,305,335];function Et(e,n){return new Ve("unit out of range","you specified "+n+" (of type "+typeof n+") as a "+e+", which is invalid")}function Bt(e,n,t){var r=new Date(Date.UTC(e,n-1,t)).getUTCDay();return 0===r?7:r}function Dt(e,n,t){return t+(oe(e)?xt:Nt)[n-1]}function Vt(e,n){var t=oe(e)?xt:Nt,r=t.findIndex((function(e){return e<n}));return{month:r+1,day:n-t[r]}}function Lt(e){var n,t=e.year,r=e.month,o=e.day,a=Dt(t,r,o),u=Bt(t,r,o),s=Math.floor((a-u+10)/7);return s<1?s=ce(n=t-1):s>ce(t)?(n=t+1,s=1):n=t,i({weekYear:n,weekNumber:s,weekday:u},ve(e))}function Ft(e){var n,t=e.weekYear,r=e.weekNumber,o=e.weekday,a=Bt(t,1,4),u=ae(t),s=7*r+o-a-3;s<1?s+=ae(n=t-1):s>u?(n=t+1,s-=ae(t)):n=t;var c=Vt(n,s);return i({year:n,month:c.month,day:c.day},ve(e))}function zt(e){var n=e.year;return i({year:n,ordinal:Dt(n,e.month,e.day)},ve(e))}function qt(e){var n=e.year,t=Vt(n,e.ordinal);return i({year:n,month:t.month,day:t.day},ve(e))}function Zt(e){var n=G(e.year),t=K(e.month,1,12),r=K(e.day,1,ue(e.year,e.month));return n?t?!r&&Et("day",e.day):Et("month",e.month):Et("year",e.year)}function jt(e){var n=e.hour,t=e.minute,r=e.second,i=e.millisecond,o=K(n,0,23)||24===n&&0===t&&0===r&&0===i,a=K(t,0,59),u=K(r,0,59),s=K(i,0,999);return o?a?u?!s&&Et("millisecond",i):Et("second",r):Et("minute",t):Et("hour",n)}var _t="Invalid DateTime",Ut=864e13;function Ht(e){return new Ve("unsupported zone",'the zone "'+e.name+'" is not supported')}function Rt(e){return null===e.weekData&&(e.weekData=Lt(e.c)),e.weekData}function Pt(e,n){var t={ts:e.ts,zone:e.zone,c:e.c,o:e.o,loc:e.loc,invalid:e.invalid};return new lr(i({},t,n,{old:t}))}function Yt(e,n,t){var r=e-60*n*1e3,i=t.offset(r);if(n===i)return[r,n];r-=60*(i-n)*1e3;var o=t.offset(r);return i===o?[r,i]:[e-60*Math.min(i,o)*1e3,Math.max(i,o)]}function Wt(e,n){var t=new Date(e+=60*n*1e3);return{year:t.getUTCFullYear(),month:t.getUTCMonth()+1,day:t.getUTCDate(),hour:t.getUTCHours(),minute:t.getUTCMinutes(),second:t.getUTCSeconds(),millisecond:t.getUTCMilliseconds()}}function Jt(e,n,t){return Yt(se(e),n,t)}function Gt(e,n){var t=e.o,r=e.c.year+Math.trunc(n.years),o=e.c.month+Math.trunc(n.months)+3*Math.trunc(n.quarters),a=i({},e.c,{year:r,month:o,day:Math.min(e.c.day,ue(r,o))+Math.trunc(n.days)+7*Math.trunc(n.weeks)}),u=st.fromObject({years:n.years-Math.trunc(n.years),quarters:n.quarters-Math.trunc(n.quarters),months:n.months-Math.trunc(n.months),weeks:n.weeks-Math.trunc(n.weeks),days:n.days-Math.trunc(n.days),hours:n.hours,minutes:n.minutes,seconds:n.seconds,milliseconds:n.milliseconds}).as("milliseconds"),s=Yt(se(a),t,e.zone),c=s[0],l=s[1];return 0!==u&&(c+=u,l=e.zone.offset(c)),{ts:c,o:l}}function $t(e,n,t,r,o,a){var u=t.setZone,s=t.zone;if(e&&0!==Object.keys(e).length){var c=n||s,l=lr.fromObject(e,i({},t,{zone:c,specificOffset:a}));return u?l:l.setZone(s)}return lr.invalid(new Ve("unparsable",'the input "'+o+"\" can't be parsed as "+r))}function Qt(e,n,t){return void 0===t&&(t=!0),e.isValid?De.create(dn.create("en-US"),{allowZ:t,forceSimple:!0}).formatDateTimeFromString(e,n):null}function Xt(e,n){var t=e.c.year>9999||e.c.year<0,r="";return t&&e.c.year>=0&&(r+="+"),r+=ee(e.c.year,t?6:4),n?(r+="-",r+=ee(e.c.month),r+="-",r+=ee(e.c.day)):(r+=ee(e.c.month),r+=ee(e.c.day)),r}function Kt(e,n,t,r,i){var o=ee(e.c.hour);return n?(o+=":",o+=ee(e.c.minute),0===e.c.second&&t||(o+=":")):o+=ee(e.c.minute),0===e.c.second&&t||(o+=ee(e.c.second),0===e.c.millisecond&&r||(o+=".",o+=ee(e.c.millisecond,3))),i&&(e.isOffsetFixed&&0===e.offset?o+="Z":e.o<0?(o+="-",o+=ee(Math.trunc(-e.o/60)),o+=":",o+=ee(Math.trunc(-e.o%60))):(o+="+",o+=ee(Math.trunc(e.o/60)),o+=":",o+=ee(Math.trunc(e.o%60)))),o}var er={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},nr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},tr={ordinal:1,hour:0,minute:0,second:0,millisecond:0},rr=["year","month","day","hour","minute","second","millisecond"],ir=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],or=["year","ordinal","hour","minute","second","millisecond"];function ar(e){var n={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[e.toLowerCase()];if(!n)throw new A(e);return n}function ur(e,n){var t,r,i=Pe(n.zone,Xe.defaultZone),o=dn.fromObject(n),a=Xe.now();if(W(e.year))t=a;else{for(var u,s=h(rr);!(u=s()).done;){var c=u.value;W(e[c])&&(e[c]=er[c])}var l=Zt(e)||jt(e);if(l)return lr.invalid(l);var f=Jt(e,i.offset(a),i);t=f[0],r=f[1]}return new lr({ts:t,zone:i,loc:o,o:r})}function sr(e,n,t){var r=!!W(t.round)||t.round,i=function(e,i){return e=ie(e,r||t.calendary?0:2,!0),n.loc.clone(t).relFormatter(t).format(e,i)},o=function(r){return t.calendary?n.hasSame(e,r)?0:n.startOf(r).diff(e.startOf(r),r).get(r):n.diff(e,r).get(r)};if(t.unit)return i(o(t.unit),t.unit);for(var a,u=h(t.units);!(a=u()).done;){var s=a.value,c=o(s);if(Math.abs(c)>=1)return i(c,s)}return i(e>n?-0:0,t.units[t.units.length-1])}function cr(e){var n,t={};return e.length>0&&"object"==typeof e[e.length-1]?(t=e[e.length-1],n=Array.from(e).slice(0,e.length-1)):n=Array.from(e),[t,n]}var lr=function(){function e(e){var n=e.zone||Xe.defaultZone,t=e.invalid||(Number.isNaN(e.ts)?new Ve("invalid input"):null)||(n.isValid?null:Ht(n));this.ts=W(e.ts)?Xe.now():e.ts;var r=null,i=null;if(!t)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(n)){var o=[e.old.c,e.old.o];r=o[0],i=o[1]}else{var a=n.offset(this.ts);r=Wt(this.ts,a),r=(t=Number.isNaN(r.year)?new Ve("invalid input"):null)?null:r,i=t?null:a}this._zone=n,this.loc=e.loc||dn.create(),this.invalid=t,this.weekData=null,this.c=r,this.o=i,this.isLuxonDateTime=!0}e.now=function(){return new e({})},e.local=function(){var e=cr(arguments),n=e[0],t=e[1],r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],s=t[5],c=t[6];return ur({year:r,month:i,day:o,hour:a,minute:u,second:s,millisecond:c},n)},e.utc=function(){var e=cr(arguments),n=e[0],t=e[1],r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],s=t[5],c=t[6];return n.zone=He.utcInstance,ur({year:r,month:i,day:o,hour:a,minute:u,second:s,millisecond:c},n)},e.fromJSDate=function(n,t){void 0===t&&(t={});var r,i=(r=n,"[object Date]"===Object.prototype.toString.call(r)?n.valueOf():NaN);if(Number.isNaN(i))return e.invalid("invalid input");var o=Pe(t.zone,Xe.defaultZone);return o.isValid?new e({ts:i,zone:o,loc:dn.fromObject(t)}):e.invalid(Ht(o))},e.fromMillis=function(n,t){if(void 0===t&&(t={}),J(n))return n<-Ut||n>Ut?e.invalid("Timestamp out of range"):new e({ts:n,zone:Pe(t.zone,Xe.defaultZone),loc:dn.fromObject(t)});throw new w("fromMillis requires a numerical input, but received a "+typeof n+" with value "+n)},e.fromSeconds=function(n,t){if(void 0===t&&(t={}),J(n))return new e({ts:1e3*n,zone:Pe(t.zone,Xe.defaultZone),loc:dn.fromObject(t)});throw new w("fromSeconds requires a numerical input")},e.fromObject=function(n,t){void 0===t&&(t={}),n=n||{};var r=Pe(t.zone,Xe.defaultZone);if(!r.isValid)return e.invalid(Ht(r));var i=Xe.now(),o=W(t.specificOffset)?r.offset(i):t.specificOffset,a=me(n,ar),u=!W(a.ordinal),s=!W(a.year),c=!W(a.month)||!W(a.day),l=s||c,f=a.weekYear||a.weekNumber,d=dn.fromObject(t);if((l||u)&&f)throw new g("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(c&&u)throw new g("Can't mix ordinal dates with month/day");var m,y,v=f||a.weekday&&!l,p=Wt(i,o);v?(m=ir,y=nr,p=Lt(p)):u?(m=or,y=tr,p=zt(p)):(m=rr,y=er);for(var A,w=!1,k=h(m);!(A=k()).done;){var b=A.value;W(a[b])?a[b]=w?y[b]:p[b]:w=!0}var S=v?function(e){var n=G(e.weekYear),t=K(e.weekNumber,1,ce(e.weekYear)),r=K(e.weekday,1,7);return n?t?!r&&Et("weekday",e.weekday):Et("week",e.week):Et("weekYear",e.weekYear)}(a):u?function(e){var n=G(e.year),t=K(e.ordinal,1,ae(e.year));return n?!t&&Et("ordinal",e.ordinal):Et("year",e.year)}(a):Zt(a),T=S||jt(a);if(T)return e.invalid(T);var C=Jt(v?Ft(a):u?qt(a):a,o,r),I=new e({ts:C[0],zone:r,o:C[1],loc:d});return a.weekday&&l&&n.weekday!==I.weekday?e.invalid("mismatched weekday","you can't specify both a weekday of "+a.weekday+" and a date of "+I.toISO()):I},e.fromISO=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[Un,Yn],[Hn,Wn],[Rn,Jn],[Pn,Gn])}(e);return $t(t[0],t[1],n,"ISO 8601",e)},e.fromRFC2822=function(e,n){void 0===n&&(n={});var t=function(e){return yn(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e),[Ln,Fn])}(e);return $t(t[0],t[1],n,"RFC 2822",e)},e.fromHTTP=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[zn,jn],[qn,jn],[Zn,_n])}(e);return $t(t[0],t[1],n,"HTTP",n)},e.fromFormat=function(n,t,r){if(void 0===r&&(r={}),W(n)||W(t))throw new w("fromFormat requires an input string and a format");var i=r,o=i.locale,a=void 0===o?null:o,u=i.numberingSystem,s=void 0===u?null:u,c=function(e,n,t){var r=Mt(e,n,t);return[r.result,r.zone,r.specificOffset,r.invalidReason]}(dn.fromOpts({locale:a,numberingSystem:s,defaultToEN:!0}),n,t),l=c[0],f=c[1],d=c[2],h=c[3];return h?e.invalid(h):$t(l,f,r,"format "+t,n,d)},e.fromString=function(n,t,r){return void 0===r&&(r={}),e.fromFormat(n,t,r)},e.fromSQL=function(e,n){void 0===n&&(n={});var t=function(e){return yn(e,[Qn,Kn],[Xn,et])}(e);return $t(t[0],t[1],n,"SQL",e)},e.invalid=function(n,t){if(void 0===t&&(t=null),!n)throw new w("need to specify a reason the DateTime is invalid");var r=n instanceof Ve?n:new Ve(n,t);if(Xe.throwOnInvalid)throw new y(r);return new e({invalid:r})},e.isDateTime=function(e){return e&&e.isLuxonDateTime||!1};var n=e.prototype;return n.get=function(e){return this[e]},n.resolvedLocaleOptions=function(e){void 0===e&&(e={});var n=De.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:n.locale,numberingSystem:n.numberingSystem,outputCalendar:n.calendar}},n.toUTC=function(e,n){return void 0===e&&(e=0),void 0===n&&(n={}),this.setZone(He.instance(e),n)},n.toLocal=function(){return this.setZone(Xe.defaultZone)},n.setZone=function(n,t){var r=void 0===t?{}:t,i=r.keepLocalTime,o=void 0!==i&&i,a=r.keepCalendarTime,u=void 0!==a&&a;if((n=Pe(n,Xe.defaultZone)).equals(this.zone))return this;if(n.isValid){var s=this.ts;if(o||u){var c=n.offset(this.ts);s=Jt(this.toObject(),c,n)[0]}return Pt(this,{ts:s,zone:n})}return e.invalid(Ht(n))},n.reconfigure=function(e){var n=void 0===e?{}:e,t=n.locale,r=n.numberingSystem,i=n.outputCalendar;return Pt(this,{loc:this.loc.clone({locale:t,numberingSystem:r,outputCalendar:i})})},n.setLocale=function(e){return this.reconfigure({locale:e})},n.set=function(e){if(!this.isValid)return this;var n,t=me(e,ar),r=!W(t.weekYear)||!W(t.weekNumber)||!W(t.weekday),o=!W(t.ordinal),a=!W(t.year),u=!W(t.month)||!W(t.day),s=a||u,c=t.weekYear||t.weekNumber;if((s||o)&&c)throw new g("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(u&&o)throw new g("Can't mix ordinal dates with month/day");r?n=Ft(i({},Lt(this.c),t)):W(t.ordinal)?(n=i({},this.toObject(),t),W(t.day)&&(n.day=Math.min(ue(n.year,n.month),n.day))):n=qt(i({},zt(this.c),t));var l=Jt(n,this.o,this.zone);return Pt(this,{ts:l[0],o:l[1]})},n.plus=function(e){return this.isValid?Pt(this,Gt(this,st.fromDurationLike(e))):this},n.minus=function(e){return this.isValid?Pt(this,Gt(this,st.fromDurationLike(e).negate())):this},n.startOf=function(e){if(!this.isValid)return this;var n={},t=st.normalizeUnit(e);switch(t){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0}if("weeks"===t&&(n.weekday=1),"quarters"===t){var r=Math.ceil(this.month/3);n.month=3*(r-1)+1}return this.set(n)},n.endOf=function(e){var n;return this.isValid?this.plus((n={},n[e]=1,n)).startOf(e).minus(1):this},n.toFormat=function(e,n){return void 0===n&&(n={}),this.isValid?De.create(this.loc.redefaultToEN(n)).formatDateTimeFromString(this,e):_t},n.toLocaleString=function(e,n){return void 0===e&&(e=C),void 0===n&&(n={}),this.isValid?De.create(this.loc.clone(n),e).formatDateTime(this):_t},n.toLocaleParts=function(e){return void 0===e&&(e={}),this.isValid?De.create(this.loc.clone(e),e).formatDateTimeParts(this):[]},n.toISO=function(e){var n=void 0===e?{}:e,t=n.format,r=void 0===t?"extended":t,i=n.suppressSeconds,o=void 0!==i&&i,a=n.suppressMilliseconds,u=void 0!==a&&a,s=n.includeOffset,c=void 0===s||s;if(!this.isValid)return null;var l="extended"===r,f=Xt(this,l);return(f+="T")+Kt(this,l,o,u,c)},n.toISODate=function(e){var n=(void 0===e?{}:e).format,t=void 0===n?"extended":n;return this.isValid?Xt(this,"extended"===t):null},n.toISOWeekDate=function(){return Qt(this,"kkkk-'W'WW-c")},n.toISOTime=function(e){var n=void 0===e?{}:e,t=n.suppressMilliseconds,r=void 0!==t&&t,i=n.suppressSeconds,o=void 0!==i&&i,a=n.includeOffset,u=void 0===a||a,s=n.includePrefix,c=void 0!==s&&s,l=n.format,f=void 0===l?"extended":l;return this.isValid?(c?"T":"")+Kt(this,"extended"===f,o,r,u):null},n.toRFC2822=function(){return Qt(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)},n.toHTTP=function(){return Qt(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")},n.toSQLDate=function(){return this.isValid?Xt(this,!0):null},n.toSQLTime=function(e){var n=void 0===e?{}:e,t=n.includeOffset,r=void 0===t||t,i=n.includeZone,o=void 0!==i&&i,a=n.includeOffsetSpace,u="HH:mm:ss.SSS";return(o||r)&&((void 0===a||a)&&(u+=" "),o?u+="z":r&&(u+="ZZ")),Qt(this,u,!0)},n.toSQL=function(e){return void 0===e&&(e={}),this.isValid?this.toSQLDate()+" "+this.toSQLTime(e):null},n.toString=function(){return this.isValid?this.toISO():_t},n.valueOf=function(){return this.toMillis()},n.toMillis=function(){return this.isValid?this.ts:NaN},n.toSeconds=function(){return this.isValid?this.ts/1e3:NaN},n.toUnixInteger=function(){return this.isValid?Math.floor(this.ts/1e3):NaN},n.toJSON=function(){return this.toISO()},n.toBSON=function(){return this.toJSDate()},n.toObject=function(e){if(void 0===e&&(e={}),!this.isValid)return{};var n=i({},this.c);return e.includeConfig&&(n.outputCalendar=this.outputCalendar,n.numberingSystem=this.loc.numberingSystem,n.locale=this.loc.locale),n},n.toJSDate=function(){return new Date(this.isValid?this.ts:NaN)},n.diff=function(e,n,t){if(void 0===n&&(n="milliseconds"),void 0===t&&(t={}),!this.isValid||!e.isValid)return st.invalid("created by diffing an invalid DateTime");var r,o=i({locale:this.locale,numberingSystem:this.numberingSystem},t),a=(r=n,Array.isArray(r)?r:[r]).map(st.normalizeUnit),u=e.valueOf()>this.valueOf(),s=function(e,n,t,r){var i,o=function(e,n,t){for(var r,i,o={},a=0,u=[["years",function(e,n){return n.year-e.year}],["quarters",function(e,n){return n.quarter-e.quarter}],["months",function(e,n){return n.month-e.month+12*(n.year-e.year)}],["weeks",function(e,n){var t=ht(e,n);return(t-t%7)/7}],["days",ht]];a<u.length;a++){var s=u[a],c=s[0],l=s[1];if(t.indexOf(c)>=0){var f;r=c;var d,h=l(e,n);(i=e.plus(((f={})[c]=h,f)))>n?(e=e.plus(((d={})[c]=h-1,d)),h-=1):e=i,o[c]=h}}return[e,o,i,r]}(e,n,t),a=o[0],u=o[1],s=o[2],c=o[3],l=n-a,f=t.filter((function(e){return["hours","minutes","seconds","milliseconds"].indexOf(e)>=0}));0===f.length&&(s<n&&(s=a.plus(((i={})[c]=1,i))),s!==a&&(u[c]=(u[c]||0)+l/(s-a)));var d,h=st.fromObject(u,r);return f.length>0?(d=st.fromMillis(l,r)).shiftTo.apply(d,f).plus(h):h}(u?this:e,u?e:this,a,o);return u?s.negate():s},n.diffNow=function(n,t){return void 0===n&&(n="milliseconds"),void 0===t&&(t={}),this.diff(e.now(),n,t)},n.until=function(e){return this.isValid?ft.fromDateTimes(this,e):this},n.hasSame=function(e,n){if(!this.isValid)return!1;var t=e.valueOf(),r=this.setZone(e.zone,{keepLocalTime:!0});return r.startOf(n)<=t&&t<=r.endOf(n)},n.equals=function(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)},n.toRelative=function(n){if(void 0===n&&(n={}),!this.isValid)return null;var t=n.base||e.fromObject({},{zone:this.zone}),r=n.padding?this<t?-n.padding:n.padding:0,o=["years","months","days","hours","minutes","seconds"],a=n.unit;return Array.isArray(n.unit)&&(o=n.unit,a=void 0),sr(t,this.plus(r),i({},n,{numeric:"always",units:o,unit:a}))},n.toRelativeCalendar=function(n){return void 0===n&&(n={}),this.isValid?sr(n.base||e.fromObject({},{zone:this.zone}),this,i({},n,{numeric:"auto",units:["years","months","days"],calendary:!0})):null},e.min=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!t.every(e.isDateTime))throw new w("min requires all arguments be DateTimes");return Q(t,(function(e){return e.valueOf()}),Math.min)},e.max=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];if(!t.every(e.isDateTime))throw new w("max requires all arguments be DateTimes");return Q(t,(function(e){return e.valueOf()}),Math.max)},e.fromFormatExplain=function(e,n,t){void 0===t&&(t={});var r=t,i=r.locale,o=void 0===i?null:i,a=r.numberingSystem,u=void 0===a?null:a;return Mt(dn.fromOpts({locale:o,numberingSystem:u,defaultToEN:!0}),e,n)},e.fromStringExplain=function(n,t,r){return void 0===r&&(r={}),e.fromFormatExplain(n,t,r)},r(e,[{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}},{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"outputCalendar",get:function(){return this.isValid?this.loc.outputCalendar:null}},{key:"zone",get:function(){return this._zone}},{key:"zoneName",get:function(){return this.isValid?this.zone.name:null}},{key:"year",get:function(){return this.isValid?this.c.year:NaN}},{key:"quarter",get:function(){return this.isValid?Math.ceil(this.c.month/3):NaN}},{key:"month",get:function(){return this.isValid?this.c.month:NaN}},{key:"day",get:function(){return this.isValid?this.c.day:NaN}},{key:"hour",get:function(){return this.isValid?this.c.hour:NaN}},{key:"minute",get:function(){return this.isValid?this.c.minute:NaN}},{key:"second",get:function(){return this.isValid?this.c.second:NaN}},{key:"millisecond",get:function(){return this.isValid?this.c.millisecond:NaN}},{key:"weekYear",get:function(){return this.isValid?Rt(this).weekYear:NaN}},{key:"weekNumber",get:function(){return this.isValid?Rt(this).weekNumber:NaN}},{key:"weekday",get:function(){return this.isValid?Rt(this).weekday:NaN}},{key:"ordinal",get:function(){return this.isValid?zt(this.c).ordinal:NaN}},{key:"monthShort",get:function(){return this.isValid?dt.months("short",{locObj:this.loc})[this.month-1]:null}},{key:"monthLong",get:function(){return this.isValid?dt.months("long",{locObj:this.loc})[this.month-1]:null}},{key:"weekdayShort",get:function(){return this.isValid?dt.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}},{key:"weekdayLong",get:function(){return this.isValid?dt.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}},{key:"offset",get:function(){return this.isValid?+this.o:NaN}},{key:"offsetNameShort",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}},{key:"offsetNameLong",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}},{key:"isOffsetFixed",get:function(){return this.isValid?this.zone.isUniversal:null}},{key:"isInDST",get:function(){return!this.isOffsetFixed&&(this.offset>this.set({month:1}).offset||this.offset>this.set({month:5}).offset)}},{key:"isInLeapYear",get:function(){return oe(this.year)}},{key:"daysInMonth",get:function(){return ue(this.year,this.month)}},{key:"daysInYear",get:function(){return this.isValid?ae(this.year):NaN}},{key:"weeksInWeekYear",get:function(){return this.isValid?ce(this.weekYear):NaN}}],[{key:"DATE_SHORT",get:function(){return C}},{key:"DATE_MED",get:function(){return I}},{key:"DATE_MED_WITH_WEEKDAY",get:function(){return O}},{key:"DATE_FULL",get:function(){return M}},{key:"DATE_HUGE",get:function(){return N}},{key:"TIME_SIMPLE",get:function(){return x}},{key:"TIME_WITH_SECONDS",get:function(){return E}},{key:"TIME_WITH_SHORT_OFFSET",get:function(){return B}},{key:"TIME_WITH_LONG_OFFSET",get:function(){return D}},{key:"TIME_24_SIMPLE",get:function(){return V}},{key:"TIME_24_WITH_SECONDS",get:function(){return L}},{key:"TIME_24_WITH_SHORT_OFFSET",get:function(){return F}},{key:"TIME_24_WITH_LONG_OFFSET",get:function(){return z}},{key:"DATETIME_SHORT",get:function(){return q}},{key:"DATETIME_SHORT_WITH_SECONDS",get:function(){return Z}},{key:"DATETIME_MED",get:function(){return j}},{key:"DATETIME_MED_WITH_SECONDS",get:function(){return _}},{key:"DATETIME_MED_WITH_WEEKDAY",get:function(){return U}},{key:"DATETIME_FULL",get:function(){return H}},{key:"DATETIME_FULL_WITH_SECONDS",get:function(){return R}},{key:"DATETIME_HUGE",get:function(){return P}},{key:"DATETIME_HUGE_WITH_SECONDS",get:function(){return Y}}]),e}();function fr(e){if(lr.isDateTime(e))return e;if(e&&e.valueOf&&J(e.valueOf()))return lr.fromJSDate(e);if(e&&"object"==typeof e)return lr.fromObject(e);throw new w("Unknown datetime argument: "+e+", of type "+typeof e)}n.ou=lr},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],u=0;u<e.length;u++){var s=e[u],c=r.base?s[0]+r.base:s[0],l=o[c]||0,f="".concat(c," ").concat(l);o[c]=l+1;var d=t(f),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(h);else{var m=i(h,r);r.byIndex=u,n.splice(u,0,{identifier:f,updater:m,references:1})}a.push(f)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var u=t(o[a]);n[u].references--}for(var s=r(e,i),c=0;c<o.length;c++){var l=t(o[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),u=t(565),s=t.n(u),c=t(216),l=t.n(c),f=t(589),d=t.n(f),h=t(426),m={};m.styleTagTransform=d(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),n()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var y=t(490);function v(e,n){let t=e+n;return y.ou.fromSeconds(t).minus({hours:1}).toLocaleString(y.ou.TIME_24_SIMPLE)}function p(e){return Math.trunc(e)}const g=document.querySelector(".submit"),A=document.querySelector("#searchbox");let w;A.addEventListener("input",(()=>{w=A.value.toLowerCase(),A.classList.remove("invalid"),""===w&&A.classList.add("invalid")})),g.addEventListener("click",(e=>{e.preventDefault(),""==w||void 0===w?console.log("no city"):(console.log(w),async function(e){let n=`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&appid=8713dd0c20edf39f938c122b0184f85b`,t=await fetch(n,{mode:"cors"});if(!t.ok)throw new Error(`City ${e} not found`);var r,i;r=await t.json(),document.querySelector("#searchbox").value="",document.querySelector(".city-current").innerHTML=`${r.name}, ${r.sys.country}`,document.querySelector(".time-current").innerHTML=`${v(r.dt,r.timezone)}`,document.querySelector(".sunrise-current").innerHTML=`Sunrise ${v(r.sys.sunrise,r.timezone)}`,document.querySelector(".sunset-current").innerHTML=`Sunset ${v(r.sys.sunset,r.timezone)}`,document.querySelector(".temperature-current").innerHTML=`${p(r.main.temp)}&#176;`,document.querySelector(".weatherid-current").innerHTML=`${i=r.weather[0].description,i.charAt(0).toUpperCase()+i.slice(1)}`,document.querySelector(".weather-highlow").innerHTML=`H: ${p(r.main.temp_max)}&#176; | L: ${p(r.main.temp_min)}&#176;`,document.querySelector(".feelslike-current").innerHTML=`${p(r.main.feels_like)}&#176;`,document.querySelector(".humidity-current").innerHTML=`${r.main.humidity}%`,document.querySelector(".pressure-current").innerHTML=`${r.main.pressure}hPa`,document.querySelector(".wind-current").innerHTML=`${p(r.wind.speed)}m/s`,console.log(r.weather[0].id),console.log(r),function(e){document.body.style.backgroundImage;const n=e.weather[0].id;800==n?console.log("800"):700==n?console.log("else"):console.log("dupa")}(r)}(w))})),console.log("hello")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixRQUFRQyxJQUFJLFFBRVJELFFBQVFDLElBQUksUUFuQnBCMEIsQ0FBaUJycEMsR0NsQlQsQ0FBc0JxbkMsT0FJbENLLFFBQVFDLElBQUksVSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvbHV4b24vYnVpbGQvY2pzLWJyb3dzZXIvbHV4b24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9tb2R1bGVzL3ZpZXcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvbW9kdWxlcy93ZWF0aGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TW9udHNlcnJhdDppdGFsLHdnaHRAMCwxMDA7MCwyMDA7MCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MCw3MDA7MCw4MDA7MCw5MDA7MSwxMDA7MSwyMDA7MSwzMDA7MSw0MDA7MSw1MDA7MSw2MDA7MSw3MDA7MSw4MDA7MSw5MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcXG59XFxuXFxuOnJvb3Qge1xcbiAgICAtLXByaW1hcnk6IHJnYig3NywgNzcsIDc3KTtcXG59XFxuXFxuLm1haW4ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuLmxlZnQtY2xtIHtcXG4gICAgbWFyZ2luOiAxNnB4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG59XFxuXFxuLndlYXRoZXItY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMTZweDtcXG5cXG59XFxuXFxuLndlYXRoZXItbGVmdCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4uYmFyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxuICAgIHdpZHRoOiAxcHg7XFxuICAgIGhlaWdodDogMTYwcHg7XFxufVxcblxcbi5jb250YWluZXItdHJhbnNwYXJlbnQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59ICBcXG5cXG5cXG4uY2l0eS1jdXJyZW50IHtcXG4gICAgbGluZS1oZWlnaHQ6IDEwMCU7XFxuICAgIGZvbnQtc2l6ZTogNHJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbn1cXG5cXG4udGltZS1jdXJyZW50IHtcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbi5zdW5yaXNlLWN1cnJlbnQsIC5zdW5zZXQtY3VycmVudCB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbn1cXG5cXG4uc2VhcmNoLWNvbnRhaW5lciB7XFxuICAgIG1hcmdpbjogMTZweDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbn1cXG5cXG4uc2VhcmNoYm94IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvciA6IHRyYW5zcGFyZW50O1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1wcmltYXJ5KSA7XFxuICAgIGJvcmRlci10b3Atc3R5bGU6IGhpZGRlbjtcXG4gICAgYm9yZGVyLXJpZ2h0LXN0eWxlOiBoaWRkZW47XFxuICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBoaWRkZW47XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG4gICAgXFxufVxcblxcbjo6cGxhY2Vob2xkZXIgeyAvKiBDaHJvbWUsIEZpcmVmb3gsIE9wZXJhLCBTYWZhcmkgMTAuMSsgKi9cXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXdlaWdodDogMzAwO1xcbiAgICBvcGFjaXR5OiAxOyAvKiBGaXJlZm94ICovXFxuICB9XFxuXFxuLnN1Ym1pdCB7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuYnV0dG9uIGkge1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbnRleHRhcmVhOmZvY3VzLCBpbnB1dDpmb2N1c3tcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuKjpmb2N1cyB7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcblxcblxcbi5pbnZhbGlkIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJlZDtcXG59XFxuXFxuXFxuLndlYXRoZXJpZC1jdXJyZW50IHtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSlcXG59XFxuXFxuLndlYXRoZXItaXRlbSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDRweDtcXG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbi50ZW1wZXJhdHVyZS1jdXJyZW50IHtcXG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcXG4gICAgZm9udC1zaXplOiA0LjVyZW07XFxuICAgIGxpbmUtaGVpZ2h0OiA1MCU7XFxuICAgIHBhZGRpbmc6IDhweDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbi53ZWF0aGVyLWhpZ2hsb3cge1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLnRpbWVpbmZvIHtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbiAgICBib3R0b206IDA7XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuXFxuXFxuXFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1YscUNBQXFDO0lBQ3JDLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sT0FBTztBQUNYOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsU0FBUzs7QUFFYjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGdDQUFnQztJQUNoQyxVQUFVO0lBQ1YsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsdUJBQXVCO0FBQzNCOzs7QUFHQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixRQUFRO0FBQ1o7O0FBRUE7SUFDSSw4QkFBOEI7SUFDOUIsZUFBZTtJQUNmLGFBQWE7SUFDYix3Q0FBd0M7SUFDeEMsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQix5QkFBeUI7SUFDekIsa0JBQWtCOztBQUV0Qjs7QUFFQSxnQkFBZ0IseUNBQXlDO0lBQ3JELHFCQUFxQjtJQUNyQixxQ0FBcUM7SUFDckMsZ0JBQWdCO0lBQ2hCLFVBQVUsRUFBRSxZQUFZO0VBQzFCOztBQUVGO0lBQ0ksYUFBYTtJQUNiLFlBQVk7SUFDWiw2QkFBNkI7SUFDN0IsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7QUFDQTtJQUNJLGFBQWE7QUFDakI7OztBQUdBO0lBQ0ksNEJBQTRCO0FBQ2hDOzs7QUFHQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEI7QUFDSjs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULHFCQUFxQjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Nb250c2VycmF0Oml0YWwsd2dodEAwLDEwMDswLDIwMDswLDMwMDswLDQwMDswLDUwMDswLDYwMDswLDcwMDswLDgwMDswLDkwMDsxLDEwMDsxLDIwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMDsxLDcwMDsxLDgwMDsxLDkwMCZkaXNwbGF5PXN3YXAnKTtcXG5cXG5ib2R5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBwaW5rO1xcbn1cXG5cXG46cm9vdCB7XFxuICAgIC0tcHJpbWFyeTogcmdiKDc3LCA3NywgNzcpO1xcbn1cXG5cXG4ubWFpbiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbn1cXG5cXG4ubGVmdC1jbG0ge1xcbiAgICBtYXJnaW46IDE2cHg7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbn1cXG5cXG4ud2VhdGhlci1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiAxNnB4O1xcblxcbn1cXG5cXG4ud2VhdGhlci1sZWZ0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5iYXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG4gICAgd2lkdGg6IDFweDtcXG4gICAgaGVpZ2h0OiAxNjBweDtcXG59XFxuXFxuLmNvbnRhaW5lci10cmFuc3BhcmVudCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn0gIFxcblxcblxcbi5jaXR5LWN1cnJlbnQge1xcbiAgICBsaW5lLWhlaWdodDogMTAwJTtcXG4gICAgZm9udC1zaXplOiA0cmVtO1xcbiAgICBmb250LXdlaWdodDogMzAwO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbi50aW1lLWN1cnJlbnQge1xcbiAgICBmb250LXNpemU6IDNyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLnN1bnJpc2UtY3VycmVudCwgLnN1bnNldC1jdXJyZW50IHtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBmb250LXdlaWdodDogMTAwO1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxufVxcblxcbi5zZWFyY2gtY29udGFpbmVyIHtcXG4gICAgbWFyZ2luOiAxNnB4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxufVxcblxcbi5zZWFyY2hib3gge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yIDogdHJhbnNwYXJlbnQ7XFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLXByaW1hcnkpIDtcXG4gICAgYm9yZGVyLXRvcC1zdHlsZTogaGlkZGVuO1xcbiAgICBib3JkZXItcmlnaHQtc3R5bGU6IGhpZGRlbjtcXG4gICAgYm9yZGVyLWxlZnQtc3R5bGU6IGhpZGRlbjtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgICBcXG59XFxuXFxuOjpwbGFjZWhvbGRlciB7IC8qIENocm9tZSwgRmlyZWZveCwgT3BlcmEsIFNhZmFyaSAxMC4xKyAqL1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7XFxuICAgIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICAgIG9wYWNpdHk6IDE7IC8qIEZpcmVmb3ggKi9cXG4gIH1cXG5cXG4uc3VibWl0IHtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5idXR0b24gaSB7XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxudGV4dGFyZWE6Zm9jdXMsIGlucHV0OmZvY3Vze1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG4qOmZvY3VzIHtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuXFxuLmludmFsaWQge1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmVkO1xcbn1cXG5cXG5cXG4ud2VhdGhlcmlkLWN1cnJlbnQge1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KVxcbn1cXG5cXG4ud2VhdGhlci1pdGVtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZzogNHB4O1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICBmb250LXNpemU6IDEuMjVyZW07XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLnRlbXBlcmF0dXJlLWN1cnJlbnQge1xcbiAgICBmb250LXdlaWdodDogMjAwO1xcbiAgICBmb250LXNpemU6IDQuNXJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDUwJTtcXG4gICAgcGFkZGluZzogOHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLndlYXRoZXItaGlnaGxvdyB7XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbn1cXG5cXG4udGltZWluZm8ge1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBtYXJnaW4tYm90dG9tOiA4cHg7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbn1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcblxuICBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbi8vIHRoZXNlIGFyZW4ndCByZWFsbHkgcHJpdmF0ZSwgYnV0IG5vciBhcmUgdGhleSByZWFsbHkgdXNlZnVsIHRvIGRvY3VtZW50XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xudmFyIEx1eG9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHNMb29zZShMdXhvbkVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIEx1eG9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIF9FcnJvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICByZXR1cm4gTHV4b25FcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgSW52YWxpZERhdGVUaW1lRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yKSB7XG4gIF9pbmhlcml0c0xvb3NlKEludmFsaWREYXRlVGltZUVycm9yLCBfTHV4b25FcnJvcik7XG5cbiAgZnVuY3Rpb24gSW52YWxpZERhdGVUaW1lRXJyb3IocmVhc29uKSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yLmNhbGwodGhpcywgXCJJbnZhbGlkIERhdGVUaW1lOiBcIiArIHJlYXNvbi50b01lc3NhZ2UoKSkgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbnZhbGlkRGF0ZVRpbWVFcnJvcjtcbn0oTHV4b25FcnJvcik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEludmFsaWRJbnRlcnZhbEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTHV4b25FcnJvcjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZEludGVydmFsRXJyb3IsIF9MdXhvbkVycm9yMik7XG5cbiAgZnVuY3Rpb24gSW52YWxpZEludGVydmFsRXJyb3IocmVhc29uKSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yMi5jYWxsKHRoaXMsIFwiSW52YWxpZCBJbnRlcnZhbDogXCIgKyByZWFzb24udG9NZXNzYWdlKCkpIHx8IHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW52YWxpZEludGVydmFsRXJyb3I7XG59KEx1eG9uRXJyb3IpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBJbnZhbGlkRHVyYXRpb25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0x1eG9uRXJyb3IzKSB7XG4gIF9pbmhlcml0c0xvb3NlKEludmFsaWREdXJhdGlvbkVycm9yLCBfTHV4b25FcnJvcjMpO1xuXG4gIGZ1bmN0aW9uIEludmFsaWREdXJhdGlvbkVycm9yKHJlYXNvbikge1xuICAgIHJldHVybiBfTHV4b25FcnJvcjMuY2FsbCh0aGlzLCBcIkludmFsaWQgRHVyYXRpb246IFwiICsgcmVhc29uLnRvTWVzc2FnZSgpKSB8fCB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIEludmFsaWREdXJhdGlvbkVycm9yO1xufShMdXhvbkVycm9yKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yNCkge1xuICBfaW5oZXJpdHNMb29zZShDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciwgX0x1eG9uRXJyb3I0KTtcblxuICBmdW5jdGlvbiBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcigpIHtcbiAgICByZXR1cm4gX0x1eG9uRXJyb3I0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcjtcbn0oTHV4b25FcnJvcik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEludmFsaWRVbml0RXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yNSkge1xuICBfaW5oZXJpdHNMb29zZShJbnZhbGlkVW5pdEVycm9yLCBfTHV4b25FcnJvcjUpO1xuXG4gIGZ1bmN0aW9uIEludmFsaWRVbml0RXJyb3IodW5pdCkge1xuICAgIHJldHVybiBfTHV4b25FcnJvcjUuY2FsbCh0aGlzLCBcIkludmFsaWQgdW5pdCBcIiArIHVuaXQpIHx8IHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW52YWxpZFVuaXRFcnJvcjtcbn0oTHV4b25FcnJvcik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEludmFsaWRBcmd1bWVudEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTHV4b25FcnJvcjYpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZEFyZ3VtZW50RXJyb3IsIF9MdXhvbkVycm9yNik7XG5cbiAgZnVuY3Rpb24gSW52YWxpZEFyZ3VtZW50RXJyb3IoKSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW52YWxpZEFyZ3VtZW50RXJyb3I7XG59KEx1eG9uRXJyb3IpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBab25lSXNBYnN0cmFjdEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTHV4b25FcnJvcjcpIHtcbiAgX2luaGVyaXRzTG9vc2UoWm9uZUlzQWJzdHJhY3RFcnJvciwgX0x1eG9uRXJyb3I3KTtcblxuICBmdW5jdGlvbiBab25lSXNBYnN0cmFjdEVycm9yKCkge1xuICAgIHJldHVybiBfTHV4b25FcnJvcjcuY2FsbCh0aGlzLCBcIlpvbmUgaXMgYW4gYWJzdHJhY3QgY2xhc3NcIikgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBab25lSXNBYnN0cmFjdEVycm9yO1xufShMdXhvbkVycm9yKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbiA9IFwibnVtZXJpY1wiLFxuICAgIHMgPSBcInNob3J0XCIsXG4gICAgbCA9IFwibG9uZ1wiO1xudmFyIERBVEVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG5cbn07XG52YXIgREFURV9NRUQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG5cbn07XG52YXIgREFURV9NRURfV0lUSF9XRUVLREFZID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBzXG59O1xudmFyIERBVEVfRlVMTCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogblxufTtcbnZhciBEQVRFX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGxcbn07XG52YXIgVElNRV9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogblxufTtcbnZhciBUSU1FX1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgVElNRV9XSVRIX1NIT1JUX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBUSU1FX1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IGxcbn07XG52YXIgVElNRV8yNF9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xudmFyIFRJTUVfMjRfV0lUSF9TRUNPTkRTID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xudmFyIFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogbFxufTtcbnZhciBEQVRFVElNRV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgREFURVRJTUVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG52YXIgREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogcyxcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIERBVEVUSU1FX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xudmFyIERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xudmFyIERBVEVUSU1FX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGwsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xudmFyIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbi8vIFRZUEVTXG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNOdW1iZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCI7XG59XG5mdW5jdGlvbiBpc0ludGVnZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCIgJiYgbyAlIDEgPT09IDA7XG59XG5mdW5jdGlvbiBpc1N0cmluZyhvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzRGF0ZShvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09IFwiW29iamVjdCBEYXRlXVwiO1xufSAvLyBDQVBBQklMSVRJRVNcblxuZnVuY3Rpb24gaGFzUmVsYXRpdmUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHR5cGVvZiBJbnRsICE9PSBcInVuZGVmaW5lZFwiICYmICEhSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0gLy8gT0JKRUNUUyBBTkQgQVJSQVlTXG5cbmZ1bmN0aW9uIG1heWJlQXJyYXkodGhpbmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpbmcpID8gdGhpbmcgOiBbdGhpbmddO1xufVxuZnVuY3Rpb24gYmVzdEJ5KGFyciwgYnksIGNvbXBhcmUpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGJlc3QsIG5leHQpIHtcbiAgICB2YXIgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG5cbiAgICBpZiAoIWJlc3QpIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZShiZXN0WzBdLCBwYWlyWzBdKSA9PT0gYmVzdFswXSkge1xuICAgICAgcmV0dXJuIGJlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH1cbiAgfSwgbnVsbClbMV07XG59XG5mdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGspIHtcbiAgICBhW2tdID0gb2JqW2tdO1xuICAgIHJldHVybiBhO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSAvLyBOVU1CRVJTIEFORCBTVFJJTkdTXG5cbmZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHRoaW5nKSAmJiB0aGluZyA+PSBib3R0b20gJiYgdGhpbmcgPD0gdG9wO1xufSAvLyB4ICUgbiBidXQgdGFrZXMgdGhlIHNpZ24gb2YgbiBpbnN0ZWFkIG9mIHhcblxuZnVuY3Rpb24gZmxvb3JNb2QoeCwgbikge1xuICByZXR1cm4geCAtIG4gKiBNYXRoLmZsb29yKHggLyBuKTtcbn1cbmZ1bmN0aW9uIHBhZFN0YXJ0KGlucHV0LCBuKSB7XG4gIGlmIChuID09PSB2b2lkIDApIHtcbiAgICBuID0gMjtcbiAgfVxuXG4gIHZhciBpc05lZyA9IGlucHV0IDwgMDtcbiAgdmFyIHBhZGRlZDtcblxuICBpZiAoaXNOZWcpIHtcbiAgICBwYWRkZWQgPSBcIi1cIiArIChcIlwiICsgLWlucHV0KS5wYWRTdGFydChuLCBcIjBcIik7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGVkID0gKFwiXCIgKyBpbnB1dCkucGFkU3RhcnQobiwgXCIwXCIpO1xuICB9XG5cbiAgcmV0dXJuIHBhZGRlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChcIjAuXCIgKyBmcmFjdGlvbikgKiAxMDAwO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGYpO1xuICB9XG59XG5mdW5jdGlvbiByb3VuZFRvKG51bWJlciwgZGlnaXRzLCB0b3dhcmRaZXJvKSB7XG4gIGlmICh0b3dhcmRaZXJvID09PSB2b2lkIDApIHtcbiAgICB0b3dhcmRaZXJvID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyksXG4gICAgICByb3VuZGVyID0gdG93YXJkWmVybyA/IE1hdGgudHJ1bmMgOiBNYXRoLnJvdW5kO1xuICByZXR1cm4gcm91bmRlcihudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yO1xufSAvLyBEQVRFIEJBU0lDU1xuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgdmFyIG1vZE1vbnRoID0gZmxvb3JNb2QobW9udGggLSAxLCAxMikgKyAxLFxuICAgICAgbW9kWWVhciA9IHllYXIgKyAobW9udGggLSBtb2RNb250aCkgLyAxMjtcblxuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn0gLy8gY292ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcblxuZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikge1xuICB2YXIgZCA9IERhdGUuVVRDKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5LCBvYmouaG91ciwgb2JqLm1pbnV0ZSwgb2JqLnNlY29uZCwgb2JqLm1pbGxpc2Vjb25kKTsgLy8gZm9yIGxlZ2FjeSByZWFzb25zLCB5ZWFycyBiZXR3ZWVuIDAgYW5kIDk5IGFyZSBpbnRlcnByZXRlZCBhcyAxOVhYOyByZXZlcnQgdGhhdFxuXG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICByZXR1cm4gK2Q7XG59XG5mdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpIHtcbiAgdmFyIHAxID0gKHdlZWtZZWFyICsgTWF0aC5mbG9vcih3ZWVrWWVhciAvIDQpIC0gTWF0aC5mbG9vcih3ZWVrWWVhciAvIDEwMCkgKyBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNDAwKSkgJSA3LFxuICAgICAgbGFzdCA9IHdlZWtZZWFyIC0gMSxcbiAgICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7XG4gIHJldHVybiBwMSA9PT0gNCB8fCBwMiA9PT0gMyA/IDUzIDogNTI7XG59XG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyKSB7XG4gIGlmICh5ZWFyID4gOTkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHJldHVybiB5ZWFyID4gNjAgPyAxOTAwICsgeWVhciA6IDIwMDAgKyB5ZWFyO1xufSAvLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSkge1xuICBpZiAodGltZVpvbmUgPT09IHZvaWQgMCkge1xuICAgIHRpbWVab25lID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRlID0gbmV3IERhdGUodHMpLFxuICAgICAgaW50bE9wdHMgPSB7XG4gICAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcIjItZGlnaXRcIixcbiAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgIG1pbnV0ZTogXCIyLWRpZ2l0XCJcbiAgfTtcblxuICBpZiAodGltZVpvbmUpIHtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IHRpbWVab25lO1xuICB9XG5cbiAgdmFyIG1vZGlmaWVkID0gX2V4dGVuZHMoe1xuICAgIHRpbWVab25lTmFtZTogb2Zmc2V0Rm9ybWF0XG4gIH0sIGludGxPcHRzKTtcblxuICB2YXIgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZCkuZm9ybWF0VG9QYXJ0cyhkYXRlKS5maW5kKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIG0udHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRpbWV6b25lbmFtZVwiO1xuICB9KTtcbiAgcmV0dXJuIHBhcnNlZCA/IHBhcnNlZC52YWx1ZSA6IG51bGw7XG59IC8vIHNpZ25lZE9mZnNldCgnLTUnLCAnMzAnKSAtPiAtMzMwXG5cbmZ1bmN0aW9uIHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpIHtcbiAgdmFyIG9mZkhvdXIgPSBwYXJzZUludChvZmZIb3VyU3RyLCAxMCk7IC8vIGRvbid0IHx8IHRoaXMgYmVjYXVzZSB3ZSB3YW50IHRvIHByZXNlcnZlIC0wXG5cbiAgaWYgKE51bWJlci5pc05hTihvZmZIb3VyKSkge1xuICAgIG9mZkhvdXIgPSAwO1xuICB9XG5cbiAgdmFyIG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsXG4gICAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn0gLy8gQ09FUkNJT05cblxuZnVuY3Rpb24gYXNOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG51bWVyaWNWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09PSBcIlwiIHx8IE51bWJlci5pc05hTihudW1lcmljVmFsdWUpKSB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJJbnZhbGlkIHVuaXQgdmFsdWUgXCIgKyB2YWx1ZSk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7XG4gIHZhciBub3JtYWxpemVkID0ge307XG5cbiAgZm9yICh2YXIgdSBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkob2JqLCB1KSkge1xuICAgICAgdmFyIHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KG9mZnNldCwgZm9ybWF0KSB7XG4gIHZhciBob3VycyA9IE1hdGgudHJ1bmMoTWF0aC5hYnMob2Zmc2V0IC8gNjApKSxcbiAgICAgIG1pbnV0ZXMgPSBNYXRoLnRydW5jKE1hdGguYWJzKG9mZnNldCAlIDYwKSksXG4gICAgICBzaWduID0gb2Zmc2V0ID49IDAgPyBcIitcIiA6IFwiLVwiO1xuXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gXCJcIiArIHNpZ24gKyBwYWRTdGFydChob3VycywgMikgKyBcIjpcIiArIHBhZFN0YXJ0KG1pbnV0ZXMsIDIpO1xuXG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFwiXCIgKyBzaWduICsgaG91cnMgKyAobWludXRlcyA+IDAgPyBcIjpcIiArIG1pbnV0ZXMgOiBcIlwiKTtcblxuICAgIGNhc2UgXCJ0ZWNoaWVcIjpcbiAgICAgIHJldHVybiBcIlwiICsgc2lnbiArIHBhZFN0YXJ0KGhvdXJzLCAyKSArIHBhZFN0YXJ0KG1pbnV0ZXMsIDIpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVmFsdWUgZm9ybWF0IFwiICsgZm9ybWF0ICsgXCIgaXMgb3V0IG9mIHJhbmdlIGZvciBwcm9wZXJ0eSBmb3JtYXRcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIHRpbWVPYmplY3Qob2JqKSB7XG4gIHJldHVybiBwaWNrKG9iaiwgW1wiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdKTtcbn1cbnZhciBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KDo/XFwvW0EtWmEtejAtOV8rLV17MSwyNTZ9KFxcL1tBLVphLXowLTlfKy1dezEsMjU2fSk/KT8vO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgbW9udGhzTG9uZyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xudmFyIG1vbnRoc1Nob3J0ID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xudmFyIG1vbnRoc05hcnJvdyA9IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXTtcbmZ1bmN0aW9uIG1vbnRocyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gW10uY29uY2F0KG1vbnRoc05hcnJvdyk7XG5cbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbXS5jb25jYXQobW9udGhzU2hvcnQpO1xuXG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIHJldHVybiBbXS5jb25jYXQobW9udGhzTG9uZyk7XG5cbiAgICBjYXNlIFwibnVtZXJpY1wiOlxuICAgICAgcmV0dXJuIFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIiwgXCI4XCIsIFwiOVwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiXTtcblxuICAgIGNhc2UgXCIyLWRpZ2l0XCI6XG4gICAgICByZXR1cm4gW1wiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgd2Vla2RheXNMb25nID0gW1wiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiwgXCJTdW5kYXlcIl07XG52YXIgd2Vla2RheXNTaG9ydCA9IFtcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiLCBcIlN1blwiXTtcbnZhciB3ZWVrZGF5c05hcnJvdyA9IFtcIk1cIiwgXCJUXCIsIFwiV1wiLCBcIlRcIiwgXCJGXCIsIFwiU1wiLCBcIlNcIl07XG5mdW5jdGlvbiB3ZWVrZGF5cyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gW10uY29uY2F0KHdlZWtkYXlzTmFycm93KTtcblxuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIFtdLmNvbmNhdCh3ZWVrZGF5c1Nob3J0KTtcblxuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gW10uY29uY2F0KHdlZWtkYXlzTG9uZyk7XG5cbiAgICBjYXNlIFwibnVtZXJpY1wiOlxuICAgICAgcmV0dXJuIFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIl07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciBtZXJpZGllbXMgPSBbXCJBTVwiLCBcIlBNXCJdO1xudmFyIGVyYXNMb25nID0gW1wiQmVmb3JlIENocmlzdFwiLCBcIkFubm8gRG9taW5pXCJdO1xudmFyIGVyYXNTaG9ydCA9IFtcIkJDXCIsIFwiQURcIl07XG52YXIgZXJhc05hcnJvdyA9IFtcIkJcIiwgXCJBXCJdO1xuZnVuY3Rpb24gZXJhcyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gW10uY29uY2F0KGVyYXNOYXJyb3cpO1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gW10uY29uY2F0KGVyYXNTaG9ydCk7XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFtdLmNvbmNhdChlcmFzTG9uZyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpIHtcbiAgcmV0dXJuIG1lcmlkaWVtc1tkdC5ob3VyIDwgMTIgPyAwIDogMV07XG59XG5mdW5jdGlvbiB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07XG59XG5mdW5jdGlvbiBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG1vbnRocyhsZW5ndGgpW2R0Lm1vbnRoIC0gMV07XG59XG5mdW5jdGlvbiBlcmFGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiBlcmFzKGxlbmd0aClbZHQueWVhciA8IDAgPyAwIDogMV07XG59XG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIG51bWVyaWMsIG5hcnJvdykge1xuICBpZiAobnVtZXJpYyA9PT0gdm9pZCAwKSB7XG4gICAgbnVtZXJpYyA9IFwiYWx3YXlzXCI7XG4gIH1cblxuICBpZiAobmFycm93ID09PSB2b2lkIDApIHtcbiAgICBuYXJyb3cgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1bml0cyA9IHtcbiAgICB5ZWFyczogW1wieWVhclwiLCBcInlyLlwiXSxcbiAgICBxdWFydGVyczogW1wicXVhcnRlclwiLCBcInF0ci5cIl0sXG4gICAgbW9udGhzOiBbXCJtb250aFwiLCBcIm1vLlwiXSxcbiAgICB3ZWVrczogW1wid2Vla1wiLCBcIndrLlwiXSxcbiAgICBkYXlzOiBbXCJkYXlcIiwgXCJkYXlcIiwgXCJkYXlzXCJdLFxuICAgIGhvdXJzOiBbXCJob3VyXCIsIFwiaHIuXCJdLFxuICAgIG1pbnV0ZXM6IFtcIm1pbnV0ZVwiLCBcIm1pbi5cIl0sXG4gICAgc2Vjb25kczogW1wic2Vjb25kXCIsIFwic2VjLlwiXVxuICB9O1xuICB2YXIgbGFzdGFibGUgPSBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCJdLmluZGV4T2YodW5pdCkgPT09IC0xO1xuXG4gIGlmIChudW1lcmljID09PSBcImF1dG9cIiAmJiBsYXN0YWJsZSkge1xuICAgIHZhciBpc0RheSA9IHVuaXQgPT09IFwiZGF5c1wiO1xuXG4gICAgc3dpdGNoIChjb3VudCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInRvbW9ycm93XCIgOiBcIm5leHQgXCIgKyB1bml0c1t1bml0XVswXTtcblxuICAgICAgY2FzZSAtMTpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ5ZXN0ZXJkYXlcIiA6IFwibGFzdCBcIiArIHVuaXRzW3VuaXRdWzBdO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9kYXlcIiA6IFwidGhpcyBcIiArIHVuaXRzW3VuaXRdWzBdO1xuXG4gICAgfVxuICB9XG5cbiAgdmFyIGlzSW5QYXN0ID0gT2JqZWN0LmlzKGNvdW50LCAtMCkgfHwgY291bnQgPCAwLFxuICAgICAgZm10VmFsdWUgPSBNYXRoLmFicyhjb3VudCksXG4gICAgICBzaW5ndWxhciA9IGZtdFZhbHVlID09PSAxLFxuICAgICAgbGlsVW5pdHMgPSB1bml0c1t1bml0XSxcbiAgICAgIGZtdFVuaXQgPSBuYXJyb3cgPyBzaW5ndWxhciA/IGxpbFVuaXRzWzFdIDogbGlsVW5pdHNbMl0gfHwgbGlsVW5pdHNbMV0gOiBzaW5ndWxhciA/IHVuaXRzW3VuaXRdWzBdIDogdW5pdDtcbiAgcmV0dXJuIGlzSW5QYXN0ID8gZm10VmFsdWUgKyBcIiBcIiArIGZtdFVuaXQgKyBcIiBhZ29cIiA6IFwiaW4gXCIgKyBmbXRWYWx1ZSArIFwiIFwiICsgZm10VW5pdDtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW5zKHNwbGl0cywgdG9rZW5Ub1N0cmluZykge1xuICB2YXIgcyA9IFwiXCI7XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShzcGxpdHMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciB0b2tlbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHMgKz0gdG9rZW4udmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzICs9IHRva2VuVG9TdHJpbmcodG9rZW4udmFsKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcztcbn1cblxudmFyIF9tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzID0ge1xuICBEOiBEQVRFX1NIT1JULFxuICBERDogREFURV9NRUQsXG4gIERERDogREFURV9GVUxMLFxuICBEREREOiBEQVRFX0hVR0UsXG4gIHQ6IFRJTUVfU0lNUExFLFxuICB0dDogVElNRV9XSVRIX1NFQ09ORFMsXG4gIHR0dDogVElNRV9XSVRIX1NIT1JUX09GRlNFVCxcbiAgdHR0dDogVElNRV9XSVRIX0xPTkdfT0ZGU0VULFxuICBUOiBUSU1FXzI0X1NJTVBMRSxcbiAgVFQ6IFRJTUVfMjRfV0lUSF9TRUNPTkRTLFxuICBUVFQ6IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQsXG4gIFRUVFQ6IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCxcbiAgZjogREFURVRJTUVfU0hPUlQsXG4gIGZmOiBEQVRFVElNRV9NRUQsXG4gIGZmZjogREFURVRJTUVfRlVMTCxcbiAgZmZmZjogREFURVRJTUVfSFVHRSxcbiAgRjogREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTLFxuICBGRjogREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyxcbiAgRkZGOiBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyxcbiAgRkZGRjogREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFNcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEZvcm1hdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIEZvcm1hdHRlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUobG9jYWxlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRm9ybWF0dGVyKGxvY2FsZSwgb3B0cyk7XG4gIH07XG5cbiAgRm9ybWF0dGVyLnBhcnNlRm9ybWF0ID0gZnVuY3Rpb24gcGFyc2VGb3JtYXQoZm10KSB7XG4gICAgdmFyIGN1cnJlbnQgPSBudWxsLFxuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCIsXG4gICAgICAgIGJyYWNrZXRlZCA9IGZhbHNlO1xuICAgIHZhciBzcGxpdHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm10Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGZtdC5jaGFyQXQoaSk7XG5cbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGJyYWNrZXRlZCxcbiAgICAgICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgICAgICAgdmFsOiBjdXJyZW50RnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goe1xuICAgICAgICBsaXRlcmFsOiBicmFja2V0ZWQsXG4gICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzcGxpdHM7XG4gIH07XG5cbiAgRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSBmdW5jdGlvbiBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKSB7XG4gICAgcmV0dXJuIF9tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzW3Rva2VuXTtcbiAgfTtcblxuICBmdW5jdGlvbiBGb3JtYXR0ZXIobG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0cztcbiAgICB0aGlzLmxvYyA9IGxvY2FsZTtcbiAgICB0aGlzLnN5c3RlbUxvYyA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybWF0dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQgPSBmdW5jdGlvbiBmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgb3B0cykge1xuICAgIGlmICh0aGlzLnN5c3RlbUxvYyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zeXN0ZW1Mb2MgPSB0aGlzLmxvYy5yZWRlZmF1bHRUb1N5c3RlbSgpO1xuICAgIH1cblxuICAgIHZhciBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRzLCBvcHRzKSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdCgpO1xuICB9O1xuXG4gIF9wcm90by5mb3JtYXREYXRlVGltZSA9IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lKGR0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBkZiA9IHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRzLCBvcHRzKSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdCgpO1xuICB9O1xuXG4gIF9wcm90by5mb3JtYXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgX2V4dGVuZHMoe30sIHRoaXMub3B0cywgb3B0cykpO1xuICAgIHJldHVybiBkZi5mb3JtYXRUb1BhcnRzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc29sdmVkT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgX2V4dGVuZHMoe30sIHRoaXMub3B0cywgb3B0cykpO1xuICAgIHJldHVybiBkZi5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8ubnVtID0gZnVuY3Rpb24gbnVtKG4sIHApIHtcbiAgICBpZiAocCA9PT0gdm9pZCAwKSB7XG4gICAgICBwID0gMDtcbiAgICB9XG5cbiAgICAvLyB3ZSBnZXQgc29tZSBwZXJmIG91dCBvZiBkb2luZyB0aGlzIGhlcmUsIGFubm95aW5nbHlcbiAgICBpZiAodGhpcy5vcHRzLmZvcmNlU2ltcGxlKSB7XG4gICAgICByZXR1cm4gcGFkU3RhcnQobiwgcCk7XG4gICAgfVxuXG4gICAgdmFyIG9wdHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRzKTtcblxuICAgIGlmIChwID4gMCkge1xuICAgICAgb3B0cy5wYWRUbyA9IHA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9jLm51bWJlckZvcm1hdHRlcihvcHRzKS5mb3JtYXQobik7XG4gIH07XG5cbiAgX3Byb3RvLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyA9IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyhkdCwgZm10KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsXG4gICAgICAgIHVzZURhdGVUaW1lRm9ybWF0dGVyID0gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgJiYgdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgIT09IFwiZ3JlZ29yeVwiLFxuICAgICAgICBzdHJpbmcgPSBmdW5jdGlvbiBzdHJpbmcob3B0cywgZXh0cmFjdCkge1xuICAgICAgcmV0dXJuIF90aGlzLmxvYy5leHRyYWN0KGR0LCBvcHRzLCBleHRyYWN0KTtcbiAgICB9LFxuICAgICAgICBmb3JtYXRPZmZzZXQgPSBmdW5jdGlvbiBmb3JtYXRPZmZzZXQob3B0cykge1xuICAgICAgaWYgKGR0LmlzT2Zmc2V0Rml4ZWQgJiYgZHQub2Zmc2V0ID09PSAwICYmIG9wdHMuYWxsb3daKSB7XG4gICAgICAgIHJldHVybiBcIlpcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR0LmlzVmFsaWQgPyBkdC56b25lLmZvcm1hdE9mZnNldChkdC50cywgb3B0cy5mb3JtYXQpIDogXCJcIjtcbiAgICB9LFxuICAgICAgICBtZXJpZGllbSA9IGZ1bmN0aW9uIG1lcmlkaWVtKCkge1xuICAgICAgcmV0dXJuIGtub3duRW5nbGlzaCA/IG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpIDogc3RyaW5nKHtcbiAgICAgICAgaG91cjogXCJudW1lcmljXCIsXG4gICAgICAgIGhvdXJDeWNsZTogXCJoMTJcIlxuICAgICAgfSwgXCJkYXlwZXJpb2RcIik7XG4gICAgfSxcbiAgICAgICAgbW9udGggPSBmdW5jdGlvbiBtb250aChsZW5ndGgsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiBrbm93bkVuZ2xpc2ggPyBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIDogc3RyaW5nKHN0YW5kYWxvbmUgPyB7XG4gICAgICAgIG1vbnRoOiBsZW5ndGhcbiAgICAgIH0gOiB7XG4gICAgICAgIG1vbnRoOiBsZW5ndGgsXG4gICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgIH0sIFwibW9udGhcIik7XG4gICAgfSxcbiAgICAgICAgd2Vla2RheSA9IGZ1bmN0aW9uIHdlZWtkYXkobGVuZ3RoLCBzdGFuZGFsb25lKSB7XG4gICAgICByZXR1cm4ga25vd25FbmdsaXNoID8gd2Vla2RheUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIDogc3RyaW5nKHN0YW5kYWxvbmUgPyB7XG4gICAgICAgIHdlZWtkYXk6IGxlbmd0aFxuICAgICAgfSA6IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoLFxuICAgICAgICBtb250aDogXCJsb25nXCIsXG4gICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgIH0sIFwid2Vla2RheVwiKTtcbiAgICB9LFxuICAgICAgICBtYXliZU1hY3JvID0gZnVuY3Rpb24gbWF5YmVNYWNybyh0b2tlbikge1xuICAgICAgdmFyIGZvcm1hdE9wdHMgPSBGb3JtYXR0ZXIubWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbik7XG5cbiAgICAgIGlmIChmb3JtYXRPcHRzKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgZm9ybWF0T3B0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgZXJhID0gZnVuY3Rpb24gZXJhKGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGtub3duRW5nbGlzaCA/IGVyYUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIDogc3RyaW5nKHtcbiAgICAgICAgZXJhOiBsZW5ndGhcbiAgICAgIH0sIFwiZXJhXCIpO1xuICAgIH0sXG4gICAgICAgIHRva2VuVG9TdHJpbmcgPSBmdW5jdGlvbiB0b2tlblRvU3RyaW5nKHRva2VuKSB7XG4gICAgICAvLyBXaGVyZSBwb3NzaWJsZTogaHR0cDovL2NsZHIudW5pY29kZS5vcmcvdHJhbnNsYXRpb24vZGF0ZS10aW1lLTEvZGF0ZS10aW1lI1RPQy1TdGFuZGFsb25lLXZzLi1Gb3JtYXQtU3R5bGVzXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIG1zXG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG5cbiAgICAgICAgY2FzZSBcInVcIjogLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0Lm1pbGxpc2Vjb25kLCAzKTtcbiAgICAgICAgLy8gc2Vjb25kc1xuXG4gICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5zZWNvbmQpO1xuXG4gICAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgLy8gZnJhY3Rpb25hbCBzZWNvbmRzXG5cbiAgICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShNYXRoLmZsb29yKGR0Lm1pbGxpc2Vjb25kIC8gMTApLCAyKTtcblxuICAgICAgICBjYXNlIFwidXV1XCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShNYXRoLmZsb29yKGR0Lm1pbGxpc2Vjb25kIC8gMTAwKSk7XG4gICAgICAgIC8vIG1pbnV0ZXNcblxuICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQubWludXRlKTtcblxuICAgICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0Lm1pbnV0ZSwgMik7XG4gICAgICAgIC8vIGhvdXJzXG5cbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyKTtcblxuICAgICAgICBjYXNlIFwiaGhcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTtcblxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQuaG91cik7XG5cbiAgICAgICAgY2FzZSBcIkhIXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5ob3VyLCAyKTtcbiAgICAgICAgLy8gb2Zmc2V0XG5cbiAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICAvLyBsaWtlICs2XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7XG4gICAgICAgICAgICBmb3JtYXQ6IFwibmFycm93XCIsXG4gICAgICAgICAgICBhbGxvd1o6IF90aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSArMDY6MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICAgICAgYWxsb3daOiBfdGhpcy5vcHRzLmFsbG93WlxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgXCJaWlpcIjpcbiAgICAgICAgICAvLyBsaWtlICswNjAwXG4gICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7XG4gICAgICAgICAgICBmb3JtYXQ6IFwidGVjaGllXCIsXG4gICAgICAgICAgICBhbGxvd1o6IF90aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlpcIjpcbiAgICAgICAgICAvLyBsaWtlIEVTVFxuICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICAgICAgbG9jYWxlOiBfdGhpcy5sb2MubG9jYWxlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlpaXCI6XG4gICAgICAgICAgLy8gbGlrZSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcbiAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICAgICAgbG9jYWxlOiBfdGhpcy5sb2MubG9jYWxlXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIHpvbmVcblxuICAgICAgICBjYXNlIFwielwiOlxuICAgICAgICAgIC8vIGxpa2UgQW1lcmljYS9OZXdfWW9ya1xuICAgICAgICAgIHJldHVybiBkdC56b25lTmFtZTtcbiAgICAgICAgLy8gbWVyaWRpZW1zXG5cbiAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICByZXR1cm4gbWVyaWRpZW0oKTtcbiAgICAgICAgLy8gZGF0ZXNcblxuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJkYXlcIikgOiBfdGhpcy5udW0oZHQuZGF5KTtcblxuICAgICAgICBjYXNlIFwiZGRcIjpcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgZGF5OiBcIjItZGlnaXRcIlxuICAgICAgICAgIH0sIFwiZGF5XCIpIDogX3RoaXMubnVtKGR0LmRheSwgMik7XG4gICAgICAgIC8vIHdlZWtkYXlzIC0gc3RhbmRhbG9uZVxuXG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC53ZWVrZGF5KTtcblxuICAgICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVHVlcydcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcInNob3J0XCIsIHRydWUpO1xuXG4gICAgICAgIGNhc2UgXCJjY2NjXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVHVlc2RheSdcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcImNjY2NjXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVCdcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgLy8gd2Vla2RheXMgLSBmb3JtYXRcblxuICAgICAgICBjYXNlIFwiRVwiOlxuICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQud2Vla2RheSk7XG5cbiAgICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICAgIC8vIGxpa2UgJ1R1ZXMnXG4gICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJzaG9ydFwiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIkVFRUVcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVCdcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcIm5hcnJvd1wiLCBmYWxzZSk7XG4gICAgICAgIC8vIG1vbnRocyAtIHN0YW5kYWxvbmVcblxuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICBtb250aDogXCJudW1lcmljXCIsXG4gICAgICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IF90aGlzLm51bShkdC5tb250aCk7XG5cbiAgICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgICAgLy8gbGlrZSAwMSwgZG9lc24ndCBzZWVtIHRvIHdvcmtcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiBfdGhpcy5udW0oZHQubW9udGgsIDIpO1xuXG4gICAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgICAvLyBsaWtlIEphblxuICAgICAgICAgIHJldHVybiBtb250aChcInNob3J0XCIsIHRydWUpO1xuXG4gICAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCB0cnVlKTtcblxuICAgICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgICAvLyBsaWtlIEpcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJuYXJyb3dcIiwgdHJ1ZSk7XG4gICAgICAgIC8vIG1vbnRocyAtIGZvcm1hdFxuXG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIG1vbnRoOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwibW9udGhcIikgOiBfdGhpcy5udW0oZHQubW9udGgpO1xuXG4gICAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwiMi1kaWdpdFwiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IF90aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgZmFsc2UpO1xuXG4gICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIk1NTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgLy8geWVhcnNcblxuICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgIC8vIGxpa2UgMjAxNFxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IF90aGlzLm51bShkdC55ZWFyKTtcblxuICAgICAgICBjYXNlIFwieXlcIjpcbiAgICAgICAgICAvLyBsaWtlIDE0XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIHllYXI6IFwiMi1kaWdpdFwiXG4gICAgICAgICAgfSwgXCJ5ZWFyXCIpIDogX3RoaXMubnVtKGR0LnllYXIudG9TdHJpbmcoKS5zbGljZSgtMiksIDIpO1xuXG4gICAgICAgIGNhc2UgXCJ5eXl5XCI6XG4gICAgICAgICAgLy8gbGlrZSAwMDEyXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIHllYXI6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJ5ZWFyXCIpIDogX3RoaXMubnVtKGR0LnllYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgICAvLyBsaWtlIDAwMDAxMlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgICAgIH0sIFwieWVhclwiKSA6IF90aGlzLm51bShkdC55ZWFyLCA2KTtcbiAgICAgICAgLy8gZXJhc1xuXG4gICAgICAgIGNhc2UgXCJHXCI6XG4gICAgICAgICAgLy8gbGlrZSBBRFxuICAgICAgICAgIHJldHVybiBlcmEoXCJzaG9ydFwiKTtcblxuICAgICAgICBjYXNlIFwiR0dcIjpcbiAgICAgICAgICAvLyBsaWtlIEFubm8gRG9taW5pXG4gICAgICAgICAgcmV0dXJuIGVyYShcImxvbmdcIik7XG5cbiAgICAgICAgY2FzZSBcIkdHR0dHXCI6XG4gICAgICAgICAgcmV0dXJuIGVyYShcIm5hcnJvd1wiKTtcblxuICAgICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LndlZWtZZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcblxuICAgICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQud2Vla1llYXIsIDQpO1xuXG4gICAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC53ZWVrTnVtYmVyKTtcblxuICAgICAgICBjYXNlIFwiV1dcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LndlZWtOdW1iZXIsIDIpO1xuXG4gICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5vcmRpbmFsKTtcblxuICAgICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5vcmRpbmFsLCAzKTtcblxuICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQucXVhcnRlcik7XG5cbiAgICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgICAgLy8gbGlrZSAwMVxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQucXVhcnRlciwgMik7XG5cbiAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKE1hdGguZmxvb3IoZHQudHMgLyAxMDAwKSk7XG5cbiAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LnRzKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXliZU1hY3JvKHRva2VuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0cmluZ2lmeVRva2VucyhGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm10KSwgdG9rZW5Ub1N0cmluZyk7XG4gIH07XG5cbiAgX3Byb3RvLmZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyA9IGZ1bmN0aW9uIGZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyhkdXIsIGZtdCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHRva2VuVG9GaWVsZCA9IGZ1bmN0aW9uIHRva2VuVG9GaWVsZCh0b2tlbikge1xuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuXG4gICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIFwiZGF5XCI7XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgdG9rZW5Ub1N0cmluZyA9IGZ1bmN0aW9uIHRva2VuVG9TdHJpbmcobGlsZHVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHZhciBtYXBwZWQgPSB0b2tlblRvRmllbGQodG9rZW4pO1xuXG4gICAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLm51bShsaWxkdXIuZ2V0KG1hcHBlZCksIHRva2VuLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgICAgIHRva2VucyA9IEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLFxuICAgICAgICByZWFsVG9rZW5zID0gdG9rZW5zLnJlZHVjZShmdW5jdGlvbiAoZm91bmQsIF9yZWYpIHtcbiAgICAgIHZhciBsaXRlcmFsID0gX3JlZi5saXRlcmFsLFxuICAgICAgICAgIHZhbCA9IF9yZWYudmFsO1xuICAgICAgcmV0dXJuIGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpO1xuICAgIH0sIFtdKSxcbiAgICAgICAgY29sbGFwc2VkID0gZHVyLnNoaWZ0VG8uYXBwbHkoZHVyLCByZWFsVG9rZW5zLm1hcCh0b2tlblRvRmllbGQpLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHN0cmluZ2lmeVRva2Vucyh0b2tlbnMsIHRva2VuVG9TdHJpbmcoY29sbGFwc2VkKSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1hdHRlcjtcbn0oKTtcblxudmFyIEludmFsaWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pIHtcbiAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICB0aGlzLmV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb247XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW52YWxpZC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvTWVzc2FnZSA9IGZ1bmN0aW9uIHRvTWVzc2FnZSgpIHtcbiAgICBpZiAodGhpcy5leHBsYW5hdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uICsgXCI6IFwiICsgdGhpcy5leHBsYW5hdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gSW52YWxpZDtcbn0oKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlXG4gKi9cblxudmFyIFpvbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBab25lKCkge31cblxuICB2YXIgX3Byb3RvID0gWm9uZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9mZnNldCdzIGNvbW1vbiBuYW1lIChzdWNoIGFzIEVTVCkgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXBcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBuYW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gT3B0aW9ucyB0byBhZmZlY3QgdGhlIGZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5mb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uIEFjY2VwdHMgJ2xvbmcnIG9yICdzaG9ydCcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmxvY2FsZSAtIFdoYXQgbG9jYWxlIHRvIHJldHVybiB0aGUgb2Zmc2V0IG5hbWUgaW4uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSh0cywgb3B0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9mZnNldCdzIHZhbHVlIGFzIGEgc3RyaW5nXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgb2Zmc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBBY2NlcHRzICduYXJyb3cnLCAnc2hvcnQnLCBvciAndGVjaGllJy4gUmV0dXJuaW5nICcrNicsICcrMDY6MDAnLCBvciAnKzA2MDAnIHJlc3BlY3RpdmVseVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBvZmZzZXQgaW4gbWludXRlcyBmb3IgdGhpcyB6b25lIGF0IHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBjb21wdXRlIHRoZSBvZmZzZXRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQodHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgZXF1YWwgdG8gYW5vdGhlciB6b25lXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge1pvbmV9IG90aGVyWm9uZSAtIHRoZSB6b25lIHRvIGNvbXBhcmVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyB2YWxpZC5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhab25lLCBbe1xuICAgIGtleTogXCJ0eXBlXCIsXG4gICAgZ2V0OlxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHpvbmVcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBvZmZzZXQgaXMga25vd24gdG8gYmUgZml4ZWQgZm9yIHRoZSB3aG9sZSB5ZWFyLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNVbml2ZXJzYWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFpvbmU7XG59KCk7XG5cbnZhciBzaW5nbGV0b24kMSA9IG51bGw7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGxvY2FsIHpvbmUgZm9yIHRoaXMgSmF2YVNjcmlwdCBlbnZpcm9ubWVudC5cbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5cbnZhciBTeXN0ZW1ab25lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfWm9uZSkge1xuICBfaW5oZXJpdHNMb29zZShTeXN0ZW1ab25lLCBfWm9uZSk7XG5cbiAgZnVuY3Rpb24gU3lzdGVtWm9uZSgpIHtcbiAgICByZXR1cm4gX1pvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN5c3RlbVpvbmUucHJvdG90eXBlO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSh0cywgX3JlZikge1xuICAgIHZhciBmb3JtYXQgPSBfcmVmLmZvcm1hdCxcbiAgICAgICAgbG9jYWxlID0gX3JlZi5sb2NhbGU7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCQxKHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCh0cykge1xuICAgIHJldHVybiAtbmV3IERhdGUodHMpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcInN5c3RlbVwiO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoU3lzdGVtWm9uZSwgW3tcbiAgICBrZXk6IFwidHlwZVwiLFxuICAgIGdldDpcbiAgICAvKiogQG92ZXJyaWRlICoqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBcInN5c3RlbVwiO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc1VuaXZlcnNhbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1ZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJpbnN0YW5jZVwiLFxuICAgIGdldDpcbiAgICAvKipcbiAgICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIGxvY2FsIHpvbmVcbiAgICAgKiBAcmV0dXJuIHtTeXN0ZW1ab25lfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChzaW5nbGV0b24kMSA9PT0gbnVsbCkge1xuICAgICAgICBzaW5nbGV0b24kMSA9IG5ldyBTeXN0ZW1ab25lKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW5nbGV0b24kMTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3lzdGVtWm9uZTtcbn0oWm9uZSk7XG5cblJlZ0V4cChcIl5cIiArIGlhbmFSZWdleC5zb3VyY2UgKyBcIiRcIik7XG52YXIgZHRmQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gbWFrZURURih6b25lKSB7XG4gIGlmICghZHRmQ2FjaGVbem9uZV0pIHtcbiAgICBkdGZDYWNoZVt6b25lXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB6b25lLFxuICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgICAgc2Vjb25kOiBcIjItZGlnaXRcIlxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGR0ZkNhY2hlW3pvbmVdO1xufVxuXG52YXIgdHlwZVRvUG9zID0ge1xuICB5ZWFyOiAwLFxuICBtb250aDogMSxcbiAgZGF5OiAyLFxuICBob3VyOiAzLFxuICBtaW51dGU6IDQsXG4gIHNlY29uZDogNVxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIHZhciBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0KGRhdGUpLnJlcGxhY2UoL1xcdTIwMEUvZywgXCJcIiksXG4gICAgICBwYXJzZWQgPSAvKFxcZCspXFwvKFxcZCspXFwvKFxcZCspLD8gKFxcZCspOihcXGQrKTooXFxkKykvLmV4ZWMoZm9ybWF0dGVkKSxcbiAgICAgIGZNb250aCA9IHBhcnNlZFsxXSxcbiAgICAgIGZEYXkgPSBwYXJzZWRbMl0sXG4gICAgICBmWWVhciA9IHBhcnNlZFszXSxcbiAgICAgIGZIb3VyID0gcGFyc2VkWzRdLFxuICAgICAgZk1pbnV0ZSA9IHBhcnNlZFs1XSxcbiAgICAgIGZTZWNvbmQgPSBwYXJzZWRbNl07XG4gIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdO1xufVxuXG5mdW5jdGlvbiBwYXJ0c09mZnNldChkdGYsIGRhdGUpIHtcbiAgdmFyIGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXRUb1BhcnRzKGRhdGUpLFxuICAgICAgZmlsbGVkID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JtYXR0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2Zvcm1hdHRlZCRpID0gZm9ybWF0dGVkW2ldLFxuICAgICAgICB0eXBlID0gX2Zvcm1hdHRlZCRpLnR5cGUsXG4gICAgICAgIHZhbHVlID0gX2Zvcm1hdHRlZCRpLnZhbHVlLFxuICAgICAgICBwb3MgPSB0eXBlVG9Qb3NbdHlwZV07XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKHBvcykpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlsbGVkO1xufVxuXG52YXIgaWFuYVpvbmVDYWNoZSA9IHt9O1xuLyoqXG4gKiBBIHpvbmUgaWRlbnRpZmllZCBieSBhbiBJQU5BIGlkZW50aWZpZXIsIGxpa2UgQW1lcmljYS9OZXdfWW9ya1xuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cblxudmFyIElBTkFab25lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfWm9uZSkge1xuICBfaW5oZXJpdHNMb29zZShJQU5BWm9uZSwgX1pvbmUpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFpvbmUgbmFtZVxuICAgKiBAcmV0dXJuIHtJQU5BWm9uZX1cbiAgICovXG4gIElBTkFab25lLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShuYW1lKSB7XG4gICAgaWYgKCFpYW5hWm9uZUNhY2hlW25hbWVdKSB7XG4gICAgICBpYW5hWm9uZUNhY2hlW25hbWVdID0gbmV3IElBTkFab25lKG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBpYW5hWm9uZUNhY2hlW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCBsb2NhbCBjYWNoZXMuIFNob3VsZCBvbmx5IGJlIG5lY2Vzc2FyeSBpbiB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIDtcblxuICBJQU5BWm9uZS5yZXNldENhY2hlID0gZnVuY3Rpb24gcmVzZXRDYWNoZSgpIHtcbiAgICBpYW5hWm9uZUNhY2hlID0ge307XG4gICAgZHRmQ2FjaGUgPSB7fTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBzdHJpbmcgaXMgYSB2YWxpZCBzcGVjaWZpZXIuIFRoaXMgb25seSBjaGVja3MgdGhlIHN0cmluZydzIGZvcm1hdCwgbm90IHRoYXQgdGhlIHNwZWNpZmllciBpZGVudGlmaWVzIGEga25vd24gem9uZTsgc2VlIGlzVmFsaWRab25lIGZvciB0aGF0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBzdHJpbmcgdG8gY2hlY2sgdmFsaWRpdHkgb25cbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCByZXR1cm5zIGZhbHNlIHNvbWUgdmFsaWQgSUFOQSBuYW1lcy4gVXNlIGlzVmFsaWRab25lIGluc3RlYWRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyID0gZnVuY3Rpb24gaXNWYWxpZFNwZWNpZmllcihzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFpvbmUocyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgc3RyaW5nIGlkZW50aWZpZXMgYSByZWFsIHpvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBUaGUgc3RyaW5nIHRvIGNoZWNrXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiQW1lcmljYS9OZXdfWW9ya1wiKSAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJGYW50YXNpYS9DYXN0bGVcIikgLy89PiBmYWxzZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIlNwb3J0fn5ibG9ycFwiKSAvLz0+IGZhbHNlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgSUFOQVpvbmUuaXNWYWxpZFpvbmUgPSBmdW5jdGlvbiBpc1ZhbGlkWm9uZSh6b25lKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgICB0aW1lWm9uZTogem9uZVxuICAgICAgfSkuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIElBTkFab25lKG5hbWUpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9ab25lLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAvKiogQHByaXZhdGUgKiovXG5cbiAgICBfdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgX3RoaXMudmFsaWQgPSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShuYW1lKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cblxuXG4gIHZhciBfcHJvdG8gPSBJQU5BWm9uZS5wcm90b3R5cGU7XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgX3Byb3RvLm9mZnNldE5hbWUgPSBmdW5jdGlvbiBvZmZzZXROYW1lKHRzLCBfcmVmKSB7XG4gICAgdmFyIGZvcm1hdCA9IF9yZWYuZm9ybWF0LFxuICAgICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZTtcbiAgICByZXR1cm4gcGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUsIHRoaXMubmFtZSk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5mb3JtYXRPZmZzZXQgPSBmdW5jdGlvbiBmb3JtYXRPZmZzZXQkMSh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLm9mZnNldCh0cyksIGZvcm1hdCk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5vZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQodHMpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRzKTtcbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHJldHVybiBOYU47XG5cbiAgICB2YXIgZHRmID0gbWFrZURURih0aGlzLm5hbWUpLFxuICAgICAgICBfcmVmMiA9IGR0Zi5mb3JtYXRUb1BhcnRzID8gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSksXG4gICAgICAgIHllYXIgPSBfcmVmMlswXSxcbiAgICAgICAgbW9udGggPSBfcmVmMlsxXSxcbiAgICAgICAgZGF5ID0gX3JlZjJbMl0sXG4gICAgICAgIGhvdXIgPSBfcmVmMlszXSxcbiAgICAgICAgbWludXRlID0gX3JlZjJbNF0sXG4gICAgICAgIHNlY29uZCA9IF9yZWYyWzVdOyAvLyBiZWNhdXNlIHdlJ3JlIHVzaW5nIGhvdXIxMiBhbmQgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTAyNTU2NCZjYW49MiZxPSUyMjI0JTNBMDAlMjIlMjBkYXRldGltZWZvcm1hdFxuXG5cbiAgICB2YXIgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcbiAgICB2YXIgYXNVVEMgPSBvYmpUb0xvY2FsVFMoe1xuICAgICAgeWVhcjogeWVhcixcbiAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgIGRheTogZGF5LFxuICAgICAgaG91cjogYWRqdXN0ZWRIb3VyLFxuICAgICAgbWludXRlOiBtaW51dGUsXG4gICAgICBzZWNvbmQ6IHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kOiAwXG4gICAgfSk7XG4gICAgdmFyIGFzVFMgPSArZGF0ZTtcbiAgICB2YXIgb3ZlciA9IGFzVFMgJSAxMDAwO1xuICAgIGFzVFMgLT0gb3ZlciA+PSAwID8gb3ZlciA6IDEwMDAgKyBvdmVyO1xuICAgIHJldHVybiAoYXNVVEMgLSBhc1RTKSAvICg2MCAqIDEwMDApO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJpYW5hXCIgJiYgb3RoZXJab25lLm5hbWUgPT09IHRoaXMubmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKElBTkFab25lLCBbe1xuICAgIGtleTogXCJ0eXBlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gXCJpYW5hXCI7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzVW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJQU5BWm9uZTtcbn0oWm9uZSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xuLyoqXG4gKiBBIHpvbmUgd2l0aCBhIGZpeGVkIG9mZnNldCAobWVhbmluZyBubyBEU1QpXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG52YXIgRml4ZWRPZmZzZXRab25lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfWm9uZSkge1xuICBfaW5oZXJpdHNMb29zZShGaXhlZE9mZnNldFpvbmUsIF9ab25lKTtcblxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIHdpdGggYSBzcGVjaWZpZWQgb2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGluIG1pbnV0ZXNcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgRml4ZWRPZmZzZXRab25lLmluc3RhbmNlID0gZnVuY3Rpb24gaW5zdGFuY2Uob2Zmc2V0KSB7XG4gICAgcmV0dXJuIG9mZnNldCA9PT0gMCA/IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZSA6IG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIG9mIEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIGEgVVRDIG9mZnNldCBzdHJpbmcsIGxpa2UgXCJVVEMrNlwiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIG9mZnNldCBzdHJpbmcgdG8gcGFyc2VcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzA2XCIpXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQy02OjAwXCIpXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG4gIDtcblxuICBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIgPSBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihzKSB7XG4gICAgaWYgKHMpIHtcbiAgICAgIHZhciByID0gcy5tYXRjaCgvXnV0Yyg/OihbKy1dXFxkezEsMn0pKD86OihcXGR7Mn0pKT8pPyQvaSk7XG5cbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRml4ZWRPZmZzZXRab25lKHNpZ25lZE9mZnNldChyWzFdLCByWzJdKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gRml4ZWRPZmZzZXRab25lKG9mZnNldCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1pvbmUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cblxuICAgIF90aGlzLmZpeGVkID0gb2Zmc2V0O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZpeGVkT2Zmc2V0Wm9uZS5wcm90b3R5cGU7XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgX3Byb3RvLm9mZnNldE5hbWUgPSBmdW5jdGlvbiBvZmZzZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5mb3JtYXRPZmZzZXQgPSBmdW5jdGlvbiBmb3JtYXRPZmZzZXQkMSh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBmb3JtYXQpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBfcHJvdG8ub2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJmaXhlZFwiICYmIG90aGVyWm9uZS5maXhlZCA9PT0gdGhpcy5maXhlZDtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEZpeGVkT2Zmc2V0Wm9uZSwgW3tcbiAgICBrZXk6IFwidHlwZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFwiZml4ZWRcIjtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IFwiVVRDXCIgKyBmb3JtYXRPZmZzZXQodGhpcy5maXhlZCwgXCJuYXJyb3dcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwidXRjSW5zdGFuY2VcIixcbiAgICBnZXQ6XG4gICAgLyoqXG4gICAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIFVUQ1xuICAgICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICAgIHNpbmdsZXRvbiA9IG5ldyBGaXhlZE9mZnNldFpvbmUoMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW5nbGV0b247XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZTtcbn0oWm9uZSk7XG5cbi8qKlxuICogQSB6b25lIHRoYXQgZmFpbGVkIHRvIHBhcnNlLiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhpcy5cbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5cbnZhciBJbnZhbGlkWm9uZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1pvbmUpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZFpvbmUsIF9ab25lKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkWm9uZSh6b25lTmFtZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1pvbmUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICB2YXIgX3Byb3RvID0gSW52YWxpZFpvbmUucHJvdG90eXBlO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCgpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEludmFsaWRab25lLCBbe1xuICAgIGtleTogXCJ0eXBlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gXCJpbnZhbGlkXCI7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzVW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW52YWxpZFpvbmU7XG59KFpvbmUpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVpvbmUoaW5wdXQsIGRlZmF1bHRab25lKSB7XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSB8fCBpbnB1dCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBkZWZhdWx0Wm9uZTtcbiAgfSBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIFpvbmUpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcoaW5wdXQpKSB7XG4gICAgdmFyIGxvd2VyZWQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlcmVkID09PSBcImxvY2FsXCIgfHwgbG93ZXJlZCA9PT0gXCJzeXN0ZW1cIikgcmV0dXJuIGRlZmF1bHRab25lO2Vsc2UgaWYgKGxvd2VyZWQgPT09IFwidXRjXCIgfHwgbG93ZXJlZCA9PT0gXCJnbXRcIikgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZTtlbHNlIHJldHVybiBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIobG93ZXJlZCkgfHwgSUFOQVpvbmUuY3JlYXRlKGlucHV0KTtcbiAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICByZXR1cm4gRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKGlucHV0KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIgJiYgaW5wdXQub2Zmc2V0ICYmIHR5cGVvZiBpbnB1dC5vZmZzZXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAvLyBUaGlzIGlzIGR1bWIsIGJ1dCB0aGUgaW5zdGFuY2VvZiBjaGVjayBhYm92ZSBkb2Vzbid0IHNlZW0gdG8gcmVhbGx5IHdvcmtcbiAgICAvLyBzbyB3ZSdyZSBkdWNrIGNoZWNraW5nIGl0XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgSW52YWxpZFpvbmUoaW5wdXQpO1xuICB9XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufSxcbiAgICBkZWZhdWx0Wm9uZSA9IFwic3lzdGVtXCIsXG4gICAgZGVmYXVsdExvY2FsZSA9IG51bGwsXG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gICAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gbnVsbCxcbiAgICB0aHJvd09uSW52YWxpZDtcbi8qKlxuICogU2V0dGluZ3MgY29udGFpbnMgc3RhdGljIGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCBjb250cm9sIEx1eG9uJ3Mgb3ZlcmFsbCBiZWhhdmlvci4gTHV4b24gaXMgYSBzaW1wbGUgbGlicmFyeSB3aXRoIGZldyBvcHRpb25zLCBidXQgdGhlIG9uZXMgaXQgZG9lcyBoYXZlIGxpdmUgaGVyZS5cbiAqL1xuXG5cbnZhciBTZXR0aW5ncyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldHRpbmdzKCkge31cblxuICAvKipcbiAgICogUmVzZXQgTHV4b24ncyBnbG9iYWwgY2FjaGVzLiBTaG91bGQgb25seSBiZSBuZWNlc3NhcnkgaW4gdGVzdGluZyBzY2VuYXJpb3MuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBTZXR0aW5ncy5yZXNldENhY2hlcyA9IGZ1bmN0aW9uIHJlc2V0Q2FjaGVzKCkge1xuICAgIExvY2FsZS5yZXNldENhY2hlKCk7XG4gICAgSUFOQVpvbmUucmVzZXRDYWNoZSgpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTZXR0aW5ncywgbnVsbCwgW3tcbiAgICBrZXk6IFwibm93XCIsXG4gICAgZ2V0OlxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBub3c7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAgICogVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBudW1iZXIsIHdoaWNoIHdpbGwgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gRXBvY2ggbWlsbGlzZWNvbmQgY291bnRcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgICAqIEBleGFtcGxlIFNldHRpbmdzLm5vdyA9ICgpID0+IDAgLy8gYWx3YXlzIHByZXRlbmQgaXQncyBKYW4gMSwgMTk3MCBhdCBtaWRuaWdodCBpbiBVVEMgdGltZVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuKSB7XG4gICAgICBub3cgPSBuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgdGltZSB6b25lIHRvIGNyZWF0ZSBEYXRlVGltZXMgaW4uIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogVXNlIHRoZSB2YWx1ZSBcInN5c3RlbVwiIHRvIHJlc2V0IHRoaXMgdmFsdWUgdG8gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdFpvbmVcIixcbiAgICBnZXQ6XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSBvYmplY3QgY3VycmVudGx5IHVzZWQgdG8gY3JlYXRlIERhdGVUaW1lcy4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgc3lzdGVtJ3MgdGltZSB6b25lICh0aGUgb25lIHNldCBvbiB0aGUgbWFjaGluZSB0aGF0IHJ1bnMgdGhpcyBjb2RlKS5cbiAgICAgKiBAdHlwZSB7Wm9uZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplWm9uZShkZWZhdWx0Wm9uZSwgU3lzdGVtWm9uZS5pbnN0YW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHpvbmUpIHtcbiAgICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdExvY2FsZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2NhbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGxvY2FsZSkge1xuICAgICAgZGVmYXVsdExvY2FsZSA9IGxvY2FsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IG51bWJlcmluZyBzeXN0ZW0gdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZWZhdWx0TnVtYmVyaW5nU3lzdGVtXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IG51bWJlcmluZyBzeXN0ZW0gdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRPdXRwdXRDYWxlbmRhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3V0cHV0Q2FsZW5kYXIpIHtcbiAgICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgd2hldGhlciBMdXhvbiB3aWxsIHRocm93IHdoZW4gaXQgZW5jb3VudGVycyBpbnZhbGlkIERhdGVUaW1lcywgRHVyYXRpb25zLCBvciBJbnRlcnZhbHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRocm93T25JbnZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhyb3dPbkludmFsaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0KSB7XG4gICAgICB0aHJvd09uSW52YWxpZCA9IHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNldHRpbmdzO1xufSgpO1xuXG52YXIgX2V4Y2x1ZGVkID0gW1wiYmFzZVwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wicGFkVG9cIiwgXCJmbG9vclwiXTtcblxudmFyIGludGxMRkNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZExGKGxvY1N0cmluZywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgdmFyIGR0ZiA9IGludGxMRkNhY2hlW2tleV07XG5cbiAgaWYgKCFkdGYpIHtcbiAgICBkdGYgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bExGQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbnZhciBpbnRsRFRDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDYWNoZWREVEYobG9jU3RyaW5nLCBvcHRzKSB7XG4gIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICBvcHRzID0ge307XG4gIH1cblxuICB2YXIga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICB2YXIgZHRmID0gaW50bERUQ2FjaGVba2V5XTtcblxuICBpZiAoIWR0Zikge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bERUQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuXG4gIHJldHVybiBkdGY7XG59XG5cbnZhciBpbnRsTnVtQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q2FjaGVkSU5GKGxvY1N0cmluZywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgdmFyIGluZiA9IGludGxOdW1DYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bE51bUNhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG52YXIgaW50bFJlbENhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZFJURihsb2NTdHJpbmcsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0cyA9IG9wdHM7XG4gICAgICBfb3B0cy5iYXNlO1xuICAgICAgdmFyIGNhY2hlS2V5T3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9vcHRzLCBfZXhjbHVkZWQpOyAvLyBleGNsdWRlIGBiYXNlYCBmcm9tIHRoZSBvcHRpb25zXG5cblxuICB2YXIga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgY2FjaGVLZXlPcHRzXSk7XG4gIHZhciBpbmYgPSBpbnRsUmVsQ2FjaGVba2V5XTtcblxuICBpZiAoIWluZikge1xuICAgIGluZiA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxSZWxDYWNoZVtrZXldID0gaW5mO1xuICB9XG5cbiAgcmV0dXJuIGluZjtcbn1cblxudmFyIHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcblxuZnVuY3Rpb24gc3lzdGVtTG9jYWxlKCkge1xuICBpZiAoc3lzTG9jYWxlQ2FjaGUpIHtcbiAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7XG4gIH0gZWxzZSB7XG4gICAgc3lzTG9jYWxlQ2FjaGUgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZTtcbiAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlU3RyKSB7XG4gIC8vIEkgcmVhbGx5IHdhbnQgdG8gYXZvaWQgd3JpdGluZyBhIEJDUCA0NyBwYXJzZXJcbiAgLy8gc2VlLCBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vYmNwLTQ3XG4gIC8vIEluc3RlYWQsIHdlJ2xsIGRvIHRoaXM6XG4gIC8vIGEpIGlmIHRoZSBzdHJpbmcgaGFzIG5vIC11IGV4dGVuc2lvbnMsIGp1c3QgbGVhdmUgaXQgYWxvbmVcbiAgLy8gYikgaWYgaXQgZG9lcywgdXNlIEludGwgdG8gcmVzb2x2ZSBldmVyeXRoaW5nXG4gIC8vIGMpIGlmIEludGwgZmFpbHMsIHRyeSBhZ2FpbiB3aXRob3V0IHRoZSAtdVxuICB2YXIgdUluZGV4ID0gbG9jYWxlU3RyLmluZGV4T2YoXCItdS1cIik7XG5cbiAgaWYgKHVJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gW2xvY2FsZVN0cl07XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG5cbiAgICB0cnkge1xuICAgICAgb3B0aW9ucyA9IGdldENhY2hlZERURihsb2NhbGVTdHIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYoc21hbGxlcikucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX29wdGlvbnMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBjYWxlbmRhciA9IF9vcHRpb25zLmNhbGVuZGFyOyAvLyByZXR1cm4gdGhlIHNtYWxsZXIgb25lIHNvIHRoYXQgd2UgY2FuIGFwcGVuZCB0aGUgY2FsZW5kYXIgYW5kIG51bWJlcmluZyBvdmVycmlkZXMgdG8gaXRcblxuICAgIHJldHVybiBbc21hbGxlciwgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhcl07XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50bENvbmZpZ1N0cmluZyhsb2NhbGVTdHIsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpIHtcbiAgaWYgKG91dHB1dENhbGVuZGFyIHx8IG51bWJlcmluZ1N5c3RlbSkge1xuICAgIGxvY2FsZVN0ciArPSBcIi11XCI7XG5cbiAgICBpZiAob3V0cHV0Q2FsZW5kYXIpIHtcbiAgICAgIGxvY2FsZVN0ciArPSBcIi1jYS1cIiArIG91dHB1dENhbGVuZGFyO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJpbmdTeXN0ZW0pIHtcbiAgICAgIGxvY2FsZVN0ciArPSBcIi1udS1cIiArIG51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2NhbGVTdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwTW9udGhzKGYpIHtcbiAgdmFyIG1zID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMTI7IGkrKykge1xuICAgIHZhciBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCBpLCAxKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuXG4gIHJldHVybiBtcztcbn1cblxuZnVuY3Rpb24gbWFwV2Vla2RheXMoZikge1xuICB2YXIgbXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSA3OyBpKyspIHtcbiAgICB2YXIgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzICsgaSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cblxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIGxpc3RTdHVmZihsb2MsIGxlbmd0aCwgZGVmYXVsdE9LLCBlbmdsaXNoRm4sIGludGxGbikge1xuICB2YXIgbW9kZSA9IGxvYy5saXN0aW5nTW9kZShkZWZhdWx0T0spO1xuXG4gIGlmIChtb2RlID09PSBcImVycm9yXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChtb2RlID09PSBcImVuXCIpIHtcbiAgICByZXR1cm4gZW5nbGlzaEZuKGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGludGxGbihsZW5ndGgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzRmFzdE51bWJlcnMobG9jKSB7XG4gIGlmIChsb2MubnVtYmVyaW5nU3lzdGVtICYmIGxvYy5udW1iZXJpbmdTeXN0ZW0gIT09IFwibGF0blwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2MubnVtYmVyaW5nU3lzdGVtID09PSBcImxhdG5cIiB8fCAhbG9jLmxvY2FsZSB8fCBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoXCJlblwiKSB8fCBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2MuaW50bCkucmVzb2x2ZWRPcHRpb25zKCkubnVtYmVyaW5nU3lzdGVtID09PSBcImxhdG5cIjtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFBvbHlOdW1iZXJGb3JtYXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2x5TnVtYmVyRm9ybWF0dGVyKGludGwsIGZvcmNlU2ltcGxlLCBvcHRzKSB7XG4gICAgdGhpcy5wYWRUbyA9IG9wdHMucGFkVG8gfHwgMDtcbiAgICB0aGlzLmZsb29yID0gb3B0cy5mbG9vciB8fCBmYWxzZTtcblxuICAgIG9wdHMucGFkVG87XG4gICAgICAgIG9wdHMuZmxvb3I7XG4gICAgICAgIHZhciBvdGhlck9wdHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRzLCBfZXhjbHVkZWQyKTtcblxuICAgIGlmICghZm9yY2VTaW1wbGUgfHwgT2JqZWN0LmtleXMob3RoZXJPcHRzKS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgaW50bE9wdHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHVzZUdyb3VwaW5nOiBmYWxzZVxuICAgICAgfSwgb3B0cyk7XG5cbiAgICAgIGlmIChvcHRzLnBhZFRvID4gMCkgaW50bE9wdHMubWluaW11bUludGVnZXJEaWdpdHMgPSBvcHRzLnBhZFRvO1xuICAgICAgdGhpcy5pbmYgPSBnZXRDYWNoZWRJTkYoaW50bCwgaW50bE9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQb2x5TnVtYmVyRm9ybWF0dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZm9ybWF0ID0gZnVuY3Rpb24gZm9ybWF0KGkpIHtcbiAgICBpZiAodGhpcy5pbmYpIHtcbiAgICAgIHZhciBmaXhlZCA9IHRoaXMuZmxvb3IgPyBNYXRoLmZsb29yKGkpIDogaTtcbiAgICAgIHJldHVybiB0aGlzLmluZi5mb3JtYXQoZml4ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0byBtYXRjaCB0aGUgYnJvd3NlcidzIG51bWJlcmZvcm1hdHRlciBkZWZhdWx0c1xuICAgICAgdmFyIF9maXhlZCA9IHRoaXMuZmxvb3IgPyBNYXRoLmZsb29yKGkpIDogcm91bmRUbyhpLCAzKTtcblxuICAgICAgcmV0dXJuIHBhZFN0YXJ0KF9maXhlZCwgdGhpcy5wYWRUbyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQb2x5TnVtYmVyRm9ybWF0dGVyO1xufSgpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFBvbHlEYXRlRm9ybWF0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUG9seURhdGVGb3JtYXR0ZXIoZHQsIGludGwsIG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHZhciB6O1xuXG4gICAgaWYgKGR0LnpvbmUuaXNVbml2ZXJzYWwpIHtcbiAgICAgIC8vIFVUQy04IG9yIEV0Yy9VVEMtOCBhcmUgbm90IHBhcnQgb2YgdHpkYXRhLCBvbmx5IEV0Yy9HTVQrOCBhbmQgdGhlIGxpa2UuXG4gICAgICAvLyBUaGF0IGlzIHdoeSBmaXhlZC1vZmZzZXQgVFogaXMgc2V0IHRvIHRoYXQgdW5sZXNzIGl0IGlzOlxuICAgICAgLy8gMS4gUmVwcmVzZW50aW5nIG9mZnNldCAwIHdoZW4gVVRDIGlzIHVzZWQgdG8gbWFpbnRhaW4gcHJldmlvdXMgYmVoYXZpb3IgYW5kIGRvZXMgbm90IGJlY29tZSBHTVQuXG4gICAgICAvLyAyLiBVbnN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcjpcbiAgICAgIC8vICAgIC0gc29tZSBkbyBub3Qgc3VwcG9ydCBFdGMvXG4gICAgICAvLyAgICAtIDwgRXRjL0dNVC0xNCwgPiBFdGMvR01UKzEyLCBhbmQgMzAtbWludXRlIG9yIDQ1LW1pbnV0ZSBvZmZzZXRzIGFyZSBub3QgcGFydCBvZiB0emRhdGFcbiAgICAgIHZhciBnbXRPZmZzZXQgPSAtMSAqIChkdC5vZmZzZXQgLyA2MCk7XG4gICAgICB2YXIgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gXCJFdGMvR01UK1wiICsgZ210T2Zmc2V0IDogXCJFdGMvR01UXCIgKyBnbXRPZmZzZXQ7XG5cbiAgICAgIGlmIChkdC5vZmZzZXQgIT09IDAgJiYgSUFOQVpvbmUuY3JlYXRlKG9mZnNldFopLnZhbGlkKSB7XG4gICAgICAgIHogPSBvZmZzZXRaO1xuICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3QgYWxsIGZpeGVkLW9mZnNldCB6b25lcyBsaWtlIEV0Yy8rNDozMCBhcmUgcHJlc2VudCBpbiB0emRhdGEuXG4gICAgICAgIC8vIFNvIHdlIGhhdmUgdG8gbWFrZSBkby4gVHdvIGNhc2VzOlxuICAgICAgICAvLyAxLiBUaGUgZm9ybWF0IG9wdGlvbnMgdGVsbCB1cyB0byBzaG93IHRoZSB6b25lLiBXZSBjYW4ndCBkbyB0aGF0LCBzbyB0aGUgYmVzdFxuICAgICAgICAvLyB3ZSBjYW4gZG8gaXMgZm9ybWF0IHRoZSBkYXRlIGluIFVUQy5cbiAgICAgICAgLy8gMi4gVGhlIGZvcm1hdCBvcHRpb25zIGRvbid0IHRlbGwgdXMgdG8gc2hvdyB0aGUgem9uZS4gVGhlbiB3ZSBjYW4gYWRqdXN0IHRoZW1cbiAgICAgICAgLy8gdGhlIHRpbWUgYW5kIHRlbGwgdGhlIGZvcm1hdHRlciB0byBzaG93IGl0IHRvIHVzIGluIFVUQywgc28gdGhhdCB0aGUgdGltZSBpcyByaWdodFxuICAgICAgICAvLyBhbmQgdGhlIGJhZCB6b25lIGRvZXNuJ3Qgc2hvdyB1cC5cbiAgICAgICAgeiA9IFwiVVRDXCI7XG5cbiAgICAgICAgaWYgKG9wdHMudGltZVpvbmVOYW1lKSB7XG4gICAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZHQgPSBkdC5vZmZzZXQgPT09IDAgPyBkdCA6IERhdGVUaW1lLmZyb21NaWxsaXMoZHQudHMgKyBkdC5vZmZzZXQgKiA2MCAqIDEwMDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgeiA9IGR0LnpvbmUubmFtZTtcbiAgICB9XG5cbiAgICB2YXIgaW50bE9wdHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRzKTtcblxuICAgIGlmICh6KSB7XG4gICAgICBpbnRsT3B0cy50aW1lWm9uZSA9IHo7XG4gICAgfVxuXG4gICAgdGhpcy5kdGYgPSBnZXRDYWNoZWREVEYoaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBQb2x5RGF0ZUZvcm1hdHRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5mb3JtYXQgPSBmdW5jdGlvbiBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRmLmZvcm1hdCh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICB9O1xuXG4gIF9wcm90bzIuZm9ybWF0VG9QYXJ0cyA9IGZ1bmN0aW9uIGZvcm1hdFRvUGFydHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRmLmZvcm1hdFRvUGFydHModGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlc29sdmVkT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVkT3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH07XG5cbiAgcmV0dXJuIFBvbHlEYXRlRm9ybWF0dGVyO1xufSgpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFBvbHlSZWxGb3JtYXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2x5UmVsRm9ybWF0dGVyKGludGwsIGlzRW5nbGlzaCwgb3B0cykge1xuICAgIHRoaXMub3B0cyA9IF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBcImxvbmdcIlxuICAgIH0sIG9wdHMpO1xuXG4gICAgaWYgKCFpc0VuZ2xpc2ggJiYgaGFzUmVsYXRpdmUoKSkge1xuICAgICAgdGhpcy5ydGYgPSBnZXRDYWNoZWRSVEYoaW50bCwgb3B0cyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBQb2x5UmVsRm9ybWF0dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmZvcm1hdCA9IGZ1bmN0aW9uIGZvcm1hdChjb3VudCwgdW5pdCkge1xuICAgIGlmICh0aGlzLnJ0Zikge1xuICAgICAgcmV0dXJuIHRoaXMucnRmLmZvcm1hdChjb3VudCwgdW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIHRoaXMub3B0cy5udW1lcmljLCB0aGlzLm9wdHMuc3R5bGUgIT09IFwibG9uZ1wiKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5mb3JtYXRUb1BhcnRzID0gZnVuY3Rpb24gZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCkge1xuICAgIGlmICh0aGlzLnJ0Zikge1xuICAgICAgcmV0dXJuIHRoaXMucnRmLmZvcm1hdFRvUGFydHMoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQb2x5UmVsRm9ybWF0dGVyO1xufSgpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIExvY2FsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIExvY2FsZS5mcm9tT3B0cyA9IGZ1bmN0aW9uIGZyb21PcHRzKG9wdHMpIHtcbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShvcHRzLmxvY2FsZSwgb3B0cy5udW1iZXJpbmdTeXN0ZW0sIG9wdHMub3V0cHV0Q2FsZW5kYXIsIG9wdHMuZGVmYXVsdFRvRU4pO1xuICB9O1xuXG4gIExvY2FsZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyLCBkZWZhdWx0VG9FTikge1xuICAgIGlmIChkZWZhdWx0VG9FTiA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZhdWx0VG9FTiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzcGVjaWZpZWRMb2NhbGUgPSBsb2NhbGUgfHwgU2V0dGluZ3MuZGVmYXVsdExvY2FsZTsgLy8gdGhlIHN5c3RlbSBsb2NhbGUgaXMgdXNlZnVsIGZvciBodW1hbiByZWFkYWJsZSBzdHJpbmdzIGJ1dCBhbm5veWluZyBmb3IgcGFyc2luZy9mb3JtYXR0aW5nIGtub3duIGZvcm1hdHNcblxuICAgIHZhciBsb2NhbGVSID0gc3BlY2lmaWVkTG9jYWxlIHx8IChkZWZhdWx0VG9FTiA/IFwiZW4tVVNcIiA6IHN5c3RlbUxvY2FsZSgpKTtcbiAgICB2YXIgbnVtYmVyaW5nU3lzdGVtUiA9IG51bWJlcmluZ1N5c3RlbSB8fCBTZXR0aW5ncy5kZWZhdWx0TnVtYmVyaW5nU3lzdGVtO1xuICAgIHZhciBvdXRwdXRDYWxlbmRhclIgPSBvdXRwdXRDYWxlbmRhciB8fCBTZXR0aW5ncy5kZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gICAgcmV0dXJuIG5ldyBMb2NhbGUobG9jYWxlUiwgbnVtYmVyaW5nU3lzdGVtUiwgb3V0cHV0Q2FsZW5kYXJSLCBzcGVjaWZpZWRMb2NhbGUpO1xuICB9O1xuXG4gIExvY2FsZS5yZXNldENhY2hlID0gZnVuY3Rpb24gcmVzZXRDYWNoZSgpIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG51bGw7XG4gICAgaW50bERUQ2FjaGUgPSB7fTtcbiAgICBpbnRsTnVtQ2FjaGUgPSB7fTtcbiAgICBpbnRsUmVsQ2FjaGUgPSB7fTtcbiAgfTtcblxuICBMb2NhbGUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZi5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG91dHB1dENhbGVuZGFyID0gX3JlZi5vdXRwdXRDYWxlbmRhcjtcblxuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcik7XG4gIH07XG5cbiAgZnVuY3Rpb24gTG9jYWxlKGxvY2FsZSwgbnVtYmVyaW5nLCBvdXRwdXRDYWxlbmRhciwgc3BlY2lmaWVkTG9jYWxlKSB7XG4gICAgdmFyIF9wYXJzZUxvY2FsZVN0cmluZyA9IHBhcnNlTG9jYWxlU3RyaW5nKGxvY2FsZSksXG4gICAgICAgIHBhcnNlZExvY2FsZSA9IF9wYXJzZUxvY2FsZVN0cmluZ1swXSxcbiAgICAgICAgcGFyc2VkTnVtYmVyaW5nU3lzdGVtID0gX3BhcnNlTG9jYWxlU3RyaW5nWzFdLFxuICAgICAgICBwYXJzZWRPdXRwdXRDYWxlbmRhciA9IF9wYXJzZUxvY2FsZVN0cmluZ1syXTtcblxuICAgIHRoaXMubG9jYWxlID0gcGFyc2VkTG9jYWxlO1xuICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gbnVtYmVyaW5nIHx8IHBhcnNlZE51bWJlcmluZ1N5c3RlbSB8fCBudWxsO1xuICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsO1xuICAgIHRoaXMuaW50bCA9IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKTtcbiAgICB0aGlzLndlZWtkYXlzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubW9udGhzQ2FjaGUgPSB7XG4gICAgICBmb3JtYXQ6IHt9LFxuICAgICAgc3RhbmRhbG9uZToge31cbiAgICB9O1xuICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7XG4gICAgdGhpcy5lcmFDYWNoZSA9IHt9O1xuICAgIHRoaXMuc3BlY2lmaWVkTG9jYWxlID0gc3BlY2lmaWVkTG9jYWxlO1xuICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubGlzdGluZ01vZGUgPSBmdW5jdGlvbiBsaXN0aW5nTW9kZSgpIHtcbiAgICB2YXIgaXNBY3R1YWxseUVuID0gdGhpcy5pc0VuZ2xpc2goKTtcbiAgICB2YXIgaGFzTm9XZWlyZG5lc3MgPSAodGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG51bGwgfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IFwibGF0blwiKSAmJiAodGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gbnVsbCB8fCB0aGlzLm91dHB1dENhbGVuZGFyID09PSBcImdyZWdvcnlcIik7XG4gICAgcmV0dXJuIGlzQWN0dWFsbHlFbiAmJiBoYXNOb1dlaXJkbmVzcyA/IFwiZW5cIiA6IFwiaW50bFwiO1xuICB9O1xuXG4gIF9wcm90bzQuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZShhbHRzKSB7XG4gICAgaWYgKCFhbHRzIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFsdHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGFsdHMubG9jYWxlIHx8IHRoaXMuc3BlY2lmaWVkTG9jYWxlLCBhbHRzLm51bWJlcmluZ1N5c3RlbSB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgYWx0cy5vdXRwdXRDYWxlbmRhciB8fCB0aGlzLm91dHB1dENhbGVuZGFyLCBhbHRzLmRlZmF1bHRUb0VOIHx8IGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNC5yZWRlZmF1bHRUb0VOID0gZnVuY3Rpb24gcmVkZWZhdWx0VG9FTihhbHRzKSB7XG4gICAgaWYgKGFsdHMgPT09IHZvaWQgMCkge1xuICAgICAgYWx0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNsb25lKF9leHRlbmRzKHt9LCBhbHRzLCB7XG4gICAgICBkZWZhdWx0VG9FTjogdHJ1ZVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG80LnJlZGVmYXVsdFRvU3lzdGVtID0gZnVuY3Rpb24gcmVkZWZhdWx0VG9TeXN0ZW0oYWx0cykge1xuICAgIGlmIChhbHRzID09PSB2b2lkIDApIHtcbiAgICAgIGFsdHMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jbG9uZShfZXh0ZW5kcyh7fSwgYWx0cywge1xuICAgICAgZGVmYXVsdFRvRU46IGZhbHNlXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90bzQubW9udGhzID0gZnVuY3Rpb24gbW9udGhzJDEobGVuZ3RoLCBmb3JtYXQsIGRlZmF1bHRPSykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoZm9ybWF0ID09PSB2b2lkIDApIHtcbiAgICAgIGZvcm1hdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0T0sgPT09IHZvaWQgMCkge1xuICAgICAgZGVmYXVsdE9LID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCBtb250aHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbnRsID0gZm9ybWF0ID8ge1xuICAgICAgICBtb250aDogbGVuZ3RoLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICBtb250aDogbGVuZ3RoXG4gICAgICB9LFxuICAgICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/IFwiZm9ybWF0XCIgOiBcInN0YW5kYWxvbmVcIjtcblxuICAgICAgaWYgKCFfdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0pIHtcbiAgICAgICAgX3RoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwTW9udGhzKGZ1bmN0aW9uIChkdCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcIm1vbnRoXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG80LndlZWtkYXlzID0gZnVuY3Rpb24gd2Vla2RheXMkMShsZW5ndGgsIGZvcm1hdCwgZGVmYXVsdE9LKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAoZm9ybWF0ID09PSB2b2lkIDApIHtcbiAgICAgIGZvcm1hdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0T0sgPT09IHZvaWQgMCkge1xuICAgICAgZGVmYXVsdE9LID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCB3ZWVrZGF5cywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGludGwgPSBmb3JtYXQgPyB7XG4gICAgICAgIHdlZWtkYXk6IGxlbmd0aCxcbiAgICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICAgIG1vbnRoOiBcImxvbmdcIixcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgfSA6IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoXG4gICAgICB9LFxuICAgICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/IFwiZm9ybWF0XCIgOiBcInN0YW5kYWxvbmVcIjtcblxuICAgICAgaWYgKCFfdGhpczIud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0pIHtcbiAgICAgICAgX3RoaXMyLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5leHRyYWN0KGR0LCBpbnRsLCBcIndlZWtkYXlcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMyLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzQubWVyaWRpZW1zID0gZnVuY3Rpb24gbWVyaWRpZW1zJDEoZGVmYXVsdE9LKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAoZGVmYXVsdE9LID09PSB2b2lkIDApIHtcbiAgICAgIGRlZmF1bHRPSyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCB1bmRlZmluZWQsIGRlZmF1bHRPSywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1lcmlkaWVtcztcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBJbiB0aGVvcnkgdGhlcmUgY291bGQgYmUgYXJpYml0cmFyeSBkYXkgcGVyaW9kcy4gV2UncmUgZ29ubmEgYXNzdW1lIHRoZXJlIGFyZSBleGFjdGx5IHR3b1xuICAgICAgLy8gZm9yIEFNIGFuZCBQTS4gVGhpcyBpcyBwcm9iYWJseSB3cm9uZywgYnV0IGl0J3MgbWFrZXMgcGFyc2luZyB3YXkgZWFzaWVyLlxuICAgICAgaWYgKCFfdGhpczMubWVyaWRpZW1DYWNoZSkge1xuICAgICAgICB2YXIgaW50bCA9IHtcbiAgICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgICBob3VyQ3ljbGU6IFwiaDEyXCJcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMzLm1lcmlkaWVtQ2FjaGUgPSBbRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgOSksIERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDE5KV0ubWFwKGZ1bmN0aW9uIChkdCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuZXh0cmFjdChkdCwgaW50bCwgXCJkYXlwZXJpb2RcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMzLm1lcmlkaWVtQ2FjaGU7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvNC5lcmFzID0gZnVuY3Rpb24gZXJhcyQxKGxlbmd0aCwgZGVmYXVsdE9LKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAoZGVmYXVsdE9LID09PSB2b2lkIDApIHtcbiAgICAgIGRlZmF1bHRPSyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgZXJhcywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGludGwgPSB7XG4gICAgICAgIGVyYTogbGVuZ3RoXG4gICAgICB9OyAvLyBUaGlzIGlzIHByb2JsZW1hdGljLiBEaWZmZXJlbnQgY2FsZW5kYXJzIGFyZSBnb2luZyB0byBkZWZpbmUgZXJhcyB0b3RhbGx5IGRpZmZlcmVudGx5LiBXaGF0IEkgbmVlZCBpcyB0aGUgbWluaW11bSBzZXQgb2YgZGF0ZXNcbiAgICAgIC8vIHRvIGRlZmluaXRlbHkgZW51bWVyYXRlIHRoZW0uXG5cbiAgICAgIGlmICghX3RoaXM0LmVyYUNhY2hlW2xlbmd0aF0pIHtcbiAgICAgICAgX3RoaXM0LmVyYUNhY2hlW2xlbmd0aF0gPSBbRGF0ZVRpbWUudXRjKC00MCwgMSwgMSksIERhdGVUaW1lLnV0YygyMDE3LCAxLCAxKV0ubWFwKGZ1bmN0aW9uIChkdCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQuZXh0cmFjdChkdCwgaW50bCwgXCJlcmFcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXM0LmVyYUNhY2hlW2xlbmd0aF07XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvNC5leHRyYWN0ID0gZnVuY3Rpb24gZXh0cmFjdChkdCwgaW50bE9wdHMsIGZpZWxkKSB7XG4gICAgdmFyIGRmID0gdGhpcy5kdEZvcm1hdHRlcihkdCwgaW50bE9wdHMpLFxuICAgICAgICByZXN1bHRzID0gZGYuZm9ybWF0VG9QYXJ0cygpLFxuICAgICAgICBtYXRjaGluZyA9IHJlc3VsdHMuZmluZChmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0udHlwZS50b0xvd2VyQ2FzZSgpID09PSBmaWVsZDtcbiAgICB9KTtcbiAgICByZXR1cm4gbWF0Y2hpbmcgPyBtYXRjaGluZy52YWx1ZSA6IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvNC5udW1iZXJGb3JtYXR0ZXIgPSBmdW5jdGlvbiBudW1iZXJGb3JtYXR0ZXIob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGZvcmNlc2ltcGxlIG9wdGlvbiBpcyBuZXZlciB1c2VkICh0aGUgb25seSBjYWxsZXIgc2hvcnQtY2lyY3VpdHMgb24gaXQsIGJ1dCBpdCBzZWVtcyBzYWZlciB0byBsZWF2ZSlcbiAgICAvLyAoaW4gY29udHJhc3QsIHRoZSByZXN0IG9mIHRoZSBjb25kaXRpb24gaXMgdXNlZCBoZWF2aWx5KVxuICAgIHJldHVybiBuZXcgUG9seU51bWJlckZvcm1hdHRlcih0aGlzLmludGwsIG9wdHMuZm9yY2VTaW1wbGUgfHwgdGhpcy5mYXN0TnVtYmVycywgb3B0cyk7XG4gIH07XG5cbiAgX3Byb3RvNC5kdEZvcm1hdHRlciA9IGZ1bmN0aW9uIGR0Rm9ybWF0dGVyKGR0LCBpbnRsT3B0cykge1xuICAgIGlmIChpbnRsT3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRsT3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUG9seURhdGVGb3JtYXR0ZXIoZHQsIHRoaXMuaW50bCwgaW50bE9wdHMpO1xuICB9O1xuXG4gIF9wcm90bzQucmVsRm9ybWF0dGVyID0gZnVuY3Rpb24gcmVsRm9ybWF0dGVyKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQb2x5UmVsRm9ybWF0dGVyKHRoaXMuaW50bCwgdGhpcy5pc0VuZ2xpc2goKSwgb3B0cyk7XG4gIH07XG5cbiAgX3Byb3RvNC5saXN0Rm9ybWF0dGVyID0gZnVuY3Rpb24gbGlzdEZvcm1hdHRlcihvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBnZXRDYWNoZWRMRih0aGlzLmludGwsIG9wdHMpO1xuICB9O1xuXG4gIF9wcm90bzQuaXNFbmdsaXNoID0gZnVuY3Rpb24gaXNFbmdsaXNoKCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZSA9PT0gXCJlblwiIHx8IHRoaXMubG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09IFwiZW4tdXNcIiB8fCBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLmludGwpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZS5zdGFydHNXaXRoKFwiZW4tdXNcIik7XG4gIH07XG5cbiAgX3Byb3RvNC5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUgPT09IG90aGVyLmxvY2FsZSAmJiB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gb3RoZXIubnVtYmVyaW5nU3lzdGVtICYmIHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IG90aGVyLm91dHB1dENhbGVuZGFyO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbGUsIFt7XG4gICAga2V5OiBcImZhc3ROdW1iZXJzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBzdXBwb3J0c0Zhc3ROdW1iZXJzKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mYXN0TnVtYmVyc0NhY2hlZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxlO1xufSgpO1xuXG4vKlxuICogVGhpcyBmaWxlIGhhbmRsZXMgcGFyc2luZyBmb3Igd2VsbC1zcGVjaWZpZWQgZm9ybWF0cy4gSGVyZSdzIGhvdyBpdCB3b3JrczpcbiAqIFR3byB0aGluZ3MgZ28gaW50byBwYXJzaW5nOiBhIHJlZ2V4IHRvIG1hdGNoIHdpdGggYW5kIGFuIGV4dHJhY3RvciB0byB0YWtlIGFwYXJ0IHRoZSBncm91cHMgaW4gdGhlIG1hdGNoLlxuICogQW4gZXh0cmFjdG9yIGlzIGp1c3QgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgcmVnZXggbWF0Y2ggYXJyYXkgYW5kIHJldHVybnMgYSB7IHllYXI6IC4uLiwgbW9udGg6IC4uLiB9IG9iamVjdFxuICogcGFyc2UoKSBkb2VzIHRoZSB3b3JrIG9mIGV4ZWN1dGluZyB0aGUgcmVnZXggYW5kIGFwcGx5aW5nIHRoZSBleHRyYWN0b3IuIEl0IHRha2VzIG11bHRpcGxlIHJlZ2V4L2V4dHJhY3RvciBwYWlycyB0byB0cnkgaW4gc2VxdWVuY2UuXG4gKiBFeHRyYWN0b3JzIGNhbiB0YWtlIGEgXCJjdXJzb3JcIiByZXByZXNlbnRpbmcgdGhlIG9mZnNldCBpbiB0aGUgbWF0Y2ggdG8gbG9vayBhdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIGNvbWJpbmUgZXh0cmFjdG9ycy5cbiAqIGNvbWJpbmVFeHRyYWN0b3JzKCkgZG9lcyB0aGUgd29yayBvZiBjb21iaW5pbmcgdGhlbSwga2VlcGluZyB0cmFjayBvZiB0aGUgY3Vyc29yIHRocm91Z2ggbXVsdGlwbGUgZXh0cmFjdGlvbnMuXG4gKiBTb21lIGV4dHJhY3Rpb25zIGFyZSBzdXBlciBkdW1iIGFuZCBzaW1wbGVQYXJzZSBhbmQgZnJvbVN0cmluZ3MgaGVscCBEUlkgdGhlbS5cbiAqL1xuXG5mdW5jdGlvbiBjb21iaW5lUmVnZXhlcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZ2V4ZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVnZXhlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBmdWxsID0gcmVnZXhlcy5yZWR1Y2UoZnVuY3Rpb24gKGYsIHIpIHtcbiAgICByZXR1cm4gZiArIHIuc291cmNlO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIFJlZ0V4cChcIl5cIiArIGZ1bGwgKyBcIiRcIik7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVFeHRyYWN0b3JzKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGV4dHJhY3RvcnMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBleHRyYWN0b3JzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gZXh0cmFjdG9ycy5yZWR1Y2UoZnVuY3Rpb24gKF9yZWYsIGV4KSB7XG4gICAgICB2YXIgbWVyZ2VkVmFscyA9IF9yZWZbMF0sXG4gICAgICAgICAgbWVyZ2VkWm9uZSA9IF9yZWZbMV0sXG4gICAgICAgICAgY3Vyc29yID0gX3JlZlsyXTtcblxuICAgICAgdmFyIF9leCA9IGV4KG0sIGN1cnNvciksXG4gICAgICAgICAgdmFsID0gX2V4WzBdLFxuICAgICAgICAgIHpvbmUgPSBfZXhbMV0sXG4gICAgICAgICAgbmV4dCA9IF9leFsyXTtcblxuICAgICAgcmV0dXJuIFtfZXh0ZW5kcyh7fSwgbWVyZ2VkVmFscywgdmFsKSwgbWVyZ2VkWm9uZSB8fCB6b25lLCBuZXh0XTtcbiAgICB9LCBbe30sIG51bGwsIDFdKS5zbGljZSgwLCAyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2Uocykge1xuICBpZiAocyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcGF0dGVybnMgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIHBhdHRlcm5zW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgZm9yICh2YXIgX2kgPSAwLCBfcGF0dGVybnMgPSBwYXR0ZXJuczsgX2kgPCBfcGF0dGVybnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIF9wYXR0ZXJucyRfaSA9IF9wYXR0ZXJuc1tfaV0sXG4gICAgICAgIHJlZ2V4ID0gX3BhdHRlcm5zJF9pWzBdLFxuICAgICAgICBleHRyYWN0b3IgPSBfcGF0dGVybnMkX2lbMV07XG4gICAgdmFyIG0gPSByZWdleC5leGVjKHMpO1xuXG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiBleHRyYWN0b3IobSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtudWxsLCBudWxsXTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlUGFyc2UoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwga2V5cyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGtleXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGN1cnNvcikge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRba2V5c1tpXV0gPSBwYXJzZUludGVnZXIobWF0Y2hbY3Vyc29yICsgaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBbcmV0LCBudWxsLCBjdXJzb3IgKyBpXTtcbiAgfTtcbn0gLy8gSVNPIGFuZCBTUUwgcGFyc2luZ1xuXG5cbnZhciBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS8sXG4gICAgaXNvVGltZUJhc2VSZWdleCA9IC8oXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Wy4sXShcXGR7MSwzMH0pKT8pPyk/LyxcbiAgICBpc29UaW1lUmVnZXggPSBSZWdFeHAoXCJcIiArIGlzb1RpbWVCYXNlUmVnZXguc291cmNlICsgb2Zmc2V0UmVnZXguc291cmNlICsgXCI/XCIpLFxuICAgIGlzb1RpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChcIig/OlRcIiArIGlzb1RpbWVSZWdleC5zb3VyY2UgKyBcIik/XCIpLFxuICAgIGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vLFxuICAgIGlzb1dlZWtSZWdleCA9IC8oXFxkezR9KS0/VyhcXGRcXGQpKD86LT8oXFxkKSk/LyxcbiAgICBpc29PcmRpbmFsUmVnZXggPSAvKFxcZHs0fSktPyhcXGR7M30pLyxcbiAgICBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIiksXG4gICAgZXh0cmFjdElTT09yZGluYWxEYXRhID0gc2ltcGxlUGFyc2UoXCJ5ZWFyXCIsIFwib3JkaW5hbFwiKSxcbiAgICBzcWxZbWRSZWdleCA9IC8oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKS8sXG4gICAgLy8gZHVtYmVkLWRvd24gdmVyc2lvbiBvZiB0aGUgSVNPIG9uZVxuc3FsVGltZVJlZ2V4ID0gUmVnRXhwKGlzb1RpbWVCYXNlUmVnZXguc291cmNlICsgXCIgPyg/OlwiICsgb2Zmc2V0UmVnZXguc291cmNlICsgXCJ8KFwiICsgaWFuYVJlZ2V4LnNvdXJjZSArIFwiKSk/XCIpLFxuICAgIHNxbFRpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChcIig/OiBcIiArIHNxbFRpbWVSZWdleC5zb3VyY2UgKyBcIik/XCIpO1xuXG5mdW5jdGlvbiBpbnQobWF0Y2gsIHBvcywgZmFsbGJhY2spIHtcbiAgdmFyIG0gPSBtYXRjaFtwb3NdO1xuICByZXR1cm4gaXNVbmRlZmluZWQobSkgPyBmYWxsYmFjayA6IHBhcnNlSW50ZWdlcihtKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1ltZChtYXRjaCwgY3Vyc29yKSB7XG4gIHZhciBpdGVtID0ge1xuICAgIHllYXI6IGludChtYXRjaCwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAxKSxcbiAgICBkYXk6IGludChtYXRjaCwgY3Vyc29yICsgMiwgMSlcbiAgfTtcbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gsIGN1cnNvcikge1xuICB2YXIgaXRlbSA9IHtcbiAgICBob3VyczogaW50KG1hdGNoLCBjdXJzb3IsIDApLFxuICAgIG1pbnV0ZXM6IGludChtYXRjaCwgY3Vyc29yICsgMSwgMCksXG4gICAgc2Vjb25kczogaW50KG1hdGNoLCBjdXJzb3IgKyAyLCAwKSxcbiAgICBtaWxsaXNlY29uZHM6IHBhcnNlTWlsbGlzKG1hdGNoW2N1cnNvciArIDNdKVxuICB9O1xuICByZXR1cm4gW2l0ZW0sIG51bGwsIGN1cnNvciArIDRdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SVNPT2Zmc2V0KG1hdGNoLCBjdXJzb3IpIHtcbiAgdmFyIGxvY2FsID0gIW1hdGNoW2N1cnNvcl0gJiYgIW1hdGNoW2N1cnNvciArIDFdLFxuICAgICAgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaFtjdXJzb3IgKyAxXSwgbWF0Y2hbY3Vyc29yICsgMl0pLFxuICAgICAgem9uZSA9IGxvY2FsID8gbnVsbCA6IEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShmdWxsT2Zmc2V0KTtcbiAgcmV0dXJuIFt7fSwgem9uZSwgY3Vyc29yICsgM107XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJQU5BWm9uZShtYXRjaCwgY3Vyc29yKSB7XG4gIHZhciB6b25lID0gbWF0Y2hbY3Vyc29yXSA/IElBTkFab25lLmNyZWF0ZShtYXRjaFtjdXJzb3JdKSA6IG51bGw7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDFdO1xufSAvLyBJU08gdGltZSBwYXJzaW5nXG5cblxudmFyIGlzb1RpbWVPbmx5ID0gUmVnRXhwKFwiXlQ/XCIgKyBpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZSArIFwiJFwiKTsgLy8gSVNPIGR1cmF0aW9uIHBhcnNpbmdcblxudmFyIGlzb0R1cmF0aW9uID0gL14tP1AoPzooPzooLT9cXGR7MSw5fSg/OlxcLlxcZHsxLDl9KT8pWSk/KD86KC0/XFxkezEsOX0oPzpcXC5cXGR7MSw5fSk/KU0pPyg/OigtP1xcZHsxLDl9KD86XFwuXFxkezEsOX0pPylXKT8oPzooLT9cXGR7MSw5fSg/OlxcLlxcZHsxLDl9KT8pRCk/KD86VCg/OigtP1xcZHsxLDl9KD86XFwuXFxkezEsOX0pPylIKT8oPzooLT9cXGR7MSw5fSg/OlxcLlxcZHsxLDl9KT8pTSk/KD86KC0/XFxkezEsMjB9KSg/OlsuLF0oLT9cXGR7MSw5fSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgdmFyIHMgPSBtYXRjaFswXSxcbiAgICAgIHllYXJTdHIgPSBtYXRjaFsxXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbMl0sXG4gICAgICB3ZWVrU3RyID0gbWF0Y2hbM10sXG4gICAgICBkYXlTdHIgPSBtYXRjaFs0XSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs1XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzZdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbN10sXG4gICAgICBtaWxsaXNlY29uZHNTdHIgPSBtYXRjaFs4XTtcbiAgdmFyIGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gXCItXCI7XG4gIHZhciBuZWdhdGl2ZVNlY29uZHMgPSBzZWNvbmRTdHIgJiYgc2Vjb25kU3RyWzBdID09PSBcIi1cIjtcblxuICB2YXIgbWF5YmVOZWdhdGUgPSBmdW5jdGlvbiBtYXliZU5lZ2F0ZShudW0sIGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHtcbiAgICAgIGZvcmNlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gdW5kZWZpbmVkICYmIChmb3JjZSB8fCBudW0gJiYgaGFzTmVnYXRpdmVQcmVmaXgpID8gLW51bSA6IG51bTtcbiAgfTtcblxuICByZXR1cm4gW3tcbiAgICB5ZWFyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh5ZWFyU3RyKSksXG4gICAgbW9udGhzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKG1vbnRoU3RyKSksXG4gICAgd2Vla3M6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcod2Vla1N0cikpLFxuICAgIGRheXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcoZGF5U3RyKSksXG4gICAgaG91cnM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcoaG91clN0cikpLFxuICAgIG1pbnV0ZXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobWludXRlU3RyKSksXG4gICAgc2Vjb25kczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhzZWNvbmRTdHIpLCBzZWNvbmRTdHIgPT09IFwiLTBcIiksXG4gICAgbWlsbGlzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZU1pbGxpcyhtaWxsaXNlY29uZHNTdHIpLCBuZWdhdGl2ZVNlY29uZHMpXG4gIH1dO1xufSAvLyBUaGVzZSBhcmUgYSBsaXR0bGUgYnJhaW5kZWFkLiBFRFQgKnNob3VsZCogdGVsbCB1cyB0aGF0IHdlJ3JlIGluLCBzYXksIEFtZXJpY2EvTmV3X1lvcmtcbi8vIGFuZCBub3QganVzdCB0aGF0IHdlJ3JlIGluIC0yNDAgKnJpZ2h0IG5vdyouIEJ1dCBzaW5jZSBJIGRvbid0IHRoaW5rIHRoZXNlIGFyZSB1c2VkIHRoYXQgb2Z0ZW5cbi8vIEknbSBqdXN0IGdvaW5nIHRvIGlnbm9yZSB0aGF0XG5cblxudmFyIG9ic09mZnNldHMgPSB7XG4gIEdNVDogMCxcbiAgRURUOiAtNCAqIDYwLFxuICBFU1Q6IC01ICogNjAsXG4gIENEVDogLTUgKiA2MCxcbiAgQ1NUOiAtNiAqIDYwLFxuICBNRFQ6IC02ICogNjAsXG4gIE1TVDogLTcgKiA2MCxcbiAgUERUOiAtNyAqIDYwLFxuICBQU1Q6IC04ICogNjBcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgeWVhcjogeWVhclN0ci5sZW5ndGggPT09IDIgPyB1bnRydW5jYXRlWWVhcihwYXJzZUludGVnZXIoeWVhclN0cikpIDogcGFyc2VJbnRlZ2VyKHllYXJTdHIpLFxuICAgIG1vbnRoOiBtb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludGVnZXIoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksXG4gICAgbWludXRlOiBwYXJzZUludGVnZXIobWludXRlU3RyKVxuICB9O1xuICBpZiAoc2Vjb25kU3RyKSByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG5cbiAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICByZXN1bHQud2Vla2RheSA9IHdlZWtkYXlTdHIubGVuZ3RoID4gMyA/IHdlZWtkYXlzTG9uZy5pbmRleE9mKHdlZWtkYXlTdHIpICsgMSA6IHdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBSRkMgMjgyMi81MzIyXG5cblxudmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLFxccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoPzooWystXVxcZFxcZCkoXFxkXFxkKSkpJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RSRkMyODIyKG1hdGNoKSB7XG4gIHZhciB3ZWVrZGF5U3RyID0gbWF0Y2hbMV0sXG4gICAgICBkYXlTdHIgPSBtYXRjaFsyXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbM10sXG4gICAgICB5ZWFyU3RyID0gbWF0Y2hbNF0sXG4gICAgICBob3VyU3RyID0gbWF0Y2hbNV0sXG4gICAgICBtaW51dGVTdHIgPSBtYXRjaFs2XSxcbiAgICAgIHNlY29uZFN0ciA9IG1hdGNoWzddLFxuICAgICAgb2JzT2Zmc2V0ID0gbWF0Y2hbOF0sXG4gICAgICBtaWxPZmZzZXQgPSBtYXRjaFs5XSxcbiAgICAgIG9mZkhvdXJTdHIgPSBtYXRjaFsxMF0sXG4gICAgICBvZmZNaW51dGVTdHIgPSBtYXRjaFsxMV0sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHZhciBvZmZzZXQ7XG5cbiAgaWYgKG9ic09mZnNldCkge1xuICAgIG9mZnNldCA9IG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgfSBlbHNlIGlmIChtaWxPZmZzZXQpIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldCA9IHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpO1xuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHQsIG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KV07XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgXCIgXCIpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCBcIiBcIikudHJpbSgpO1xufSAvLyBodHRwIGRhdGVcblxuXG52YXIgcmZjMTEyMyA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gICAgcmZjODUwID0gL14oTW9uZGF5fFR1ZXNkYXl8V2Vkc2RheXxUaHVyc2RheXxGcmlkYXl8U2F0dXJkYXl8U3VuZGF5KSwgKFxcZFxcZCktKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKS0oXFxkXFxkKSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSBHTVQkLyxcbiAgICBhc2NpaSA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1bikgKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKSAoIFxcZHxcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIChcXGR7NH0pJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RSRkMxMTIzT3I4NTAobWF0Y2gpIHtcbiAgdmFyIHdlZWtkYXlTdHIgPSBtYXRjaFsxXSxcbiAgICAgIGRheVN0ciA9IG1hdGNoWzJdLFxuICAgICAgbW9udGhTdHIgPSBtYXRjaFszXSxcbiAgICAgIHllYXJTdHIgPSBtYXRjaFs0XSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs1XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzZdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbN10sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgdmFyIHdlZWtkYXlTdHIgPSBtYXRjaFsxXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbMl0sXG4gICAgICBkYXlTdHIgPSBtYXRjaFszXSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs0XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzVdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbNl0sXG4gICAgICB5ZWFyU3RyID0gbWF0Y2hbN10sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG52YXIgaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1ltZFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvV2Vla1JlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvT3JkaW5hbFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb1RpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvVGltZVJlZ2V4KTtcbnZhciBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0KTtcbnZhciBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPV2Vla0RhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0KTtcbnZhciBleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT09yZGluYWxEYXRhLCBleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCk7XG52YXIgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCk7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VJU09EYXRlKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sIFtpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0XSwgW2lzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lXSwgW2lzb1RpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZUFuZE9mZnNldF0pO1xufVxuZnVuY3Rpb24gcGFyc2VSRkMyODIyRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShwcmVwcm9jZXNzUkZDMjgyMihzKSwgW3JmYzI4MjIsIGV4dHJhY3RSRkMyODIyXSk7XG59XG5mdW5jdGlvbiBwYXJzZUhUVFBEYXRlKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtyZmMxMTIzLCBleHRyYWN0UkZDMTEyM09yODUwXSwgW3JmYzg1MCwgZXh0cmFjdFJGQzExMjNPcjg1MF0sIFthc2NpaSwgZXh0cmFjdEFTQ0lJXSk7XG59XG5mdW5jdGlvbiBwYXJzZUlTT0R1cmF0aW9uKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29EdXJhdGlvbiwgZXh0cmFjdElTT0R1cmF0aW9uXSk7XG59XG52YXIgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpO1xuZnVuY3Rpb24gcGFyc2VJU09UaW1lT25seShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvVGltZU9ubHksIGV4dHJhY3RJU09UaW1lT25seV0pO1xufVxudmFyIHNxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxZbWRSZWdleCwgc3FsVGltZUV4dGVuc2lvblJlZ2V4KTtcbnZhciBzcWxUaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFRpbWVSZWdleCk7XG52YXIgZXh0cmFjdElTT1ltZFRpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xudmFyIGV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmUgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbmZ1bmN0aW9uIHBhcnNlU1FMKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtzcWxZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZU9mZnNldEFuZElBTkFab25lXSwgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXSk7XG59XG5cbnZhciBJTlZBTElEJDIgPSBcIkludmFsaWQgRHVyYXRpb25cIjsgLy8gdW5pdCBjb252ZXJzaW9uIGNvbnN0YW50c1xuXG52YXIgbG93T3JkZXJNYXRyaXggPSB7XG4gIHdlZWtzOiB7XG4gICAgZGF5czogNyxcbiAgICBob3VyczogNyAqIDI0LFxuICAgIG1pbnV0ZXM6IDcgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBkYXlzOiB7XG4gICAgaG91cnM6IDI0LFxuICAgIG1pbnV0ZXM6IDI0ICogNjAsXG4gICAgc2Vjb25kczogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBob3Vyczoge1xuICAgIG1pbnV0ZXM6IDYwLFxuICAgIHNlY29uZHM6IDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBtaW51dGVzOiB7XG4gICAgc2Vjb25kczogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA2MCAqIDEwMDBcbiAgfSxcbiAgc2Vjb25kczoge1xuICAgIG1pbGxpc2Vjb25kczogMTAwMFxuICB9XG59LFxuICAgIGNhc3VhbE1hdHJpeCA9IF9leHRlbmRzKHtcbiAgeWVhcnM6IHtcbiAgICBxdWFydGVyczogNCxcbiAgICBtb250aHM6IDEyLFxuICAgIHdlZWtzOiA1MixcbiAgICBkYXlzOiAzNjUsXG4gICAgaG91cnM6IDM2NSAqIDI0LFxuICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBxdWFydGVyczoge1xuICAgIG1vbnRoczogMyxcbiAgICB3ZWVrczogMTMsXG4gICAgZGF5czogOTEsXG4gICAgaG91cnM6IDkxICogMjQsXG4gICAgbWludXRlczogOTEgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH0sXG4gIG1vbnRoczoge1xuICAgIHdlZWtzOiA0LFxuICAgIGRheXM6IDMwLFxuICAgIGhvdXJzOiAzMCAqIDI0LFxuICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9XG59LCBsb3dPcmRlck1hdHJpeCksXG4gICAgZGF5c0luWWVhckFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0MDAsXG4gICAgZGF5c0luTW9udGhBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDgwMCxcbiAgICBhY2N1cmF0ZU1hdHJpeCA9IF9leHRlbmRzKHtcbiAgeWVhcnM6IHtcbiAgICBxdWFydGVyczogNCxcbiAgICBtb250aHM6IDEyLFxuICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA3LFxuICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSxcbiAgICBob3VyczogZGF5c0luWWVhckFjY3VyYXRlICogMjQsXG4gICAgbWludXRlczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH0sXG4gIHF1YXJ0ZXJzOiB7XG4gICAgbW9udGhzOiAzLFxuICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyAyOCxcbiAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA0LFxuICAgIGhvdXJzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAvIDQsXG4gICAgbWludXRlczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAvIDQsXG4gICAgc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwIC8gNCxcbiAgICBtaWxsaXNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDAgLyA0XG4gIH0sXG4gIG1vbnRoczoge1xuICAgIHdlZWtzOiBkYXlzSW5Nb250aEFjY3VyYXRlIC8gNyxcbiAgICBkYXlzOiBkYXlzSW5Nb250aEFjY3VyYXRlLFxuICAgIGhvdXJzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQsXG4gICAgbWludXRlczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH1cbn0sIGxvd09yZGVyTWF0cml4KTsgLy8gdW5pdHMgb3JkZXJlZCBieSBzaXplXG5cbnZhciBvcmRlcmVkVW5pdHMkMSA9IFtcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdO1xudmFyIHJldmVyc2VVbml0cyA9IG9yZGVyZWRVbml0cyQxLnNsaWNlKDApLnJldmVyc2UoKTsgLy8gY2xvbmUgcmVhbGx5IG1lYW5zIFwiY3JlYXRlIGFub3RoZXIgaW5zdGFuY2UganVzdCBsaWtlIHRoaXMgb25lLCBidXQgd2l0aCB0aGVzZSBjaGFuZ2VzXCJcblxuZnVuY3Rpb24gY2xvbmUkMShkdXIsIGFsdHMsIGNsZWFyKSB7XG4gIGlmIChjbGVhciA9PT0gdm9pZCAwKSB7XG4gICAgY2xlYXIgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIGRlZXAgbWVyZ2UgZm9yIHZhbHNcbiAgdmFyIGNvbmYgPSB7XG4gICAgdmFsdWVzOiBjbGVhciA/IGFsdHMudmFsdWVzIDogX2V4dGVuZHMoe30sIGR1ci52YWx1ZXMsIGFsdHMudmFsdWVzIHx8IHt9KSxcbiAgICBsb2M6IGR1ci5sb2MuY2xvbmUoYWx0cy5sb2MpLFxuICAgIGNvbnZlcnNpb25BY2N1cmFjeTogYWx0cy5jb252ZXJzaW9uQWNjdXJhY3kgfHwgZHVyLmNvbnZlcnNpb25BY2N1cmFjeVxuICB9O1xuICByZXR1cm4gbmV3IER1cmF0aW9uKGNvbmYpO1xufVxuXG5mdW5jdGlvbiBhbnRpVHJ1bmMobikge1xuICByZXR1cm4gbiA8IDAgPyBNYXRoLmZsb29yKG4pIDogTWF0aC5jZWlsKG4pO1xufSAvLyBOQjogbXV0YXRlcyBwYXJhbWV0ZXJzXG5cblxuZnVuY3Rpb24gY29udmVydChtYXRyaXgsIGZyb21NYXAsIGZyb21Vbml0LCB0b01hcCwgdG9Vbml0KSB7XG4gIHZhciBjb252ID0gbWF0cml4W3RvVW5pdF1bZnJvbVVuaXRdLFxuICAgICAgcmF3ID0gZnJvbU1hcFtmcm9tVW5pdF0gLyBjb252LFxuICAgICAgc2FtZVNpZ24gPSBNYXRoLnNpZ24ocmF3KSA9PT0gTWF0aC5zaWduKHRvTWFwW3RvVW5pdF0pLFxuICAgICAgLy8gb2ssIHNvIHRoaXMgaXMgd2lsZCwgYnV0IHNlZSB0aGUgbWF0cml4IGluIHRoZSB0ZXN0c1xuICBhZGRlZCA9ICFzYW1lU2lnbiAmJiB0b01hcFt0b1VuaXRdICE9PSAwICYmIE1hdGguYWJzKHJhdykgPD0gMSA/IGFudGlUcnVuYyhyYXcpIDogTWF0aC50cnVuYyhyYXcpO1xuICB0b01hcFt0b1VuaXRdICs9IGFkZGVkO1xuICBmcm9tTWFwW2Zyb21Vbml0XSAtPSBhZGRlZCAqIGNvbnY7XG59IC8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnNcblxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7XG4gIHJldmVyc2VVbml0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnZlcnQobWF0cml4LCB2YWxzLCBwcmV2aW91cywgdmFscywgY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgfVxuICB9LCBudWxsKTtcbn1cbi8qKlxuICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlIFwiMiBtb250aHNcIiBvciBcIjEgZGF5LCAxIGhvdXJcIi4gQ29uY2VwdHVhbGx5LCBpdCdzIGp1c3QgYSBtYXAgb2YgdW5pdHMgdG8gdGhlaXIgcXVhbnRpdGllcywgYWNjb21wYW5pZWQgYnkgc29tZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gYW5kIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uIFRoZXkgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duIG9yIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXIgTHV4b24gdHlwZXM7IGZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c30gdG8gYWRkIGEgRHVyYXRpb24gb2JqZWN0IHRvIGEgRGF0ZVRpbWUsIHByb2R1Y2luZyBhbm90aGVyIERhdGVUaW1lLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gRHVyYXRpb246XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgRHVyYXRpb24jZnJvbU1pbGxpc30sIHtAbGluayBEdXJhdGlvbiNmcm9tT2JqZWN0fSwgb3Ige0BsaW5rIER1cmF0aW9uI2Zyb21JU099LlxuICogKiAqKlVuaXQgdmFsdWVzKiogU2VlIHRoZSB7QGxpbmsgRHVyYXRpb24jeWVhcnN9LCB7QGxpbmsgRHVyYXRpb24ubW9udGhzfSwge0BsaW5rIER1cmF0aW9uI3dlZWtzfSwge0BsaW5rIER1cmF0aW9uI2RheXN9LCB7QGxpbmsgRHVyYXRpb24jaG91cnN9LCB7QGxpbmsgRHVyYXRpb24jbWludXRlc30sIHtAbGluayBEdXJhdGlvbiNzZWNvbmRzfSwge0BsaW5rIER1cmF0aW9uI21pbGxpc2Vjb25kc30gYWNjZXNzb3JzLlxuICogKiAqKkNvbmZpZ3VyYXRpb24qKiBTZWUgIHtAbGluayBEdXJhdGlvbiNsb2NhbGV9IGFuZCB7QGxpbmsgRHVyYXRpb24jbnVtYmVyaW5nU3lzdGVtfSBhY2Nlc3NvcnMuXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBEdXJhdGlvbiNwbHVzfSwge0BsaW5rIER1cmF0aW9uI21pbnVzfSwge0BsaW5rIER1cmF0aW9uI25vcm1hbGl6ZX0sIHtAbGluayBEdXJhdGlvbiNzZXR9LCB7QGxpbmsgRHVyYXRpb24jcmVjb25maWd1cmV9LCB7QGxpbmsgRHVyYXRpb24jc2hpZnRUb30sIGFuZCB7QGxpbmsgRHVyYXRpb24jbmVnYXRlfS5cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBEdXJhdGlvbiBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBEdXJhdGlvbiNhc30sIHtAbGluayBEdXJhdGlvbiN0b0lTT30sIHtAbGluayBEdXJhdGlvbiN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgRHVyYXRpb24jdG9KU09OfVxuICpcbiAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi5cbiAqL1xuXG5cbnZhciBEdXJhdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gRHVyYXRpb24oY29uZmlnKSB7XG4gICAgdmFyIGFjY3VyYXRlID0gY29uZmlnLmNvbnZlcnNpb25BY2N1cmFjeSA9PT0gXCJsb25ndGVybVwiIHx8IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy52YWx1ZXMgPSBjb25maWcudmFsdWVzO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuY29udmVyc2lvbkFjY3VyYWN5ID0gYWNjdXJhdGUgPyBcImxvbmd0ZXJtXCIgOiBcImNhc3VhbFwiO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pbnZhbGlkID0gY29uZmlnLmludmFsaWQgfHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubWF0cml4ID0gYWNjdXJhdGUgPyBhY2N1cmF0ZU1hdHJpeCA6IGNhc3VhbE1hdHJpeDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaXNMdXhvbkR1cmF0aW9uID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIER1cmF0aW9uIGZyb20gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgb2YgbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBEdXJhdGlvbi5mcm9tTWlsbGlzID0gZnVuY3Rpb24gZnJvbU1pbGxpcyhjb3VudCwgb3B0cykge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHtcbiAgICAgIG1pbGxpc2Vjb25kczogY291bnRcbiAgICB9LCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIElmIHRoaXMgb2JqZWN0IGlzIGVtcHR5IHRoZW4gYSB6ZXJvIG1pbGxpc2Vjb25kcyBkdXJhdGlvbiBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gY3JlYXRlIHRoZSBEYXRlVGltZSBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoueWVhcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5xdWFydGVyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5c1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPVtdXSAtIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoaXMgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgRHVyYXRpb24uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3Qob2JqLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJEdXJhdGlvbi5mcm9tT2JqZWN0OiBhcmd1bWVudCBleHBlY3RlZCB0byBiZSBhbiBvYmplY3QsIGdvdCBcIiArIChvYmogPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBvYmopKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgIHZhbHVlczogbm9ybWFsaXplT2JqZWN0KG9iaiwgRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpLFxuICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIER1cmF0aW9uTGlrZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3QgfCBudW1iZXIgfCBEdXJhdGlvbn0gZHVyYXRpb25MaWtlXG4gICAqIE9uZSBvZjpcbiAgICogLSBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXJzJyBhbmQgJ2hvdXJzJy5cbiAgICogLSBudW1iZXIgcmVwcmVzZW50aW5nIG1pbGxpc2Vjb25kc1xuICAgKiAtIER1cmF0aW9uIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgO1xuXG4gIER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UgPSBmdW5jdGlvbiBmcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uTGlrZSkge1xuICAgIGlmIChpc051bWJlcihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhkdXJhdGlvbkxpa2UpO1xuICAgIH0gZWxzZSBpZiAoRHVyYXRpb24uaXNEdXJhdGlvbihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gZHVyYXRpb25MaWtlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uTGlrZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCBcIiArIGR1cmF0aW9uTGlrZSArIFwiIG9mIHR5cGUgXCIgKyB0eXBlb2YgZHVyYXRpb25MaWtlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYW4gSVNPIDg2MDEgZHVyYXRpb24gc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1AzWTZNMVc0RFQxMkgzME01UycpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAzLCBtb250aHM6IDYsIHdlZWtzOiAxLCBkYXlzOiA0LCBob3VyczogMTIsIG1pbnV0ZXM6IDMwLCBzZWNvbmRzOiA1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUFQyM0gnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjMgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQNVkzTScpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiA1LCBtb250aHM6IDMgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBEdXJhdGlvbi5mcm9tSVNPID0gZnVuY3Rpb24gZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgdmFyIF9wYXJzZUlTT0R1cmF0aW9uID0gcGFyc2VJU09EdXJhdGlvbih0ZXh0KSxcbiAgICAgICAgcGFyc2VkID0gX3BhcnNlSVNPRHVyYXRpb25bMF07XG5cbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChwYXJzZWQsIG9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcInVucGFyc2FibGVcIiwgXCJ0aGUgaW5wdXQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBjYW4ndCBiZSBwYXJzZWQgYXMgSVNPIDg2MDFcIik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIHRpbWUgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZXNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExOjIyOjMzLjQ0NCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMjIsIHNlY29uZHM6IDMzLCBtaWxsaXNlY29uZHM6IDQ0NCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTowMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCdUMTE6MDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTEwMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCdUMTEwMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgO1xuXG4gIER1cmF0aW9uLmZyb21JU09UaW1lID0gZnVuY3Rpb24gZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIHZhciBfcGFyc2VJU09UaW1lT25seSA9IHBhcnNlSVNPVGltZU9ubHkodGV4dCksXG4gICAgICAgIHBhcnNlZCA9IF9wYXJzZUlTT1RpbWVPbmx5WzBdO1xuXG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIFwidGhlIGlucHV0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxXCIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBEdXJhdGlvbi5pbnZhbGlkID0gZnVuY3Rpb24gaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgaWYgKGV4cGxhbmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZER1cmF0aW9uRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRHVyYXRpb24oe1xuICAgICAgICBpbnZhbGlkOiBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgRHVyYXRpb24ubm9ybWFsaXplVW5pdCA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICAgIHZhciBub3JtYWxpemVkID0ge1xuICAgICAgeWVhcjogXCJ5ZWFyc1wiLFxuICAgICAgeWVhcnM6IFwieWVhcnNcIixcbiAgICAgIHF1YXJ0ZXI6IFwicXVhcnRlcnNcIixcbiAgICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBtb250aDogXCJtb250aHNcIixcbiAgICAgIG1vbnRoczogXCJtb250aHNcIixcbiAgICAgIHdlZWs6IFwid2Vla3NcIixcbiAgICAgIHdlZWtzOiBcIndlZWtzXCIsXG4gICAgICBkYXk6IFwiZGF5c1wiLFxuICAgICAgZGF5czogXCJkYXlzXCIsXG4gICAgICBob3VyOiBcImhvdXJzXCIsXG4gICAgICBob3VyczogXCJob3Vyc1wiLFxuICAgICAgbWludXRlOiBcIm1pbnV0ZXNcIixcbiAgICAgIG1pbnV0ZXM6IFwibWludXRlc1wiLFxuICAgICAgc2Vjb25kOiBcInNlY29uZHNcIixcbiAgICAgIHNlY29uZHM6IFwic2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRzXCJcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcbiAgICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEdXJhdGlvbi4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIER1cmF0aW9uLmlzRHVyYXRpb24gPSBmdW5jdGlvbiBpc0R1cmF0aW9uKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EdXJhdGlvbiB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy4gWW91IG1heSB1c2UgdGhlc2UgdG9rZW5zOlxuICAgKiAqIGBTYCBmb3IgbWlsbGlzZWNvbmRzXG4gICAqICogYHNgIGZvciBzZWNvbmRzXG4gICAqICogYG1gIGZvciBtaW51dGVzXG4gICAqICogYGhgIGZvciBob3Vyc1xuICAgKiAqIGBkYCBmb3IgZGF5c1xuICAgKiAqIGBNYCBmb3IgbW9udGhzXG4gICAqICogYHlgIGZvciB5ZWFyc1xuICAgKiBOb3RlczpcbiAgICogKiBBZGQgcGFkZGluZyBieSByZXBlYXRpbmcgdGhlIHRva2VuLCBlLmcuIFwieXlcIiBwYWRzIHRoZSB5ZWFycyB0byB0d28gZGlnaXRzLCBcImhoaGhcIiBwYWRzIHRoZSBob3VycyBvdXQgdG8gZm91ciBkaWdpdHNcbiAgICogKiBUaGUgZHVyYXRpb24gd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdGhlIHNldCBvZiB1bml0cyBpbiB0aGUgZm9ybWF0IHN0cmluZyB1c2luZyB7QGxpbmsgRHVyYXRpb24jc2hpZnRUb30gYW5kIHRoZSBEdXJhdGlvbnMncyBjb252ZXJzaW9uIGFjY3VyYWN5IHNldHRpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5mbG9vcj10cnVlXSAtIGZsb29yIG51bWVyaWNhbCB2YWx1ZXNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvRm9ybWF0KFwieSBkIHNcIikgLy89PiBcIjEgNiAyXCJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvRm9ybWF0KFwieXkgZGQgc3NzXCIpIC8vPT4gXCIwMSAwNiAwMDJcIlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJNIFNcIikgLy89PiBcIjEyIDUxODQwMjAwMFwiXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9wcm90by50b0Zvcm1hdCA9IGZ1bmN0aW9uIHRvRm9ybWF0KGZtdCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyByZXZlcnNlLWNvbXBhdCBzaW5jZSAxLjI7IHdlIGFsd2F5cyByb3VuZCBkb3duIG5vdywgbmV2ZXIgdXAsIGFuZCB3ZSBkbyBpdCBieSBkZWZhdWx0XG4gICAgdmFyIGZtdE9wdHMgPSBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgZmxvb3I6IG9wdHMucm91bmQgIT09IGZhbHNlICYmIG9wdHMuZmxvb3IgIT09IGZhbHNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYywgZm10T3B0cykuZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKHRoaXMsIGZtdCkgOiBJTlZBTElEJDI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBEdXJhdGlvbiB3aXRoIGFsbCB1bml0cyBpbmNsdWRlZFxuICAgKiBUbyBtb2RpZnkgaXRzIGJlaGF2aW9yIHVzZSB0aGUgYGxpc3RTdHlsZWAgYW5kIGFueSBJbnRsLk51bWJlckZvcm1hdCBvcHRpb24sIHRob3VnaCBgdW5pdERpc3BsYXlgIGlzIGVzcGVjaWFsbHkgcmVsZXZhbnQuIFNlZSB7QGxpbmsgSW50bC5OdW1iZXJGb3JtYXR9LlxuICAgKiBAcGFyYW0gb3B0cyAtIE9uIG9wdGlvbiBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIGZvcm1hdHRpbmcuIEFjY2VwdHMgdGhlIHNhbWUga2V5cyBhcyB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgb2YgdGhlIG5hdGl2ZSBgSW50Lk51bWJlckZvcm1hdGAgY29uc3RydWN0b3IsIGFzIHdlbGwgYXMgYGxpc3RTdHlsZWAuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzXG4gICAqIHZhciBkdXIgPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgZGF5czogMSwgaG91cnM6IDUsIG1pbnV0ZXM6IDYgfSlcbiAgICogZHVyLnRvSHVtYW4oKSAvLz0+ICcxIGRheSwgNSBob3VycywgNiBtaW51dGVzJ1xuICAgKiBkdXIudG9IdW1hbih7IGxpc3RTdHlsZTogXCJsb25nXCIgfSkgLy89PiAnMSBkYXksIDUgaG91cnMsIGFuZCA2IG1pbnV0ZXMnXG4gICAqIGR1ci50b0h1bWFuKHsgdW5pdERpc3BsYXk6IFwic2hvcnRcIiB9KSAvLz0+ICcxIGRheSwgNSBociwgNiBtaW4nXG4gICAqIGBgYFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0h1bWFuID0gZnVuY3Rpb24gdG9IdW1hbihvcHRzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgbCA9IG9yZGVyZWRVbml0cyQxLm1hcChmdW5jdGlvbiAodW5pdCkge1xuICAgICAgdmFyIHZhbCA9IF90aGlzLnZhbHVlc1t1bml0XTtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5sb2MubnVtYmVyRm9ybWF0dGVyKF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IFwidW5pdFwiLFxuICAgICAgICB1bml0RGlzcGxheTogXCJsb25nXCJcbiAgICAgIH0sIG9wdHMsIHtcbiAgICAgICAgdW5pdDogdW5pdC5zbGljZSgwLCAtMSlcbiAgICAgIH0pKS5mb3JtYXQodmFsKTtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBuO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmxvYy5saXN0Rm9ybWF0dGVyKF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IFwiY29uanVuY3Rpb25cIixcbiAgICAgIHN0eWxlOiBvcHRzLmxpc3RTdHlsZSB8fCBcIm5hcnJvd1wiXG4gICAgfSwgb3B0cykpLmZvcm1hdChsKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEdXJhdGlvbidzIHZhbHVlcy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLnZhbHVlcyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDMsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDNZVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNCwgc2Vjb25kczogNDUgfSkudG9JU08oKSAvLz0+ICdQNE1UNDVTJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbW9udGhzOiA1IH0pLnRvSVNPKCkgLy89PiAnUDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWludXRlczogNSB9KS50b0lTTygpIC8vPT4gJ1BUNU0nXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaWxsaXNlY29uZHM6IDYgfSkudG9JU08oKSAvLz0+ICdQVDAuMDA2UydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTTyA9IGZ1bmN0aW9uIHRvSVNPKCkge1xuICAgIC8vIHdlIGNvdWxkIHVzZSB0aGUgZm9ybWF0dGVyLCBidXQgdGhpcyBpcyBhbiBlYXNpZXIgd2F5IHRvIGdldCB0aGUgbWluaW11bSBzdHJpbmdcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHMgPSBcIlBcIjtcbiAgICBpZiAodGhpcy55ZWFycyAhPT0gMCkgcyArPSB0aGlzLnllYXJzICsgXCJZXCI7XG4gICAgaWYgKHRoaXMubW9udGhzICE9PSAwIHx8IHRoaXMucXVhcnRlcnMgIT09IDApIHMgKz0gdGhpcy5tb250aHMgKyB0aGlzLnF1YXJ0ZXJzICogMyArIFwiTVwiO1xuICAgIGlmICh0aGlzLndlZWtzICE9PSAwKSBzICs9IHRoaXMud2Vla3MgKyBcIldcIjtcbiAgICBpZiAodGhpcy5kYXlzICE9PSAwKSBzICs9IHRoaXMuZGF5cyArIFwiRFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwIHx8IHRoaXMubWludXRlcyAhPT0gMCB8fCB0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApIHMgKz0gXCJUXCI7XG4gICAgaWYgKHRoaXMuaG91cnMgIT09IDApIHMgKz0gdGhpcy5ob3VycyArIFwiSFwiO1xuICAgIGlmICh0aGlzLm1pbnV0ZXMgIT09IDApIHMgKz0gdGhpcy5taW51dGVzICsgXCJNXCI7XG4gICAgaWYgKHRoaXMuc2Vjb25kcyAhPT0gMCB8fCB0aGlzLm1pbGxpc2Vjb25kcyAhPT0gMCkgLy8gdGhpcyB3aWxsIGhhbmRsZSBcImZsb2F0aW5nIHBvaW50IG1hZG5lc3NcIiBieSByZW1vdmluZyBleHRyYSBkZWNpbWFsIHBsYWNlc1xuICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTg4MDA0L2lzLWZsb2F0aW5nLXBvaW50LW1hdGgtYnJva2VuXG4gICAgICBzICs9IHJvdW5kVG8odGhpcy5zZWNvbmRzICsgdGhpcy5taWxsaXNlY29uZHMgLyAxMDAwLCAzKSArIFwiU1wiO1xuICAgIGlmIChzID09PSBcIlBcIikgcyArPSBcIlQwU1wiO1xuICAgIHJldHVybiBzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiwgZm9ybWF0dGVkIGFzIGEgdGltZSBvZiBkYXkuXG4gICAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlIGR1cmF0aW9uIGlzIGludmFsaWQsIG5lZ2F0aXZlLCBvciBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMjQgaG91cnMuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVQcmVmaXg9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgYFRgIHByZWZpeFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoKSAvLz0+ICcxMTowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHRydWUgfSkgLy89PiAnMTE6MDA6MDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IGluY2x1ZGVQcmVmaXg6IHRydWUgfSkgLy89PiAnVDExOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMTEwMDAwLjAwMCdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT1RpbWUgPSBmdW5jdGlvbiB0b0lTT1RpbWUob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1pbGxpcyA9IHRoaXMudG9NaWxsaXMoKTtcbiAgICBpZiAobWlsbGlzIDwgMCB8fCBtaWxsaXMgPj0gODY0MDAwMDApIHJldHVybiBudWxsO1xuICAgIG9wdHMgPSBfZXh0ZW5kcyh7XG4gICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogZmFsc2UsXG4gICAgICBzdXBwcmVzc1NlY29uZHM6IGZhbHNlLFxuICAgICAgaW5jbHVkZVByZWZpeDogZmFsc2UsXG4gICAgICBmb3JtYXQ6IFwiZXh0ZW5kZWRcIlxuICAgIH0sIG9wdHMpO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuc2hpZnRUbyhcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIiwgXCJtaWxsaXNlY29uZHNcIik7XG4gICAgdmFyIGZtdCA9IG9wdHMuZm9ybWF0ID09PSBcImJhc2ljXCIgPyBcImhobW1cIiA6IFwiaGg6bW1cIjtcblxuICAgIGlmICghb3B0cy5zdXBwcmVzc1NlY29uZHMgfHwgdmFsdWUuc2Vjb25kcyAhPT0gMCB8fCB2YWx1ZS5taWxsaXNlY29uZHMgIT09IDApIHtcbiAgICAgIGZtdCArPSBvcHRzLmZvcm1hdCA9PT0gXCJiYXNpY1wiID8gXCJzc1wiIDogXCI6c3NcIjtcblxuICAgICAgaWYgKCFvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkge1xuICAgICAgICBmbXQgKz0gXCIuU1NTXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0ciA9IHZhbHVlLnRvRm9ybWF0KGZtdCk7XG5cbiAgICBpZiAob3B0cy5pbmNsdWRlUHJlZml4KSB7XG4gICAgICBzdHIgPSBcIlRcIiArIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBKU09OLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBkZWJ1Z2dpbmcuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTWlsbGlzID0gZnVuY3Rpb24gdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXMoXCJtaWxsaXNlY29uZHNcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gbWlsbGlzZWNvbmRzIHZhbHVlIG9mIHRoaXMgRHVyYXRpb24uIEFsaWFzIG9mIHtAbGluayB0b01pbGxpc31cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52YWx1ZU9mID0gZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b01pbGxpcygpO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlIHRoaXMgRHVyYXRpb24gbG9uZ2VyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gYWRkLiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGx1cyA9IGZ1bmN0aW9uIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3JkZXJlZFVuaXRzJDEpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgICAgdmFyIGsgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgaWYgKGhhc093blByb3BlcnR5KGR1ci52YWx1ZXMsIGspIHx8IGhhc093blByb3BlcnR5KHRoaXMudmFsdWVzLCBrKSkge1xuICAgICAgICByZXN1bHRba10gPSBkdXIuZ2V0KGspICsgdGhpcy5nZXQoayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywge1xuICAgICAgdmFsdWVzOiByZXN1bHRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogTWFrZSB0aGlzIER1cmF0aW9uIHNob3J0ZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1pbnVzID0gZnVuY3Rpb24gbWludXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuICAvKipcbiAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdW5pdC4gQXJpdHkgaXMgMSBvciAyOiB0aGUgdmFsdWUgb2YgdGhlIHVuaXQgYW5kLCBvcHRpb25hbGx5LCB0aGUgdW5pdCBuYW1lLiBNdXN0IHJldHVybiBhIG51bWJlci5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cyh4ID0+IHggKiAyKSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDYwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cygoeCwgdSkgPT4gdSA9PT0gXCJob3VyXCIgPyB4ICogMiA6IHgpIC8vPT4geyBob3VyczogMiwgbWludXRlczogMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFwVW5pdHMgPSBmdW5jdGlvbiBtYXBVbml0cyhmbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKTsgX2kgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgayA9IF9PYmplY3Qka2V5c1tfaV07XG4gICAgICByZXN1bHRba10gPSBhc051bWJlcihmbih0aGlzLnZhbHVlc1trXSwgaykpO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogcmVzdWx0XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgneWVhcnMnKSAvLz0+IDJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5nZXQoJ21vbnRocycpIC8vPT4gMFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnZGF5cycpIC8vPT4gM1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldCh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXNbRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1bml0KV07XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHVyLnNldCh7IHllYXJzOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyBob3VyczogOCwgbWludXRlczogMzAgfSlcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICB2YXIgbWl4ZWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy52YWx1ZXMsIG5vcm1hbGl6ZU9iamVjdCh2YWx1ZXMsIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpKTtcblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogbWl4ZWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlIGFuZC9vciBudW1iZXJpbmdTeXN0ZW0uICBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBleGFtcGxlIGR1ci5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVjb25maWd1cmUgPSBmdW5jdGlvbiByZWNvbmZpZ3VyZShfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGxvY2FsZSA9IF9yZWYubG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgY29udmVyc2lvbkFjY3VyYWN5ID0gX3JlZi5jb252ZXJzaW9uQWNjdXJhY3k7XG5cbiAgICB2YXIgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbVxuICAgIH0pLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgbG9jOiBsb2NcbiAgICB9O1xuXG4gICAgaWYgKGNvbnZlcnNpb25BY2N1cmFjeSkge1xuICAgICAgb3B0cy5jb252ZXJzaW9uQWNjdXJhY3kgPSBjb252ZXJzaW9uQWNjdXJhY3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBkdXJhdGlvbiBpbiB0aGUgc3BlY2lmaWVkIHVuaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gYSB1bml0IHN1Y2ggYXMgJ21pbnV0ZXMnIG9yICdkYXlzJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdkYXlzJykgLy89PiAzNjVcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDF9KS5hcygnbW9udGhzJykgLy89PiAxMlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHtob3VyczogNjB9KS5hcygnZGF5cycpIC8vPT4gMi41XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYXMgPSBmdW5jdGlvbiBhcyh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuc2hpZnRUbyh1bml0KS5nZXQodW5pdCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJlZHVjZSB0aGlzIER1cmF0aW9uIHRvIGl0cyBjYW5vbmljYWwgcmVwcmVzZW50YXRpb24gaW4gaXRzIGN1cnJlbnQgdW5pdHMuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMiwgZGF5czogNTAwMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMTUsIGRheXM6IDI1NSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTIsIG1pbnV0ZXM6IC00NSB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDE1IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCB2YWxzKTtcbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IHZhbHNcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5zaGlmdFRvKCdtaW51dGVzJywgJ21pbGxpc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDYwLCBtaWxsaXNlY29uZHM6IDMwMDAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNoaWZ0VG8gPSBmdW5jdGlvbiBzaGlmdFRvKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB1bml0cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHVuaXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKGZ1bmN0aW9uICh1KSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1KTtcbiAgICB9KTtcbiAgICB2YXIgYnVpbHQgPSB7fSxcbiAgICAgICAgYWNjdW11bGF0ZWQgPSB7fSxcbiAgICAgICAgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICB2YXIgbGFzdFVuaXQ7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvcmRlcmVkVW5pdHMkMSksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgayA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgaWYgKHVuaXRzLmluZGV4T2YoaykgPj0gMCkge1xuICAgICAgICBsYXN0VW5pdCA9IGs7XG4gICAgICAgIHZhciBvd24gPSAwOyAvLyBhbnl0aGluZyB3ZSBoYXZlbid0IGJvaWxlZCBkb3duIHlldCBzaG91bGQgZ2V0IGJvaWxlZCB0byB0aGlzIHVuaXRcblxuICAgICAgICBmb3IgKHZhciBhayBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgICAgIG93biArPSB0aGlzLm1hdHJpeFtha11ba10gKiBhY2N1bXVsYXRlZFtha107XG4gICAgICAgICAgYWNjdW11bGF0ZWRbYWtdID0gMDtcbiAgICAgICAgfSAvLyBwbHVzIGFueXRoaW5nIHRoYXQncyBhbHJlYWR5IGluIHRoaXMgdW5pdFxuXG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHNba10pKSB7XG4gICAgICAgICAgb3duICs9IHZhbHNba107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IE1hdGgudHJ1bmMob3duKTtcbiAgICAgICAgYnVpbHRba10gPSBpO1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IChvd24gKiAxMDAwIC0gaSAqIDEwMDApIC8gMTAwMDsgLy8gcGx1cyBhbnl0aGluZyBmdXJ0aGVyIGRvd24gdGhlIGNoYWluIHRoYXQgc2hvdWxkIGJlIHJvbGxlZCB1cCBpbiB0byB0aGlzXG5cbiAgICAgICAgZm9yICh2YXIgZG93biBpbiB2YWxzKSB7XG4gICAgICAgICAgaWYgKG9yZGVyZWRVbml0cyQxLmluZGV4T2YoZG93bikgPiBvcmRlcmVkVW5pdHMkMS5pbmRleE9mKGspKSB7XG4gICAgICAgICAgICBjb252ZXJ0KHRoaXMubWF0cml4LCB2YWxzLCBkb3duLCBidWlsdCwgayk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIG90aGVyd2lzZSwga2VlcCBpdCBpbiB0aGUgd2luZ3MgdG8gYm9pbCBpdCBsYXRlclxuXG4gICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKHZhbHNba10pKSB7XG4gICAgICAgIGFjY3VtdWxhdGVkW2tdID0gdmFsc1trXTtcbiAgICAgIH1cbiAgICB9IC8vIGFueXRoaW5nIGxlZnRvdmVyIGJlY29tZXMgdGhlIGRlY2ltYWwgZm9yIHRoZSBsYXN0IHVuaXRcbiAgICAvLyBsYXN0VW5pdCBtdXN0IGJlIGRlZmluZWQgc2luY2UgdW5pdHMgaXMgbm90IGVtcHR5XG5cblxuICAgIGZvciAodmFyIGtleSBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgaWYgKGFjY3VtdWxhdGVkW2tleV0gIT09IDApIHtcbiAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9IGtleSA9PT0gbGFzdFVuaXQgPyBhY2N1bXVsYXRlZFtrZXldIDogYWNjdW11bGF0ZWRba2V5XSAvIHRoaXMubWF0cml4W2xhc3RVbml0XVtrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogYnVpbHRcbiAgICB9LCB0cnVlKS5ub3JtYWxpemUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZWdhdGl2ZSBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIHNlY29uZHM6IDMwIH0pLm5lZ2F0ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAtMSwgc2Vjb25kczogLTMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5lZ2F0ZWQgPSB7fTtcblxuICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcyk7IF9pMiA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIGsgPSBfT2JqZWN0JGtleXMyW19pMl07XG4gICAgICBuZWdhdGVkW2tdID0gdGhpcy52YWx1ZXNba10gPT09IDAgPyAwIDogLXRoaXMudmFsdWVzW2tdO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHZhbHVlczogbmVnYXRlZFxuICAgIH0sIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHllYXJzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRHVyYXRpb25zIGFyZSBlcXVhbCBpZmYgdGhleSBoYXZlIHRoZSBzYW1lIHVuaXRzIGFuZCB0aGUgc2FtZSB2YWx1ZXMgZm9yIGVhY2ggdW5pdC5cbiAgICogQHBhcmFtIHtEdXJhdGlvbn0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHtcbiAgICAgIC8vIENvbnNpZGVyIDAgYW5kIHVuZGVmaW5lZCBhcyBlcXVhbFxuICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQgfHwgdjEgPT09IDApIHJldHVybiB2MiA9PT0gdW5kZWZpbmVkIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvcmRlcmVkVW5pdHMkMSksIF9zdGVwMzsgIShfc3RlcDMgPSBfaXRlcmF0b3IzKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgdSA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgaWYgKCFlcSh0aGlzLnZhbHVlc1t1XSwgb3RoZXIudmFsdWVzW3VdKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKER1cmF0aW9uLCBbe1xuICAgIGtleTogXCJsb2NhbGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5sb2NhbGUgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEdXJhdGlvbiwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEdXJhdGlvblxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm51bWJlcmluZ1N5c3RlbVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInllYXJzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMueWVhcnMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBxdWFydGVycy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicXVhcnRlcnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibW9udGhzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubW9udGhzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2Vla3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2Vla3NcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy53ZWVrcyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRheXMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRheXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaG91cnMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImhvdXJzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaW51dGVzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtaW51dGVzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWludXRlcyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNlY29uZHMuXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vjb25kc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWlsbGlzZWNvbmRzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgRHVyYXRpb24gaXMgaW52YWxpZC4gSW52YWxpZCBkdXJhdGlvbnMgYXJlIHJldHVybmVkIGJ5IGRpZmYgb3BlcmF0aW9uc1xuICAgICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRHVyYXRpb24gYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIER1cmF0aW9uIGlzIHZhbGlkXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZFJlYXNvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnZhbGlkRXhwbGFuYXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEdXJhdGlvbjtcbn0oKTtcblxudmFyIElOVkFMSUQkMSA9IFwiSW52YWxpZCBJbnRlcnZhbFwiOyAvLyBjaGVja3MgaWYgdGhlIHN0YXJ0IGlzIGVxdWFsIHRvIG9yIGJlZm9yZSB0aGUgZW5kXG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3RhcnRFbmQoc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0IHx8ICFzdGFydC5pc1ZhbGlkKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJtaXNzaW5nIG9yIGludmFsaWQgc3RhcnRcIik7XG4gIH0gZWxzZSBpZiAoIWVuZCB8fCAhZW5kLmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBlbmRcIik7XG4gIH0gZWxzZSBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcImVuZCBiZWZvcmUgc3RhcnRcIiwgXCJUaGUgZW5kIG9mIGFuIGludGVydmFsIG11c3QgYmUgYWZ0ZXIgaXRzIHN0YXJ0LCBidXQgeW91IGhhZCBzdGFydD1cIiArIHN0YXJ0LnRvSVNPKCkgKyBcIiBhbmQgZW5kPVwiICsgZW5kLnRvSVNPKCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4vKipcbiAqIEFuIEludGVydmFsIG9iamVjdCByZXByZXNlbnRzIGEgaGFsZi1vcGVuIGludGVydmFsIG9mIHRpbWUsIHdoZXJlIGVhY2ggZW5kcG9pbnQgaXMgYSB7QGxpbmsgRGF0ZVRpbWV9LiBDb25jZXB0dWFsbHksIGl0J3MgYSBjb250YWluZXIgZm9yIHRob3NlIHR3byBlbmRwb2ludHMsIGFjY29tcGFuaWVkIGJ5IG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCBjb21wYXJpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIEludGVydmFsOlxuICpcbiAqICogKipDcmVhdGlvbioqIFRvIGNyZWF0ZSBhbiBJbnRlcnZhbCwgdXNlIHtAbGluayBJbnRlcnZhbCNmcm9tRGF0ZVRpbWVzfSwge0BsaW5rIEludGVydmFsI2FmdGVyfSwge0BsaW5rIEludGVydmFsI2JlZm9yZX0sIG9yIHtAbGluayBJbnRlcnZhbCNmcm9tSVNPfS5cbiAqICogKipBY2Nlc3NvcnMqKiBVc2Uge0BsaW5rIEludGVydmFsI3N0YXJ0fSBhbmQge0BsaW5rIEludGVydmFsI2VuZH0gdG8gZ2V0IHRoZSBzdGFydCBhbmQgZW5kLlxuICogKiAqKkludGVycm9nYXRpb24qKiBUbyBhbmFseXplIHRoZSBJbnRlcnZhbCwgdXNlIHtAbGluayBJbnRlcnZhbCNjb3VudH0sIHtAbGluayBJbnRlcnZhbCNsZW5ndGh9LCB7QGxpbmsgSW50ZXJ2YWwjaGFzU2FtZX0sIHtAbGluayBJbnRlcnZhbCNjb250YWluc30sIHtAbGluayBJbnRlcnZhbCNpc0FmdGVyfSwgb3Ige0BsaW5rIEludGVydmFsI2lzQmVmb3JlfS5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqIFRvIGNyZWF0ZSBvdGhlciBJbnRlcnZhbHMgb3V0IG9mIHRoaXMgb25lLCB1c2Uge0BsaW5rIEludGVydmFsI3NldH0sIHtAbGluayBJbnRlcnZhbCNzcGxpdEF0fSwge0BsaW5rIEludGVydmFsI3NwbGl0Qnl9LCB7QGxpbmsgSW50ZXJ2YWwjZGl2aWRlRXF1YWxseX0sIHtAbGluayBJbnRlcnZhbCNtZXJnZX0sIHtAbGluayBJbnRlcnZhbCN4b3J9LCB7QGxpbmsgSW50ZXJ2YWwjdW5pb259LCB7QGxpbmsgSW50ZXJ2YWwjaW50ZXJzZWN0aW9ufSwgb3Ige0BsaW5rIEludGVydmFsI2RpZmZlcmVuY2V9LlxuICogKiAqKkNvbXBhcmlzb24qKiBUbyBjb21wYXJlIHRoaXMgSW50ZXJ2YWwgdG8gYW5vdGhlciBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjZXF1YWxzfSwge0BsaW5rIEludGVydmFsI292ZXJsYXBzfSwge0BsaW5rIEludGVydmFsI2FidXRzU3RhcnR9LCB7QGxpbmsgSW50ZXJ2YWwjYWJ1dHNFbmR9LCB7QGxpbmsgSW50ZXJ2YWwjZW5ndWxmc31cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBJbnRlcnZhbCBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBJbnRlcnZhbCN0b1N0cmluZ30sIHtAbGluayBJbnRlcnZhbCN0b0lTT30sIHtAbGluayBJbnRlcnZhbCN0b0lTT0RhdGV9LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU09UaW1lfSwge0BsaW5rIEludGVydmFsI3RvRm9ybWF0fSwgYW5kIHtAbGluayBJbnRlcnZhbCN0b0R1cmF0aW9ufS5cbiAqL1xuXG5cbnZhciBJbnRlcnZhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gSW50ZXJ2YWwoY29uZmlnKSB7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5zID0gY29uZmlnLnN0YXJ0O1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5lID0gY29uZmlnLmVuZDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmlzTHV4b25JbnRlcnZhbCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBJbnRlcnZhbCBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuXG5cbiAgSW50ZXJ2YWwuaW52YWxpZCA9IGZ1bmN0aW9uIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbikge1xuICAgIGlmIChleHBsYW5hdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBleHBsYW5hdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgSW50ZXJ2YWwgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnRlcnZhbEVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEludGVydmFsKHtcbiAgICAgICAgaW52YWxpZDogaW52YWxpZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhIHN0YXJ0IERhdGVUaW1lIGFuZCBhbiBlbmQgRGF0ZVRpbWUuIEluY2x1c2l2ZSBvZiB0aGUgc3RhcnQgYnV0IG5vdCB0aGUgZW5kLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBzdGFydFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmRcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyA9IGZ1bmN0aW9uIGZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCkge1xuICAgIHZhciBidWlsdFN0YXJ0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCksXG4gICAgICAgIGJ1aWx0RW5kID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIHZhciB2YWxpZGF0ZUVycm9yID0gdmFsaWRhdGVTdGFydEVuZChidWlsdFN0YXJ0LCBidWlsdEVuZCk7XG5cbiAgICBpZiAodmFsaWRhdGVFcnJvciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEludGVydmFsKHtcbiAgICAgICAgc3RhcnQ6IGJ1aWx0U3RhcnQsXG4gICAgICAgIGVuZDogYnVpbHRFbmRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVFcnJvcjtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGEgRHVyYXRpb24gdG8gZXh0ZW5kIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBzdGFydFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIEludGVydmFsLmFmdGVyID0gZnVuY3Rpb24gYWZ0ZXIoc3RhcnQsIGR1cmF0aW9uKSB7XG4gICAgdmFyIGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0LCBkdC5wbHVzKGR1cikpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhbiBlbmQgRGF0ZVRpbWUgYW5kIGEgRHVyYXRpb24gdG8gZXh0ZW5kIGJhY2t3YXJkcyB0by5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gZW5kXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwuYmVmb3JlID0gZnVuY3Rpb24gYmVmb3JlKGVuZCwgZHVyYXRpb24pIHtcbiAgICB2YXIgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICAgIGR0ID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0Lm1pbnVzKGR1ciksIGR0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nLlxuICAgKiBBY2NlcHRzIGA8c3RhcnQ+LzxlbmQ+YCwgYDxzdGFydD4vPGR1cmF0aW9uPmAsIGFuZCBgPGR1cmF0aW9uPi88ZW5kPmAgZm9ybWF0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSVNPIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIC0gb3B0aW9ucyB0byBwYXNzIHtAbGluayBEYXRlVGltZSNmcm9tSVNPfSBhbmQgb3B0aW9uYWxseSB7QGxpbmsgRHVyYXRpb24jZnJvbUlTT31cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBJbnRlcnZhbC5mcm9tSVNPID0gZnVuY3Rpb24gZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgdmFyIF9zcGxpdCA9ICh0ZXh0IHx8IFwiXCIpLnNwbGl0KFwiL1wiLCAyKSxcbiAgICAgICAgcyA9IF9zcGxpdFswXSxcbiAgICAgICAgZSA9IF9zcGxpdFsxXTtcblxuICAgIGlmIChzICYmIGUpIHtcbiAgICAgIHZhciBzdGFydCwgc3RhcnRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08ocywgb3B0cyk7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IHN0YXJ0LmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW5kLCBlbmRJc1ZhbGlkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBlbmQgPSBEYXRlVGltZS5mcm9tSVNPKGUsIG9wdHMpO1xuICAgICAgICBlbmRJc1ZhbGlkID0gZW5kLmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVuZElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCAmJiBlbmRJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRJc1ZhbGlkKSB7XG4gICAgICAgIHZhciBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKGUsIG9wdHMpO1xuXG4gICAgICAgIGlmIChkdXIuaXNWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBJbnRlcnZhbC5hZnRlcihzdGFydCwgZHVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmRJc1ZhbGlkKSB7XG4gICAgICAgIHZhciBfZHVyID0gRHVyYXRpb24uZnJvbUlTTyhzLCBvcHRzKTtcblxuICAgICAgICBpZiAoX2R1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmJlZm9yZShlbmQsIF9kdXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIFwidGhlIGlucHV0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYW4gSW50ZXJ2YWwuIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBJbnRlcnZhbC5pc0ludGVydmFsID0gZnVuY3Rpb24gaXNJbnRlcnZhbChvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uSW50ZXJ2YWwgfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXJ0IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgdmFyIF9wcm90byA9IEludGVydmFsLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbCBpbiB0aGUgc3BlY2lmaWVkIHVuaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIHJldHVybiB0aGUgbGVuZ3RoIGluLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBfcHJvdG8ubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKHVuaXQpIHtcbiAgICBpZiAodW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgICB1bml0ID0gXCJtaWxsaXNlY29uZHNcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50b0R1cmF0aW9uLmFwcGx5KHRoaXMsIFt1bml0XSkuZ2V0KHVuaXQpIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb3VudCBvZiBtaW51dGVzLCBob3VycywgZGF5cywgbW9udGhzLCBvciB5ZWFycyBpbmNsdWRlZCBpbiB0aGUgSW50ZXJ2YWwsIGV2ZW4gaW4gcGFydC5cbiAgICogVW5saWtlIHtAbGluayBJbnRlcnZhbCNsZW5ndGh9IHRoaXMgY291bnRzIHNlY3Rpb25zIG9mIHRoZSBjYWxlbmRhciwgbm90IHBlcmlvZHMgb2YgdGltZSwgZS5nLiBzcGVjaWZ5aW5nICdkYXknXG4gICAqIGFza3MgJ3doYXQgZGF0ZXMgYXJlIGluY2x1ZGVkIGluIHRoaXMgaW50ZXJ2YWw/Jywgbm90ICdob3cgbWFueSBkYXlzIGxvbmcgaXMgdGhpcyBpbnRlcnZhbD8nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdD0nbWlsbGlzZWNvbmRzJ10gLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvdW50ID0gZnVuY3Rpb24gY291bnQodW5pdCkge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQuc3RhcnRPZih1bml0KSxcbiAgICAgICAgZW5kID0gdGhpcy5lbmQuc3RhcnRPZih1bml0KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpKSArIDE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgYW5kIGVuZCBhcmUgYm90aCBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc1NhbWUgPSBmdW5jdGlvbiBoYXNTYW1lKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5lLm1pbnVzKDEpLmhhc1NhbWUodGhpcy5zLCB1bml0KSA6IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIERhdGVUaW1lcy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucy52YWx1ZU9mKCkgPT09IHRoaXMuZS52YWx1ZU9mKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZnRlciB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0FmdGVyID0gZnVuY3Rpb24gaXNBZnRlcihkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA+IGRhdGVUaW1lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0JlZm9yZSA9IGZ1bmN0aW9uIGlzQmVmb3JlKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5lIDw9IGRhdGVUaW1lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGNvbnRhaW5zIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IGRhdGVUaW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPD0gZGF0ZVRpbWUgJiYgdGhpcy5lID4gZGF0ZVRpbWU7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0c1wiIHRoZSBzdGFydCBhbmQvb3IgZW5kIGRhdGVzLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSB0aGUgdmFsdWVzIHRvIHNldFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSB2YWx1ZXMuc3RhcnQgLSB0aGUgc3RhcnRpbmcgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLmVuZCAtIHRoZSBlbmRpbmcgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgICAgZW5kID0gX3JlZi5lbmQ7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQgfHwgdGhpcy5zLCBlbmQgfHwgdGhpcy5lKTtcbiAgfVxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBhdCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zcGxpdEF0ID0gZnVuY3Rpb24gc3BsaXRBdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkYXRlVGltZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBkYXRlVGltZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIHNvcnRlZCA9IGRhdGVUaW1lcy5tYXAoZnJpZW5kbHlEYXRlVGltZSkuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICByZXR1cm4gX3RoaXMuY29udGFpbnMoZCk7XG4gICAgfSkuc29ydCgpLFxuICAgICAgICByZXN1bHRzID0gW107XG4gICAgdmFyIHMgPSB0aGlzLnMsXG4gICAgICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIHZhciBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsXG4gICAgICAgICAgbmV4dCA9ICthZGRlZCA+ICt0aGlzLmUgPyB0aGlzLmUgOiBhZGRlZDtcbiAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIG5leHQpKTtcbiAgICAgIHMgPSBuZXh0O1xuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gc21hbGxlciBJbnRlcnZhbHMsIGVhY2ggb2YgdGhlIHNwZWNpZmllZCBsZW5ndGguXG4gICAqIExlZnQgb3ZlciB0aW1lIGlzIGdyb3VwZWQgaW50byBhIHNtYWxsZXIgaW50ZXJ2YWxcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBsZW5ndGggb2YgZWFjaCByZXN1bHRpbmcgaW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zcGxpdEJ5ID0gZnVuY3Rpb24gc3BsaXRCeShkdXJhdGlvbikge1xuICAgIHZhciBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFkdXIuaXNWYWxpZCB8fCBkdXIuYXMoXCJtaWxsaXNlY29uZHNcIikgPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgcyA9IHRoaXMucyxcbiAgICAgICAgaWR4ID0gMSxcbiAgICAgICAgbmV4dDtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIHZhciBhZGRlZCA9IHRoaXMuc3RhcnQucGx1cyhkdXIubWFwVW5pdHMoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggKiBpZHg7XG4gICAgICB9KSk7XG4gICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpZHggKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBpbnRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHNtYWxsZXIgaW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyT2ZQYXJ0cyAtIFRoZSBudW1iZXIgb2YgSW50ZXJ2YWxzIHRvIGRpdmlkZSB0aGUgSW50ZXJ2YWwgaW50by5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpdmlkZUVxdWFsbHkgPSBmdW5jdGlvbiBkaXZpZGVFcXVhbGx5KG51bWJlck9mUGFydHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0aGlzLnNwbGl0QnkodGhpcy5sZW5ndGgoKSAvIG51bWJlck9mUGFydHMpLnNsaWNlKDAsIG51bWJlck9mUGFydHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbFxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vdmVybGFwcyA9IGZ1bmN0aW9uIG92ZXJsYXBzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZSA+IG90aGVyLnMgJiYgdGhpcy5zIDwgb3RoZXIuZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3Mgc3RhcnQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFidXRzU3RhcnQgPSBmdW5jdGlvbiBhYnV0c1N0YXJ0KG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gK3RoaXMuZSA9PT0gK290aGVyLnM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3MgZW5kLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hYnV0c0VuZCA9IGZ1bmN0aW9uIGFidXRzRW5kKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gK290aGVyLmUgPT09ICt0aGlzLnM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgZW5ndWxmcyB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmd1bGZzID0gZnVuY3Rpb24gZW5ndWxmcyhvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA8PSBvdGhlci5zICYmIHRoaXMuZSA+PSBvdGhlci5lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIGFzIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFvdGhlci5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucy5lcXVhbHMob3RoZXIucykgJiYgdGhpcy5lLmVxdWFscyhvdGhlci5lKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgYW5kIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHJlc3VsdGluZyBJbnRlcnZhbCBoYXMgdGhlIG1heGltdW0gc3RhcnQgdGltZSBhbmQgdGhlIG1pbmltdW0gZW5kIHRpbWUgb2YgdGhlIHR3byBJbnRlcnZhbHMuXG4gICAqIFJldHVybnMgbnVsbCBpZiB0aGUgaW50ZXJzZWN0aW9uIGlzIGVtcHR5LCBtZWFuaW5nLCB0aGUgaW50ZXJ2YWxzIGRvbid0IGludGVyc2VjdC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcyA9IHRoaXMucyA+IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgICBlID0gdGhpcy5lIDwgb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG5cbiAgICBpZiAocyA+PSBlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSB1bmlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtaW5pbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtYXhpbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5pb24gPSBmdW5jdGlvbiB1bmlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcyA9IHRoaXMucyA8IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgICBlID0gdGhpcy5lID4gb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7XG4gIH1cbiAgLyoqXG4gICAqIE1lcmdlIGFuIGFycmF5IG9mIEludGVydmFscyBpbnRvIGEgZXF1aXZhbGVudCBtaW5pbWFsIHNldCBvZiBJbnRlcnZhbHMuXG4gICAqIENvbWJpbmVzIG92ZXJsYXBwaW5nIGFuZCBhZGphY2VudCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIDtcblxuICBJbnRlcnZhbC5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKGludGVydmFscykge1xuICAgIHZhciBfaW50ZXJ2YWxzJHNvcnQkcmVkdWMgPSBpbnRlcnZhbHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEucyAtIGIucztcbiAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKF9yZWYyLCBpdGVtKSB7XG4gICAgICB2YXIgc29mYXIgPSBfcmVmMlswXSxcbiAgICAgICAgICBjdXJyZW50ID0gX3JlZjJbMV07XG5cbiAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICByZXR1cm4gW3NvZmFyLCBpdGVtXTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5vdmVybGFwcyhpdGVtKSB8fCBjdXJyZW50LmFidXRzU3RhcnQoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIFtzb2ZhciwgY3VycmVudC51bmlvbihpdGVtKV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW3NvZmFyLmNvbmNhdChbY3VycmVudF0pLCBpdGVtXTtcbiAgICAgIH1cbiAgICB9LCBbW10sIG51bGxdKSxcbiAgICAgICAgZm91bmQgPSBfaW50ZXJ2YWxzJHNvcnQkcmVkdWNbMF0sXG4gICAgICAgIGZpbmFsID0gX2ludGVydmFscyRzb3J0JHJlZHVjWzFdO1xuXG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICBmb3VuZC5wdXNoKGZpbmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBJbnRlcnZhbHMgcmVwcmVzZW50aW5nIHRoZSBzcGFucyBvZiB0aW1lIHRoYXQgb25seSBhcHBlYXIgaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0FycmF5fSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwueG9yID0gZnVuY3Rpb24geG9yKGludGVydmFscykge1xuICAgIHZhciBfQXJyYXkkcHJvdG90eXBlO1xuXG4gICAgdmFyIHN0YXJ0ID0gbnVsbCxcbiAgICAgICAgY3VycmVudENvdW50ID0gMDtcblxuICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgIGVuZHMgPSBpbnRlcnZhbHMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgdGltZTogaS5zLFxuICAgICAgICB0eXBlOiBcInNcIlxuICAgICAgfSwge1xuICAgICAgICB0aW1lOiBpLmUsXG4gICAgICAgIHR5cGU6IFwiZVwiXG4gICAgICB9XTtcbiAgICB9KSxcbiAgICAgICAgZmxhdHRlbmVkID0gKF9BcnJheSRwcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUpLmNvbmNhdC5hcHBseShfQXJyYXkkcHJvdG90eXBlLCBlbmRzKSxcbiAgICAgICAgYXJyID0gZmxhdHRlbmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGFyciksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgaSA9IF9zdGVwLnZhbHVlO1xuICAgICAgY3VycmVudENvdW50ICs9IGkudHlwZSA9PT0gXCJzXCIgPyAxIDogLTE7XG5cbiAgICAgIGlmIChjdXJyZW50Q291bnQgPT09IDEpIHtcbiAgICAgICAgc3RhcnQgPSBpLnRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhcnQgJiYgK3N0YXJ0ICE9PSAraS50aW1lKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGkudGltZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5tZXJnZShyZXN1bHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgc3BhbiBvZiB0aW1lIGluIHRoaXMgSW50ZXJ2YWwgdGhhdCBkb2Vzbid0IG92ZXJsYXAgd2l0aCBhbnkgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7Li4uSW50ZXJ2YWx9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uIGRpZmZlcmVuY2UoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVydmFscyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgaW50ZXJ2YWxzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5pbnRlcnNlY3Rpb24oaSk7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gaSAmJiAhaS5pc0VtcHR5KCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIFwiW1wiICsgdGhpcy5zLnRvSVNPKCkgKyBcIiBcXHUyMDEzIFwiICsgdGhpcy5lLnRvSVNPKCkgKyBcIilcIjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTTyA9IGZ1bmN0aW9uIHRvSVNPKG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gdGhpcy5zLnRvSVNPKG9wdHMpICsgXCIvXCIgKyB0aGlzLmUudG9JU08ob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBkYXRlIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSB0aW1lIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT0RhdGUgPSBmdW5jdGlvbiB0b0lTT0RhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIHRoaXMucy50b0lTT0RhdGUoKSArIFwiL1wiICsgdGhpcy5lLnRvSVNPRGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGltZSBvZiB0aGlzIEludGVydmFsLlxuICAgKiBUaGUgZGF0ZSBjb21wb25lbnRzIGFyZSBpZ25vcmVkLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIHNhbWUgb3B0aW9ucyBhcyB7QGxpbmsgRGF0ZVRpbWUjdG9JU099XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU09UaW1lID0gZnVuY3Rpb24gdG9JU09UaW1lKG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gdGhpcy5zLnRvSVNPVGltZShvcHRzKSArIFwiL1wiICsgdGhpcy5lLnRvSVNPVGltZShvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0ZUZvcm1hdCAtIHRoZSBmb3JtYXQgc3RyaW5nLiBUaGlzIHN0cmluZyBmb3JtYXRzIHRoZSBzdGFydCBhbmQgZW5kIHRpbWUuIFNlZSB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9IGZvciBkZXRhaWxzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNlcGFyYXRvciA9ICAnIOKAkyAnXSAtIGEgc2VwYXJhdG9yIHRvIHBsYWNlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgcmVwcmVzZW50YXRpb25zXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9Gb3JtYXQgPSBmdW5jdGlvbiB0b0Zvcm1hdChkYXRlRm9ybWF0LCBfdGVtcDIpIHtcbiAgICB2YXIgX3JlZjMgPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyLFxuICAgICAgICBfcmVmMyRzZXBhcmF0b3IgPSBfcmVmMy5zZXBhcmF0b3IsXG4gICAgICAgIHNlcGFyYXRvciA9IF9yZWYzJHNlcGFyYXRvciA9PT0gdm9pZCAwID8gXCIg4oCTIFwiIDogX3JlZjMkc2VwYXJhdG9yO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIFwiXCIgKyB0aGlzLnMudG9Gb3JtYXQoZGF0ZUZvcm1hdCkgKyBzZXBhcmF0b3IgKyB0aGlzLmUudG9Gb3JtYXQoZGF0ZUZvcm1hdCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhIER1cmF0aW9uIHJlcHJlc2VudGluZyB0aGUgdGltZSBzcGFubmVkIGJ5IHRoaXMgaW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDg4NDg5MjU3IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignZGF5cycpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDEuMDI0MTgxMjE1Mjc3Nzc3OCB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQuODIwOTUgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcycsICdzZWNvbmRzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQsIHNlY29uZHM6IDQ5LjI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ3NlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBzZWNvbmRzOiA4ODQ4OS4yNTcgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9EdXJhdGlvbiA9IGZ1bmN0aW9uIHRvRHVyYXRpb24odW5pdCwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCh0aGlzLmludmFsaWRSZWFzb24pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmUuZGlmZih0aGlzLnMsIHVuaXQsIG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gbWFwRm4gb24gdGhlIGludGVydmFsIHN0YXJ0IGFuZCBlbmQsIHJldHVybmluZyBhIG5ldyBJbnRlcnZhbCBmcm9tIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1hcEZuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQudG9VVEMoKSlcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikubWFwRW5kcG9pbnRzKGVuZHBvaW50ID0+IGVuZHBvaW50LnBsdXMoeyBob3VyczogMiB9KSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFwRW5kcG9pbnRzID0gZnVuY3Rpb24gbWFwRW5kcG9pbnRzKG1hcEZuKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMobWFwRm4odGhpcy5zKSwgbWFwRm4odGhpcy5lKSk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKEludGVydmFsLCBbe1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMucyA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVuZCBvZiB0aGUgSW50ZXJ2YWxcbiAgICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJlbmRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhdCBsZWFzdCBpdHMgc3RhcnQsIG1lYW5pbmcgdGhhdCB0aGUgSW50ZXJ2YWwgaXNuJ3QgJ2JhY2t3YXJkcycuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc1ZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZhbGlkUmVhc29uID09PSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBJbnRlcnZhbCBpcyBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnZhbGlkUmVhc29uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImludmFsaWRFeHBsYW5hdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEludGVydmFsO1xufSgpO1xuXG4vKipcbiAqIFRoZSBJbmZvIGNsYXNzIGNvbnRhaW5zIHN0YXRpYyBtZXRob2RzIGZvciByZXRyaWV2aW5nIGdlbmVyYWwgdGltZSBhbmQgZGF0ZSByZWxhdGVkIGRhdGEuIEZvciBleGFtcGxlLCBpdCBoYXMgbWV0aG9kcyBmb3IgZmluZGluZyBvdXQgaWYgYSB0aW1lIHpvbmUgaGFzIGEgRFNULCBmb3IgbGlzdGluZyB0aGUgbW9udGhzIGluIGFueSBzdXBwb3J0ZWQgbG9jYWxlLCBhbmQgZm9yIGRpc2NvdmVyaW5nIHdoaWNoIG9mIEx1eG9uIGZlYXR1cmVzIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIEluZm8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbmZvKCkge31cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB6b25lIGNvbnRhaW5zIGEgRFNULlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIFpvbmUgdG8gY2hlY2suIERlZmF1bHRzIHRvIHRoZSBlbnZpcm9ubWVudCdzIGxvY2FsIHpvbmUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBJbmZvLmhhc0RTVCA9IGZ1bmN0aW9uIGhhc0RTVCh6b25lKSB7XG4gICAgaWYgKHpvbmUgPT09IHZvaWQgMCkge1xuICAgICAgem9uZSA9IFNldHRpbmdzLmRlZmF1bHRab25lO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IERhdGVUaW1lLm5vdygpLnNldFpvbmUoem9uZSkuc2V0KHtcbiAgICAgIG1vbnRoOiAxMlxuICAgIH0pO1xuICAgIHJldHVybiAhem9uZS5pc1VuaXZlcnNhbCAmJiBwcm90by5vZmZzZXQgIT09IHByb3RvLnNldCh7XG4gICAgICBtb250aDogNlxuICAgIH0pLm9mZnNldDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB6b25lIGlzIGEgdmFsaWQgSUFOQSBzcGVjaWZpZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gWm9uZSB0byBjaGVja1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIEluZm8uaXNWYWxpZElBTkFab25lID0gZnVuY3Rpb24gaXNWYWxpZElBTkFab25lKHpvbmUpIHtcbiAgICByZXR1cm4gSUFOQVpvbmUuaXNWYWxpZFpvbmUoem9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBpbnB1dCBpbnRvIGEge0BsaW5rIFpvbmV9IGluc3RhbmNlLlxuICAgKlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYWxyZWFkeSBhIFpvbmUgaW5zdGFuY2UsIGl0IGlzIHJldHVybmVkIHVuY2hhbmdlZC5cbiAgICogKiBJZiBgaW5wdXRgIGlzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSB2YWxpZCB0aW1lIHpvbmUgbmFtZSwgYSBab25lIGluc3RhbmNlXG4gICAqICAgd2l0aCB0aGF0IG5hbWUgaXMgcmV0dXJuZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBhIHN0cmluZyB0aGF0IGRvZXNuJ3QgcmVmZXIgdG8gYSBrbm93biB0aW1lIHpvbmUsIGEgWm9uZVxuICAgKiAgIGluc3RhbmNlIHdpdGgge0BsaW5rIFpvbmUjaXNWYWxpZH0gPT0gZmFsc2UgaXMgcmV0dXJuZWQuXG4gICAqICogSWYgYGlucHV0IGlzIGEgbnVtYmVyLCBhIFpvbmUgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGZpeGVkIG9mZnNldFxuICAgKiAgIGluIG1pbnV0ZXMgaXMgcmV0dXJuZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIHRoZSBkZWZhdWx0IHpvbmUgaXMgcmV0dXJuZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV8bnVtYmVyfSBbaW5wdXRdIC0gdGhlIHZhbHVlIHRvIGJlIGNvbnZlcnRlZFxuICAgKiBAcmV0dXJuIHtab25lfVxuICAgKi9cbiAgO1xuXG4gIEluZm8ubm9ybWFsaXplWm9uZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVpvbmUkMShpbnB1dCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIG1vbnRoIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoKVswXSAvLz0+ICdKYW51YXJ5J1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJylbMF0gLy89PiAnMSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSApWzBdIC8vPT4gJ2phbnYuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ9mhJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbG9uZycsIHsgb3V0cHV0Q2FsZW5kYXI6ICdpc2xhbWljJyB9KVswXSAvLz0+ICdSYWJpyrsgSSdcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICA7XG5cbiAgSW5mby5tb250aHMgPSBmdW5jdGlvbiBtb250aHMobGVuZ3RoLCBfdGVtcCkge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZiRsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgICAgbG9jYWxlID0gX3JlZiRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJGxvY2FsZSxcbiAgICAgICAgX3JlZiRudW1iZXJpbmdTeXN0ZW0gPSBfcmVmLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZiRudW1iZXJpbmdTeXN0ZW0gPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgX3JlZiRsb2NPYmogPSBfcmVmLmxvY09iaixcbiAgICAgICAgbG9jT2JqID0gX3JlZiRsb2NPYmogPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJGxvY09iaixcbiAgICAgICAgX3JlZiRvdXRwdXRDYWxlbmRhciA9IF9yZWYub3V0cHV0Q2FsZW5kYXIsXG4gICAgICAgIG91dHB1dENhbGVuZGFyID0gX3JlZiRvdXRwdXRDYWxlbmRhciA9PT0gdm9pZCAwID8gXCJncmVnb3J5XCIgOiBfcmVmJG91dHB1dENhbGVuZGFyO1xuXG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCBtb250aCBuYW1lcy5cbiAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI21vbnRoc31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIDtcblxuICBJbmZvLm1vbnRoc0Zvcm1hdCA9IGZ1bmN0aW9uIG1vbnRoc0Zvcm1hdChsZW5ndGgsIF90ZW1wMikge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYyID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMixcbiAgICAgICAgX3JlZjIkbG9jYWxlID0gX3JlZjIubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfcmVmMiRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMiRsb2NhbGUsXG4gICAgICAgIF9yZWYyJG51bWJlcmluZ1N5c3RlbSA9IF9yZWYyLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZjIkbnVtYmVyaW5nU3lzdGVtID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjIkbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBfcmVmMiRsb2NPYmogPSBfcmVmMi5sb2NPYmosXG4gICAgICAgIGxvY09iaiA9IF9yZWYyJGxvY09iaiA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYyJGxvY09iaixcbiAgICAgICAgX3JlZjIkb3V0cHV0Q2FsZW5kYXIgPSBfcmVmMi5vdXRwdXRDYWxlbmRhcixcbiAgICAgICAgb3V0cHV0Q2FsZW5kYXIgPSBfcmVmMiRvdXRwdXRDYWxlbmRhciA9PT0gdm9pZCAwID8gXCJncmVnb3J5XCIgOiBfcmVmMiRvdXRwdXRDYWxlbmRhcjtcblxuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSkubW9udGhzKGxlbmd0aCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIHdlZWsgbmFtZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIHdlZWtkYXkgcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygpWzBdIC8vPT4gJ01vbmRheSdcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygnc2hvcnQnKVswXSAvLz0+ICdNb24nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSlbMF0gLy89PiAnbHVuLidcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygnc2hvcnQnLCB7IGxvY2FsZTogJ2FyJyB9KVswXSAvLz0+ICfYp9mE2KfYq9mG2YrZhidcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICA7XG5cbiAgSW5mby53ZWVrZGF5cyA9IGZ1bmN0aW9uIHdlZWtkYXlzKGxlbmd0aCwgX3RlbXAzKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICBsZW5ndGggPSBcImxvbmdcIjtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzLFxuICAgICAgICBfcmVmMyRsb2NhbGUgPSBfcmVmMy5sb2NhbGUsXG4gICAgICAgIGxvY2FsZSA9IF9yZWYzJGxvY2FsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzJGxvY2FsZSxcbiAgICAgICAgX3JlZjMkbnVtYmVyaW5nU3lzdGVtID0gX3JlZjMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmMyRudW1iZXJpbmdTeXN0ZW0gPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMyRudW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIF9yZWYzJGxvY09iaiA9IF9yZWYzLmxvY09iaixcbiAgICAgICAgbG9jT2JqID0gX3JlZjMkbG9jT2JqID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjMkbG9jT2JqO1xuXG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkpLndlZWtkYXlzKGxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgd2VlayBuYW1lcy5cbiAgICogRm9ybWF0IHdlZWtkYXlzIGRpZmZlciBmcm9tIHN0YW5kYWxvbmUgd2Vla2RheXMgaW4gdGhhdCB0aGV5J3JlIG1lYW50IHRvIGFwcGVhciBuZXh0IHRvIG1vcmUgZGF0ZSBpbmZvcm1hdGlvbi4gSW4gc29tZSBsYW5ndWFnZXMsIHRoYXRcbiAgICogY2hhbmdlcyB0aGUgc3RyaW5nLlxuICAgKiBTZWUge0BsaW5rIEluZm8jd2Vla2RheXN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm5hcnJvd1wiLCBcInNob3J0XCIsIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT1udWxsXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgO1xuXG4gIEluZm8ud2Vla2RheXNGb3JtYXQgPSBmdW5jdGlvbiB3ZWVrZGF5c0Zvcm1hdChsZW5ndGgsIF90ZW1wNCkge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWY0ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNCxcbiAgICAgICAgX3JlZjQkbG9jYWxlID0gX3JlZjQubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfcmVmNCRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNCRsb2NhbGUsXG4gICAgICAgIF9yZWY0JG51bWJlcmluZ1N5c3RlbSA9IF9yZWY0Lm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZjQkbnVtYmVyaW5nU3lzdGVtID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjQkbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBfcmVmNCRsb2NPYmogPSBfcmVmNC5sb2NPYmosXG4gICAgICAgIGxvY09iaiA9IF9yZWY0JGxvY09iaiA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY0JGxvY09iajtcblxuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgbWVyaWRpZW1zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5tZXJpZGllbXMoKSAvLz0+IFsgJ0FNJywgJ1BNJyBdXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKHsgbG9jYWxlOiAnbXknIH0pIC8vPT4gWyAn4YCU4YC24YCU4YCA4YC6JywgJ+GAiuGAlOGAsScgXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIDtcblxuICBJbmZvLm1lcmlkaWVtcyA9IGZ1bmN0aW9uIG1lcmlkaWVtcyhfdGVtcDUpIHtcbiAgICB2YXIgX3JlZjUgPSBfdGVtcDUgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA1LFxuICAgICAgICBfcmVmNSRsb2NhbGUgPSBfcmVmNS5sb2NhbGUsXG4gICAgICAgIGxvY2FsZSA9IF9yZWY1JGxvY2FsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1JGxvY2FsZTtcblxuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSkubWVyaWRpZW1zKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBlcmFzLCBzdWNoIGFzIFsnQkMnLCAnQUQnXS4gVGhlIGxvY2FsZSBjYW4gYmUgc3BlY2lmaWVkLCBidXQgdGhlIGNhbGVuZGFyIHN5c3RlbSBpcyBhbHdheXMgR3JlZ29yaWFuLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nc2hvcnQnXSAtIHRoZSBsZW5ndGggb2YgdGhlIGVyYSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcInNob3J0XCIgb3IgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoKSAvLz0+IFsgJ0JDJywgJ0FEJyBdXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygnbG9uZycpIC8vPT4gWyAnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnLCB7IGxvY2FsZTogJ2ZyJyB9KSAvLz0+IFsgJ2F2YW50IErDqXN1cy1DaHJpc3QnLCAnYXByw6hzIErDqXN1cy1DaHJpc3QnIF1cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICA7XG5cbiAgSW5mby5lcmFzID0gZnVuY3Rpb24gZXJhcyhsZW5ndGgsIF90ZW1wNikge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJzaG9ydFwiO1xuICAgIH1cblxuICAgIHZhciBfcmVmNiA9IF90ZW1wNiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDYsXG4gICAgICAgIF9yZWY2JGxvY2FsZSA9IF9yZWY2LmxvY2FsZSxcbiAgICAgICAgbG9jYWxlID0gX3JlZjYkbG9jYWxlID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjYkbG9jYWxlO1xuXG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudWxsLCBcImdyZWdvcnlcIikuZXJhcyhsZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAgICogU29tZSBmZWF0dXJlcyBvZiBMdXhvbiBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgZW52aXJvbm1lbnRzLiBGb3IgZXhhbXBsZSwgb24gb2xkZXIgYnJvd3NlcnMsIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGluZyBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmdcbiAgICogQGV4YW1wbGUgSW5mby5mZWF0dXJlcygpIC8vPT4geyByZWxhdGl2ZTogZmFsc2UgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgSW5mby5mZWF0dXJlcyA9IGZ1bmN0aW9uIGZlYXR1cmVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZWxhdGl2ZTogaGFzUmVsYXRpdmUoKVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIEluZm87XG59KCk7XG5cbmZ1bmN0aW9uIGRheURpZmYoZWFybGllciwgbGF0ZXIpIHtcbiAgdmFyIHV0Y0RheVN0YXJ0ID0gZnVuY3Rpb24gdXRjRGF5U3RhcnQoZHQpIHtcbiAgICByZXR1cm4gZHQudG9VVEMoMCwge1xuICAgICAga2VlcExvY2FsVGltZTogdHJ1ZVxuICAgIH0pLnN0YXJ0T2YoXCJkYXlcIikudmFsdWVPZigpO1xuICB9LFxuICAgICAgbXMgPSB1dGNEYXlTdGFydChsYXRlcikgLSB1dGNEYXlTdGFydChlYXJsaWVyKTtcblxuICByZXR1cm4gTWF0aC5mbG9vcihEdXJhdGlvbi5mcm9tTWlsbGlzKG1zKS5hcyhcImRheXNcIikpO1xufVxuXG5mdW5jdGlvbiBoaWdoT3JkZXJEaWZmcyhjdXJzb3IsIGxhdGVyLCB1bml0cykge1xuICB2YXIgZGlmZmVycyA9IFtbXCJ5ZWFyc1wiLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLnllYXIgLSBhLnllYXI7XG4gIH1dLCBbXCJxdWFydGVyc1wiLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLnF1YXJ0ZXIgLSBhLnF1YXJ0ZXI7XG4gIH1dLCBbXCJtb250aHNcIiwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyO1xuICB9XSwgW1wid2Vla3NcIiwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGF5cyA9IGRheURpZmYoYSwgYik7XG4gICAgcmV0dXJuIChkYXlzIC0gZGF5cyAlIDcpIC8gNztcbiAgfV0sIFtcImRheXNcIiwgZGF5RGlmZl1dO1xuICB2YXIgcmVzdWx0cyA9IHt9O1xuICB2YXIgbG93ZXN0T3JkZXIsIGhpZ2hXYXRlcjtcblxuICBmb3IgKHZhciBfaSA9IDAsIF9kaWZmZXJzID0gZGlmZmVyczsgX2kgPCBfZGlmZmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgX2RpZmZlcnMkX2kgPSBfZGlmZmVyc1tfaV0sXG4gICAgICAgIHVuaXQgPSBfZGlmZmVycyRfaVswXSxcbiAgICAgICAgZGlmZmVyID0gX2RpZmZlcnMkX2lbMV07XG5cbiAgICBpZiAodW5pdHMuaW5kZXhPZih1bml0KSA+PSAwKSB7XG4gICAgICB2YXIgX2N1cnNvciRwbHVzO1xuXG4gICAgICBsb3dlc3RPcmRlciA9IHVuaXQ7XG4gICAgICB2YXIgZGVsdGEgPSBkaWZmZXIoY3Vyc29yLCBsYXRlcik7XG4gICAgICBoaWdoV2F0ZXIgPSBjdXJzb3IucGx1cygoX2N1cnNvciRwbHVzID0ge30sIF9jdXJzb3IkcGx1c1t1bml0XSA9IGRlbHRhLCBfY3Vyc29yJHBsdXMpKTtcblxuICAgICAgaWYgKGhpZ2hXYXRlciA+IGxhdGVyKSB7XG4gICAgICAgIHZhciBfY3Vyc29yJHBsdXMyO1xuXG4gICAgICAgIGN1cnNvciA9IGN1cnNvci5wbHVzKChfY3Vyc29yJHBsdXMyID0ge30sIF9jdXJzb3IkcGx1czJbdW5pdF0gPSBkZWx0YSAtIDEsIF9jdXJzb3IkcGx1czIpKTtcbiAgICAgICAgZGVsdGEgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1t1bml0XSA9IGRlbHRhO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXTtcbn1cblxuZnVuY3Rpb24gX2RpZmYgKGVhcmxpZXIsIGxhdGVyLCB1bml0cywgb3B0cykge1xuICB2YXIgX2hpZ2hPcmRlckRpZmZzID0gaGlnaE9yZGVyRGlmZnMoZWFybGllciwgbGF0ZXIsIHVuaXRzKSxcbiAgICAgIGN1cnNvciA9IF9oaWdoT3JkZXJEaWZmc1swXSxcbiAgICAgIHJlc3VsdHMgPSBfaGlnaE9yZGVyRGlmZnNbMV0sXG4gICAgICBoaWdoV2F0ZXIgPSBfaGlnaE9yZGVyRGlmZnNbMl0sXG4gICAgICBsb3dlc3RPcmRlciA9IF9oaWdoT3JkZXJEaWZmc1szXTtcblxuICB2YXIgcmVtYWluaW5nTWlsbGlzID0gbGF0ZXIgLSBjdXJzb3I7XG4gIHZhciBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIoZnVuY3Rpb24gKHUpIHtcbiAgICByZXR1cm4gW1wiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiXS5pbmRleE9mKHUpID49IDA7XG4gIH0pO1xuXG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGhpZ2hXYXRlciA8IGxhdGVyKSB7XG4gICAgICB2YXIgX2N1cnNvciRwbHVzMztcblxuICAgICAgaGlnaFdhdGVyID0gY3Vyc29yLnBsdXMoKF9jdXJzb3IkcGx1czMgPSB7fSwgX2N1cnNvciRwbHVzM1tsb3dlc3RPcmRlcl0gPSAxLCBfY3Vyc29yJHBsdXMzKSk7XG4gICAgfVxuXG4gICAgaWYgKGhpZ2hXYXRlciAhPT0gY3Vyc29yKSB7XG4gICAgICByZXN1bHRzW2xvd2VzdE9yZGVyXSA9IChyZXN1bHRzW2xvd2VzdE9yZGVyXSB8fCAwKSArIHJlbWFpbmluZ01pbGxpcyAvIChoaWdoV2F0ZXIgLSBjdXJzb3IpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkdXJhdGlvbiA9IER1cmF0aW9uLmZyb21PYmplY3QocmVzdWx0cywgb3B0cyk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIF9EdXJhdGlvbiRmcm9tTWlsbGlzO1xuXG4gICAgcmV0dXJuIChfRHVyYXRpb24kZnJvbU1pbGxpcyA9IER1cmF0aW9uLmZyb21NaWxsaXMocmVtYWluaW5nTWlsbGlzLCBvcHRzKSkuc2hpZnRUby5hcHBseShfRHVyYXRpb24kZnJvbU1pbGxpcywgbG93ZXJPcmRlclVuaXRzKS5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cblxudmFyIG51bWJlcmluZ1N5c3RlbXMgPSB7XG4gIGFyYWI6IFwiW1xcdTA2NjAtXFx1MDY2OV1cIixcbiAgYXJhYmV4dDogXCJbXFx1MDZGMC1cXHUwNkY5XVwiLFxuICBiYWxpOiBcIltcXHUxQjUwLVxcdTFCNTldXCIsXG4gIGJlbmc6IFwiW1xcdTA5RTYtXFx1MDlFRl1cIixcbiAgZGV2YTogXCJbXFx1MDk2Ni1cXHUwOTZGXVwiLFxuICBmdWxsd2lkZTogXCJbXFx1RkYxMC1cXHVGRjE5XVwiLFxuICBndWpyOiBcIltcXHUwQUU2LVxcdTBBRUZdXCIsXG4gIGhhbmlkZWM6IFwiW+OAh3zkuIB85LqMfOS4iXzlm5t85LqUfOWFrXzkuIN85YWrfOS5nV1cIixcbiAga2htcjogXCJbXFx1MTdFMC1cXHUxN0U5XVwiLFxuICBrbmRhOiBcIltcXHUwQ0U2LVxcdTBDRUZdXCIsXG4gIGxhb286IFwiW1xcdTBFRDAtXFx1MEVEOV1cIixcbiAgbGltYjogXCJbXFx1MTk0Ni1cXHUxOTRGXVwiLFxuICBtbHltOiBcIltcXHUwRDY2LVxcdTBENkZdXCIsXG4gIG1vbmc6IFwiW1xcdTE4MTAtXFx1MTgxOV1cIixcbiAgbXltcjogXCJbXFx1MTA0MC1cXHUxMDQ5XVwiLFxuICBvcnlhOiBcIltcXHUwQjY2LVxcdTBCNkZdXCIsXG4gIHRhbWxkZWM6IFwiW1xcdTBCRTYtXFx1MEJFRl1cIixcbiAgdGVsdTogXCJbXFx1MEM2Ni1cXHUwQzZGXVwiLFxuICB0aGFpOiBcIltcXHUwRTUwLVxcdTBFNTldXCIsXG4gIHRpYnQ6IFwiW1xcdTBGMjAtXFx1MEYyOV1cIixcbiAgbGF0bjogXCJcXFxcZFwiXG59O1xudmFyIG51bWJlcmluZ1N5c3RlbXNVVEYxNiA9IHtcbiAgYXJhYjogWzE2MzIsIDE2NDFdLFxuICBhcmFiZXh0OiBbMTc3NiwgMTc4NV0sXG4gIGJhbGk6IFs2OTkyLCA3MDAxXSxcbiAgYmVuZzogWzI1MzQsIDI1NDNdLFxuICBkZXZhOiBbMjQwNiwgMjQxNV0sXG4gIGZ1bGx3aWRlOiBbNjUyOTYsIDY1MzAzXSxcbiAgZ3VqcjogWzI3OTAsIDI3OTldLFxuICBraG1yOiBbNjExMiwgNjEyMV0sXG4gIGtuZGE6IFszMzAyLCAzMzExXSxcbiAgbGFvbzogWzM3OTIsIDM4MDFdLFxuICBsaW1iOiBbNjQ3MCwgNjQ3OV0sXG4gIG1seW06IFszNDMwLCAzNDM5XSxcbiAgbW9uZzogWzYxNjAsIDYxNjldLFxuICBteW1yOiBbNDE2MCwgNDE2OV0sXG4gIG9yeWE6IFsyOTE4LCAyOTI3XSxcbiAgdGFtbGRlYzogWzMwNDYsIDMwNTVdLFxuICB0ZWx1OiBbMzE3NCwgMzE4M10sXG4gIHRoYWk6IFszNjY0LCAzNjczXSxcbiAgdGlidDogWzM4NzIsIDM4ODFdXG59O1xudmFyIGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5mdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgdmFyIHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICBpZiAoc3RyW2ldLnNlYXJjaChudW1iZXJpbmdTeXN0ZW1zLmhhbmlkZWMpICE9PSAtMSkge1xuICAgICAgICB2YWx1ZSArPSBoYW5pZGVjQ2hhcnMuaW5kZXhPZihzdHJbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG51bWJlcmluZ1N5c3RlbXNVVEYxNikge1xuICAgICAgICAgIHZhciBfbnVtYmVyaW5nU3lzdGVtc1VURiA9IG51bWJlcmluZ1N5c3RlbXNVVEYxNltrZXldLFxuICAgICAgICAgICAgICBtaW4gPSBfbnVtYmVyaW5nU3lzdGVtc1VURlswXSxcbiAgICAgICAgICAgICAgbWF4ID0gX251bWJlcmluZ1N5c3RlbXNVVEZbMV07XG5cbiAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNvZGUgLSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBkaWdpdFJlZ2V4KF9yZWYsIGFwcGVuZCkge1xuICB2YXIgbnVtYmVyaW5nU3lzdGVtID0gX3JlZi5udW1iZXJpbmdTeXN0ZW07XG5cbiAgaWYgKGFwcGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgYXBwZW5kID0gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXCIgKyBudW1iZXJpbmdTeXN0ZW1zW251bWJlcmluZ1N5c3RlbSB8fCBcImxhdG5cIl0gKyBhcHBlbmQpO1xufVxuXG52YXIgTUlTU0lOR19GVFAgPSBcIm1pc3NpbmcgSW50bC5EYXRlVGltZUZvcm1hdC5mb3JtYXRUb1BhcnRzIHN1cHBvcnRcIjtcblxuZnVuY3Rpb24gaW50VW5pdChyZWdleCwgcG9zdCkge1xuICBpZiAocG9zdCA9PT0gdm9pZCAwKSB7XG4gICAgcG9zdCA9IGZ1bmN0aW9uIHBvc3QoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVnZXg6IHJlZ2V4LFxuICAgIGRlc2VyOiBmdW5jdGlvbiBkZXNlcihfcmVmKSB7XG4gICAgICB2YXIgcyA9IF9yZWZbMF07XG4gICAgICByZXR1cm4gcG9zdChwYXJzZURpZ2l0cyhzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgTkJTUCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTYwKTtcbnZhciBzcGFjZU9yTkJTUCA9IFwiKCB8XCIgKyBOQlNQICsgXCIpXCI7XG52YXIgc3BhY2VPck5CU1BSZWdFeHAgPSBuZXcgUmVnRXhwKHNwYWNlT3JOQlNQLCBcImdcIik7XG5cbmZ1bmN0aW9uIGZpeExpc3RSZWdleChzKSB7XG4gIC8vIG1ha2UgZG90cyBvcHRpb25hbCBhbmQgYWxzbyBtYWtlIHRoZW0gbGl0ZXJhbFxuICAvLyBtYWtlIHNwYWNlIGFuZCBub24gYnJlYWthYmxlIHNwYWNlIGNoYXJhY3RlcnMgaW50ZXJjaGFuZ2VhYmxlXG4gIHJldHVybiBzLnJlcGxhY2UoL1xcLi9nLCBcIlxcXFwuP1wiKS5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBzcGFjZU9yTkJTUCk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwSW5zZW5zaXRpdml0aWVzKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXCIpIC8vIGlnbm9yZSBkb3RzIHRoYXQgd2VyZSBtYWRlIG9wdGlvbmFsXG4gIC5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBcIiBcIikgLy8gaW50ZXJjaGFuZ2Ugc3BhY2UgYW5kIG5ic3BcbiAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9uZU9mKHN0cmluZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgaWYgKHN0cmluZ3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IFJlZ0V4cChzdHJpbmdzLm1hcChmaXhMaXN0UmVnZXgpLmpvaW4oXCJ8XCIpKSxcbiAgICAgIGRlc2VyOiBmdW5jdGlvbiBkZXNlcihfcmVmMikge1xuICAgICAgICB2YXIgcyA9IF9yZWYyWzBdO1xuICAgICAgICByZXR1cm4gc3RyaW5ncy5maW5kSW5kZXgoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpO1xuICAgICAgICB9KSArIHN0YXJ0SW5kZXg7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3Vwcykge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4OiByZWdleCxcbiAgICBkZXNlcjogZnVuY3Rpb24gZGVzZXIoX3JlZjMpIHtcbiAgICAgIHZhciBoID0gX3JlZjNbMV0sXG4gICAgICAgICAgbSA9IF9yZWYzWzJdO1xuICAgICAgcmV0dXJuIHNpZ25lZE9mZnNldChoLCBtKTtcbiAgICB9LFxuICAgIGdyb3VwczogZ3JvdXBzXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZShyZWdleCkge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4OiByZWdleCxcbiAgICBkZXNlcjogZnVuY3Rpb24gZGVzZXIoX3JlZjQpIHtcbiAgICAgIHZhciBzID0gX3JlZjRbMF07XG4gICAgICByZXR1cm4gcztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVRva2VuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIHVuaXRGb3JUb2tlbih0b2tlbiwgbG9jKSB7XG4gIHZhciBvbmUgPSBkaWdpdFJlZ2V4KGxvYyksXG4gICAgICB0d28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Mn1cIiksXG4gICAgICB0aHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInszfVwiKSxcbiAgICAgIGZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NH1cIiksXG4gICAgICBzaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Nn1cIiksXG4gICAgICBvbmVPclR3byA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDJ9XCIpLFxuICAgICAgb25lVG9UaHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDN9XCIpLFxuICAgICAgb25lVG9TaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw2fVwiKSxcbiAgICAgIG9uZVRvTmluZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDl9XCIpLFxuICAgICAgdHdvVG9Gb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezIsNH1cIiksXG4gICAgICBmb3VyVG9TaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NCw2fVwiKSxcbiAgICAgIGxpdGVyYWwgPSBmdW5jdGlvbiBsaXRlcmFsKHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IFJlZ0V4cChlc2NhcGVUb2tlbih0LnZhbCkpLFxuICAgICAgZGVzZXI6IGZ1bmN0aW9uIGRlc2VyKF9yZWY1KSB7XG4gICAgICAgIHZhciBzID0gX3JlZjVbMF07XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfSxcbiAgICAgIGxpdGVyYWw6IHRydWVcbiAgICB9O1xuICB9LFxuICAgICAgdW5pdGF0ZSA9IGZ1bmN0aW9uIHVuaXRhdGUodCkge1xuICAgIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHQudmFsKSB7XG4gICAgICAvLyBlcmFcbiAgICAgIGNhc2UgXCJHXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcInNob3J0XCIsIGZhbHNlKSwgMCk7XG5cbiAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLmVyYXMoXCJsb25nXCIsIGZhbHNlKSwgMCk7XG4gICAgICAvLyB5ZWFyc1xuXG4gICAgICBjYXNlIFwieVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1NpeCk7XG5cbiAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcblxuICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7XG5cbiAgICAgIGNhc2UgXCJ5eXl5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyVG9TaXgpO1xuXG4gICAgICBjYXNlIFwieXl5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHNpeCk7XG4gICAgICAvLyBtb250aHNcblxuICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocyhcInNob3J0XCIsIHRydWUsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCB0cnVlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiTFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJMTFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwic2hvcnRcIiwgZmFsc2UsIGZhbHNlKSwgMSk7XG5cbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCBmYWxzZSwgZmFsc2UpLCAxKTtcbiAgICAgIC8vIGRhdGVzXG5cbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAvLyBvcmRpbmFsc1xuXG4gICAgICBjYXNlIFwib1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcblxuICAgICAgY2FzZSBcIm9vb1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0aHJlZSk7XG4gICAgICAvLyB0aW1lXG5cbiAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiSFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJoaFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiaFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJtbVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwibVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcInNzXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpO1xuXG4gICAgICBjYXNlIFwiU1NTXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcblxuICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVUb05pbmUpO1xuXG4gICAgICBjYXNlIFwidXVcIjpcbiAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJ1dXVcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcbiAgICAgIC8vIG1lcmlkaWVtXG5cbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubWVyaWRpZW1zKCksIDApO1xuICAgICAgLy8gd2Vla1llYXIgKGspXG5cbiAgICAgIGNhc2UgXCJra2trXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuXG4gICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvVG9Gb3VyLCB1bnRydW5jYXRlWWVhcik7XG4gICAgICAvLyB3ZWVrTnVtYmVyIChXKVxuXG4gICAgICBjYXNlIFwiV1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgLy8gd2Vla2RheXNcblxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7XG5cbiAgICAgIGNhc2UgXCJFRUVcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcInNob3J0XCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwibG9uZ1wiLCBmYWxzZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcImNjY1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcImxvbmdcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcbiAgICAgIC8vIG9mZnNldC96b25lXG5cbiAgICAgIGNhc2UgXCJaXCI6XG4gICAgICBjYXNlIFwiWlpcIjpcbiAgICAgICAgcmV0dXJuIG9mZnNldChuZXcgUmVnRXhwKFwiKFsrLV1cIiArIG9uZU9yVHdvLnNvdXJjZSArIFwiKSg/OjooXCIgKyB0d28uc291cmNlICsgXCIpKT9cIiksIDIpO1xuXG4gICAgICBjYXNlIFwiWlpaXCI6XG4gICAgICAgIHJldHVybiBvZmZzZXQobmV3IFJlZ0V4cChcIihbKy1dXCIgKyBvbmVPclR3by5zb3VyY2UgKyBcIikoXCIgKyB0d28uc291cmNlICsgXCIpP1wiKSwgMik7XG4gICAgICAvLyB3ZSBkb24ndCBzdXBwb3J0IFpaWlogKFBTVCkgb3IgWlpaWlogKFBhY2lmaWMgU3RhbmRhcmQgVGltZSkgaW4gcGFyc2luZ1xuICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlXG5cbiAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHVuaXQgPSB1bml0YXRlKHRva2VuKSB8fCB7XG4gICAgaW52YWxpZFJlYXNvbjogTUlTU0lOR19GVFBcbiAgfTtcbiAgdW5pdC50b2tlbiA9IHRva2VuO1xuICByZXR1cm4gdW5pdDtcbn1cblxudmFyIHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsID0ge1xuICB5ZWFyOiB7XG4gICAgXCIyLWRpZ2l0XCI6IFwieXlcIixcbiAgICBudW1lcmljOiBcInl5eXl5XCJcbiAgfSxcbiAgbW9udGg6IHtcbiAgICBudW1lcmljOiBcIk1cIixcbiAgICBcIjItZGlnaXRcIjogXCJNTVwiLFxuICAgIHNob3J0OiBcIk1NTVwiLFxuICAgIGxvbmc6IFwiTU1NTVwiXG4gIH0sXG4gIGRheToge1xuICAgIG51bWVyaWM6IFwiZFwiLFxuICAgIFwiMi1kaWdpdFwiOiBcImRkXCJcbiAgfSxcbiAgd2Vla2RheToge1xuICAgIHNob3J0OiBcIkVFRVwiLFxuICAgIGxvbmc6IFwiRUVFRVwiXG4gIH0sXG4gIGRheXBlcmlvZDogXCJhXCIsXG4gIGRheVBlcmlvZDogXCJhXCIsXG4gIGhvdXI6IHtcbiAgICBudW1lcmljOiBcImhcIixcbiAgICBcIjItZGlnaXRcIjogXCJoaFwiXG4gIH0sXG4gIG1pbnV0ZToge1xuICAgIG51bWVyaWM6IFwibVwiLFxuICAgIFwiMi1kaWdpdFwiOiBcIm1tXCJcbiAgfSxcbiAgc2Vjb25kOiB7XG4gICAgbnVtZXJpYzogXCJzXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwic3NcIlxuICB9XG59O1xuXG5mdW5jdGlvbiB0b2tlbkZvclBhcnQocGFydCwgbG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gIHZhciB0eXBlID0gcGFydC50eXBlLFxuICAgICAgdmFsdWUgPSBwYXJ0LnZhbHVlO1xuXG4gIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiB0cnVlLFxuICAgICAgdmFsOiB2YWx1ZVxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGUgPSBmb3JtYXRPcHRzW3R5cGVdO1xuICB2YXIgdmFsID0gcGFydFR5cGVTdHlsZVRvVG9rZW5WYWxbdHlwZV07XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YWwgPSB2YWxbc3R5bGVdO1xuICB9XG5cbiAgaWYgKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgIHZhbDogdmFsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUmVnZXgodW5pdHMpIHtcbiAgdmFyIHJlID0gdW5pdHMubWFwKGZ1bmN0aW9uICh1KSB7XG4gICAgcmV0dXJuIHUucmVnZXg7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoZiwgcikge1xuICAgIHJldHVybiBmICsgXCIoXCIgKyByLnNvdXJjZSArIFwiKVwiO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIFtcIl5cIiArIHJlICsgXCIkXCIsIHVuaXRzXTtcbn1cblxuZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykge1xuICB2YXIgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIHZhciBhbGwgPSB7fTtcbiAgICB2YXIgbWF0Y2hJbmRleCA9IDE7XG5cbiAgICBmb3IgKHZhciBpIGluIGhhbmRsZXJzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoaGFuZGxlcnMsIGkpKSB7XG4gICAgICAgIHZhciBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgICBncm91cHMgPSBoLmdyb3VwcyA/IGguZ3JvdXBzICsgMSA6IDE7XG5cbiAgICAgICAgaWYgKCFoLmxpdGVyYWwgJiYgaC50b2tlbikge1xuICAgICAgICAgIGFsbFtoLnRva2VuLnZhbFswXV0gPSBoLmRlc2VyKG1hdGNoZXMuc2xpY2UobWF0Y2hJbmRleCwgbWF0Y2hJbmRleCArIGdyb3VwcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Y2hJbmRleCArPSBncm91cHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFttYXRjaGVzLCBhbGxdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbbWF0Y2hlcywge31dO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lRnJvbU1hdGNoZXMobWF0Y2hlcykge1xuICB2YXIgdG9GaWVsZCA9IGZ1bmN0aW9uIHRvRmllbGQodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiU1wiOlxuICAgICAgICByZXR1cm4gXCJtaWxsaXNlY29uZFwiO1xuXG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgcmV0dXJuIFwibWludXRlXCI7XG5cbiAgICAgIGNhc2UgXCJoXCI6XG4gICAgICBjYXNlIFwiSFwiOlxuICAgICAgICByZXR1cm4gXCJob3VyXCI7XG5cbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBcImRheVwiO1xuXG4gICAgICBjYXNlIFwib1wiOlxuICAgICAgICByZXR1cm4gXCJvcmRpbmFsXCI7XG5cbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuXG4gICAgICBjYXNlIFwieVwiOlxuICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG5cbiAgICAgIGNhc2UgXCJFXCI6XG4gICAgICBjYXNlIFwiY1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrZGF5XCI7XG5cbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtOdW1iZXJcIjtcblxuICAgICAgY2FzZSBcImtcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla1llYXJcIjtcblxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFwicXVhcnRlclwiO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHpvbmUgPSBudWxsO1xuICB2YXIgc3BlY2lmaWNPZmZzZXQ7XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnopKSB7XG4gICAgem9uZSA9IElBTkFab25lLmNyZWF0ZShtYXRjaGVzLnopO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLlopKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopO1xuICAgIH1cblxuICAgIHNwZWNpZmljT2Zmc2V0ID0gbWF0Y2hlcy5aO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnEpKSB7XG4gICAgbWF0Y2hlcy5NID0gKG1hdGNoZXMucSAtIDEpICogMyArIDE7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMuaCkpIHtcbiAgICBpZiAobWF0Y2hlcy5oIDwgMTIgJiYgbWF0Y2hlcy5hID09PSAxKSB7XG4gICAgICBtYXRjaGVzLmggKz0gMTI7XG4gICAgfSBlbHNlIGlmIChtYXRjaGVzLmggPT09IDEyICYmIG1hdGNoZXMuYSA9PT0gMCkge1xuICAgICAgbWF0Y2hlcy5oID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAobWF0Y2hlcy5HID09PSAwICYmIG1hdGNoZXMueSkge1xuICAgIG1hdGNoZXMueSA9IC1tYXRjaGVzLnk7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMudSkpIHtcbiAgICBtYXRjaGVzLlMgPSBwYXJzZU1pbGxpcyhtYXRjaGVzLnUpO1xuICB9XG5cbiAgdmFyIHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHIsIGspIHtcbiAgICB2YXIgZiA9IHRvRmllbGQoayk7XG5cbiAgICBpZiAoZikge1xuICAgICAgcltmXSA9IG1hdGNoZXNba107XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIFt2YWxzLCB6b25lLCBzcGVjaWZpY09mZnNldF07XG59XG5cbnZhciBkdW1teURhdGVUaW1lQ2FjaGUgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXREdW1teURhdGVUaW1lKCkge1xuICBpZiAoIWR1bW15RGF0ZVRpbWVDYWNoZSkge1xuICAgIGR1bW15RGF0ZVRpbWVDYWNoZSA9IERhdGVUaW1lLmZyb21NaWxsaXMoMTU1NTU1NTU1NTU1NSk7XG4gIH1cblxuICByZXR1cm4gZHVtbXlEYXRlVGltZUNhY2hlO1xufVxuXG5mdW5jdGlvbiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odG9rZW4sIGxvY2FsZSkge1xuICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHZhciBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4udmFsKTtcblxuICBpZiAoIWZvcm1hdE9wdHMpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICB2YXIgZm9ybWF0dGVyID0gRm9ybWF0dGVyLmNyZWF0ZShsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICB2YXIgcGFydHMgPSBmb3JtYXR0ZXIuZm9ybWF0RGF0ZVRpbWVQYXJ0cyhnZXREdW1teURhdGVUaW1lKCkpO1xuICB2YXIgdG9rZW5zID0gcGFydHMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHRva2VuRm9yUGFydChwLCBsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICB9KTtcblxuICBpZiAodG9rZW5zLmluY2x1ZGVzKHVuZGVmaW5lZCkpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5mdW5jdGlvbiBleHBhbmRNYWNyb1Rva2Vucyh0b2tlbnMsIGxvY2FsZSkge1xuICB2YXIgX0FycmF5JHByb3RvdHlwZTtcblxuICByZXR1cm4gKF9BcnJheSRwcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUpLmNvbmNhdC5hcHBseShfQXJyYXkkcHJvdG90eXBlLCB0b2tlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0LCBsb2NhbGUpO1xuICB9KSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgdmFyIHRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpLFxuICAgICAgdW5pdHMgPSB0b2tlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpO1xuICB9KSxcbiAgICAgIGRpc3F1YWxpZnlpbmdVbml0ID0gdW5pdHMuZmluZChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LmludmFsaWRSZWFzb247XG4gIH0pO1xuXG4gIGlmIChkaXNxdWFsaWZ5aW5nVW5pdCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnB1dDogaW5wdXQsXG4gICAgICB0b2tlbnM6IHRva2VucyxcbiAgICAgIGludmFsaWRSZWFzb246IGRpc3F1YWxpZnlpbmdVbml0LmludmFsaWRSZWFzb25cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBfYnVpbGRSZWdleCA9IGJ1aWxkUmVnZXgodW5pdHMpLFxuICAgICAgICByZWdleFN0cmluZyA9IF9idWlsZFJlZ2V4WzBdLFxuICAgICAgICBoYW5kbGVycyA9IF9idWlsZFJlZ2V4WzFdLFxuICAgICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgICBfbWF0Y2ggPSBtYXRjaChpbnB1dCwgcmVnZXgsIGhhbmRsZXJzKSxcbiAgICAgICAgcmF3TWF0Y2hlcyA9IF9tYXRjaFswXSxcbiAgICAgICAgbWF0Y2hlcyA9IF9tYXRjaFsxXSxcbiAgICAgICAgX3JlZjYgPSBtYXRjaGVzID8gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSA6IFtudWxsLCBudWxsLCB1bmRlZmluZWRdLFxuICAgICAgICByZXN1bHQgPSBfcmVmNlswXSxcbiAgICAgICAgem9uZSA9IF9yZWY2WzFdLFxuICAgICAgICBzcGVjaWZpY09mZnNldCA9IF9yZWY2WzJdO1xuXG4gICAgaWYgKGhhc093blByb3BlcnR5KG1hdGNoZXMsIFwiYVwiKSAmJiBoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcIkhcIikpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IGluY2x1ZGUgbWVyaWRpZW0gd2hlbiBzcGVjaWZ5aW5nIDI0LWhvdXIgZm9ybWF0XCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpbnB1dDogaW5wdXQsXG4gICAgICB0b2tlbnM6IHRva2VucyxcbiAgICAgIHJlZ2V4OiByZWdleCxcbiAgICAgIHJhd01hdGNoZXM6IHJhd01hdGNoZXMsXG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgcmVzdWx0OiByZXN1bHQsXG4gICAgICB6b25lOiB6b25lLFxuICAgICAgc3BlY2lmaWNPZmZzZXQ6IHNwZWNpZmljT2Zmc2V0XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICB2YXIgX2V4cGxhaW5Gcm9tVG9rZW5zID0gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KSxcbiAgICAgIHJlc3VsdCA9IF9leHBsYWluRnJvbVRva2Vucy5yZXN1bHQsXG4gICAgICB6b25lID0gX2V4cGxhaW5Gcm9tVG9rZW5zLnpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldCA9IF9leHBsYWluRnJvbVRva2Vucy5zcGVjaWZpY09mZnNldCxcbiAgICAgIGludmFsaWRSZWFzb24gPSBfZXhwbGFpbkZyb21Ub2tlbnMuaW52YWxpZFJlYXNvbjtcblxuICByZXR1cm4gW3Jlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb25dO1xufVxuXG52YXIgbm9uTGVhcExhZGRlciA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sXG4gICAgbGVhcExhZGRlciA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV07XG5cbmZ1bmN0aW9uIHVuaXRPdXRPZlJhbmdlKHVuaXQsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgSW52YWxpZChcInVuaXQgb3V0IG9mIHJhbmdlXCIsIFwieW91IHNwZWNpZmllZCBcIiArIHZhbHVlICsgXCIgKG9mIHR5cGUgXCIgKyB0eXBlb2YgdmFsdWUgKyBcIikgYXMgYSBcIiArIHVuaXQgKyBcIiwgd2hpY2ggaXMgaW52YWxpZFwiKTtcbn1cblxuZnVuY3Rpb24gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgdmFyIGpzID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXkpKS5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGpzID09PSAwID8gNyA6IGpzO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIHJldHVybiBkYXkgKyAoaXNMZWFwWWVhcih5ZWFyKSA/IGxlYXBMYWRkZXIgOiBub25MZWFwTGFkZGVyKVttb250aCAtIDFdO1xufVxuXG5mdW5jdGlvbiB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpIHtcbiAgdmFyIHRhYmxlID0gaXNMZWFwWWVhcih5ZWFyKSA/IGxlYXBMYWRkZXIgOiBub25MZWFwTGFkZGVyLFxuICAgICAgbW9udGgwID0gdGFibGUuZmluZEluZGV4KGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkgPCBvcmRpbmFsO1xuICB9KSxcbiAgICAgIGRheSA9IG9yZGluYWwgLSB0YWJsZVttb250aDBdO1xuICByZXR1cm4ge1xuICAgIG1vbnRoOiBtb250aDAgKyAxLFxuICAgIGRheTogZGF5XG4gIH07XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBncmVnb3JpYW5Ub1dlZWsoZ3JlZ09iaikge1xuICB2YXIgeWVhciA9IGdyZWdPYmoueWVhcixcbiAgICAgIG1vbnRoID0gZ3JlZ09iai5tb250aCxcbiAgICAgIGRheSA9IGdyZWdPYmouZGF5LFxuICAgICAgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpLFxuICAgICAgd2Vla2RheSA9IGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KTtcbiAgdmFyIHdlZWtOdW1iZXIgPSBNYXRoLmZsb29yKChvcmRpbmFsIC0gd2Vla2RheSArIDEwKSAvIDcpLFxuICAgICAgd2Vla1llYXI7XG5cbiAgaWYgKHdlZWtOdW1iZXIgPCAxKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyIC0gMTtcbiAgICB3ZWVrTnVtYmVyID0gd2Vla3NJbldlZWtZZWFyKHdlZWtZZWFyKTtcbiAgfSBlbHNlIGlmICh3ZWVrTnVtYmVyID4gd2Vla3NJbldlZWtZZWFyKHllYXIpKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyICsgMTtcbiAgICB3ZWVrTnVtYmVyID0gMTtcbiAgfSBlbHNlIHtcbiAgICB3ZWVrWWVhciA9IHllYXI7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHdlZWtZZWFyOiB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXk6IHdlZWtkYXlcbiAgfSwgdGltZU9iamVjdChncmVnT2JqKSk7XG59XG5mdW5jdGlvbiB3ZWVrVG9HcmVnb3JpYW4od2Vla0RhdGEpIHtcbiAgdmFyIHdlZWtZZWFyID0gd2Vla0RhdGEud2Vla1llYXIsXG4gICAgICB3ZWVrTnVtYmVyID0gd2Vla0RhdGEud2Vla051bWJlcixcbiAgICAgIHdlZWtkYXkgPSB3ZWVrRGF0YS53ZWVrZGF5LFxuICAgICAgd2Vla2RheU9mSmFuNCA9IGRheU9mV2Vlayh3ZWVrWWVhciwgMSwgNCksXG4gICAgICB5ZWFySW5EYXlzID0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG4gIHZhciBvcmRpbmFsID0gd2Vla051bWJlciAqIDcgKyB3ZWVrZGF5IC0gd2Vla2RheU9mSmFuNCAtIDMsXG4gICAgICB5ZWFyO1xuXG4gIGlmIChvcmRpbmFsIDwgMSkge1xuICAgIHllYXIgPSB3ZWVrWWVhciAtIDE7XG4gICAgb3JkaW5hbCArPSBkYXlzSW5ZZWFyKHllYXIpO1xuICB9IGVsc2UgaWYgKG9yZGluYWwgPiB5ZWFySW5EYXlzKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyICsgMTtcbiAgICBvcmRpbmFsIC09IGRheXNJblllYXIod2Vla1llYXIpO1xuICB9IGVsc2Uge1xuICAgIHllYXIgPSB3ZWVrWWVhcjtcbiAgfVxuXG4gIHZhciBfdW5jb21wdXRlT3JkaW5hbCA9IHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCksXG4gICAgICBtb250aCA9IF91bmNvbXB1dGVPcmRpbmFsLm1vbnRoLFxuICAgICAgZGF5ID0gX3VuY29tcHV0ZU9yZGluYWwuZGF5O1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgeWVhcjogeWVhcixcbiAgICBtb250aDogbW9udGgsXG4gICAgZGF5OiBkYXlcbiAgfSwgdGltZU9iamVjdCh3ZWVrRGF0YSkpO1xufVxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9PcmRpbmFsKGdyZWdEYXRhKSB7XG4gIHZhciB5ZWFyID0gZ3JlZ0RhdGEueWVhcixcbiAgICAgIG1vbnRoID0gZ3JlZ0RhdGEubW9udGgsXG4gICAgICBkYXkgPSBncmVnRGF0YS5kYXk7XG4gIHZhciBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgeWVhcjogeWVhcixcbiAgICBvcmRpbmFsOiBvcmRpbmFsXG4gIH0sIHRpbWVPYmplY3QoZ3JlZ0RhdGEpKTtcbn1cbmZ1bmN0aW9uIG9yZGluYWxUb0dyZWdvcmlhbihvcmRpbmFsRGF0YSkge1xuICB2YXIgeWVhciA9IG9yZGluYWxEYXRhLnllYXIsXG4gICAgICBvcmRpbmFsID0gb3JkaW5hbERhdGEub3JkaW5hbDtcblxuICB2YXIgX3VuY29tcHV0ZU9yZGluYWwyID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKSxcbiAgICAgIG1vbnRoID0gX3VuY29tcHV0ZU9yZGluYWwyLm1vbnRoLFxuICAgICAgZGF5ID0gX3VuY29tcHV0ZU9yZGluYWwyLmRheTtcblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHllYXI6IHllYXIsXG4gICAgbW9udGg6IG1vbnRoLFxuICAgIGRheTogZGF5XG4gIH0sIHRpbWVPYmplY3Qob3JkaW5hbERhdGEpKTtcbn1cbmZ1bmN0aW9uIGhhc0ludmFsaWRXZWVrRGF0YShvYmopIHtcbiAgdmFyIHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoud2Vla1llYXIpLFxuICAgICAgdmFsaWRXZWVrID0gaW50ZWdlckJldHdlZW4ob2JqLndlZWtOdW1iZXIsIDEsIHdlZWtzSW5XZWVrWWVhcihvYmoud2Vla1llYXIpKSxcbiAgICAgIHZhbGlkV2Vla2RheSA9IGludGVnZXJCZXR3ZWVuKG9iai53ZWVrZGF5LCAxLCA3KTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIndlZWtZZWFyXCIsIG9iai53ZWVrWWVhcik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkV2Vlaykge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIndlZWtcIiwgb2JqLndlZWspO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWtkYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrZGF5XCIsIG9iai53ZWVrZGF5KTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc0ludmFsaWRPcmRpbmFsRGF0YShvYmopIHtcbiAgdmFyIHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksXG4gICAgICB2YWxpZE9yZGluYWwgPSBpbnRlZ2VyQmV0d2VlbihvYmoub3JkaW5hbCwgMSwgZGF5c0luWWVhcihvYmoueWVhcikpO1xuXG4gIGlmICghdmFsaWRZZWFyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwieWVhclwiLCBvYmoueWVhcik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkT3JkaW5hbCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm9yZGluYWxcIiwgb2JqLm9yZGluYWwpO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEob2JqKSB7XG4gIHZhciB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgICAgdmFsaWRNb250aCA9IGludGVnZXJCZXR3ZWVuKG9iai5tb250aCwgMSwgMTIpLFxuICAgICAgdmFsaWREYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmouZGF5LCAxLCBkYXlzSW5Nb250aChvYmoueWVhciwgb2JqLm1vbnRoKSk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ5ZWFyXCIsIG9iai55ZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNb250aCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1vbnRoXCIsIG9iai5tb250aCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkRGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwiZGF5XCIsIG9iai5kYXkpO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzSW52YWxpZFRpbWVEYXRhKG9iaikge1xuICB2YXIgaG91ciA9IG9iai5ob3VyLFxuICAgICAgbWludXRlID0gb2JqLm1pbnV0ZSxcbiAgICAgIHNlY29uZCA9IG9iai5zZWNvbmQsXG4gICAgICBtaWxsaXNlY29uZCA9IG9iai5taWxsaXNlY29uZDtcbiAgdmFyIHZhbGlkSG91ciA9IGludGVnZXJCZXR3ZWVuKGhvdXIsIDAsIDIzKSB8fCBob3VyID09PSAyNCAmJiBtaW51dGUgPT09IDAgJiYgc2Vjb25kID09PSAwICYmIG1pbGxpc2Vjb25kID09PSAwLFxuICAgICAgdmFsaWRNaW51dGUgPSBpbnRlZ2VyQmV0d2VlbihtaW51dGUsIDAsIDU5KSxcbiAgICAgIHZhbGlkU2Vjb25kID0gaW50ZWdlckJldHdlZW4oc2Vjb25kLCAwLCA1OSksXG4gICAgICB2YWxpZE1pbGxpc2Vjb25kID0gaW50ZWdlckJldHdlZW4obWlsbGlzZWNvbmQsIDAsIDk5OSk7XG5cbiAgaWYgKCF2YWxpZEhvdXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJob3VyXCIsIGhvdXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1pbnV0ZSkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1pbnV0ZVwiLCBtaW51dGUpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFNlY29uZCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInNlY29uZFwiLCBzZWNvbmQpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1pbGxpc2Vjb25kKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibWlsbGlzZWNvbmRcIiwgbWlsbGlzZWNvbmQpO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgSU5WQUxJRCA9IFwiSW52YWxpZCBEYXRlVGltZVwiO1xudmFyIE1BWF9EQVRFID0gOC42NGUxNTtcblxuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBcInRoZSB6b25lIFxcXCJcIiArIHpvbmUubmFtZSArIFwiXFxcIiBpcyBub3Qgc3VwcG9ydGVkXCIpO1xufSAvLyB3ZSBjYWNoZSB3ZWVrIGRhdGEgb24gdGhlIERUIG9iamVjdCBhbmQgdGhpcyBpbnRlcm1lZGlhdGVzIHRoZSBjYWNoZVxuXG5cbmZ1bmN0aW9uIHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEoZHQpIHtcbiAgaWYgKGR0LndlZWtEYXRhID09PSBudWxsKSB7XG4gICAgZHQud2Vla0RhdGEgPSBncmVnb3JpYW5Ub1dlZWsoZHQuYyk7XG4gIH1cblxuICByZXR1cm4gZHQud2Vla0RhdGE7XG59IC8vIGNsb25lIHJlYWxseSBtZWFucywgXCJtYWtlIGEgbmV3IG9iamVjdCB3aXRoIHRoZXNlIG1vZGlmaWNhdGlvbnNcIi4gYWxsIFwic2V0dGVyc1wiIHJlYWxseSB1c2UgdGhpc1xuLy8gdG8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aGlsZSBvbmx5IGNoYW5naW5nIHNvbWUgb2YgdGhlIHByb3BlcnRpZXNcblxuXG5mdW5jdGlvbiBjbG9uZShpbnN0LCBhbHRzKSB7XG4gIHZhciBjdXJyZW50ID0ge1xuICAgIHRzOiBpbnN0LnRzLFxuICAgIHpvbmU6IGluc3Quem9uZSxcbiAgICBjOiBpbnN0LmMsXG4gICAgbzogaW5zdC5vLFxuICAgIGxvYzogaW5zdC5sb2MsXG4gICAgaW52YWxpZDogaW5zdC5pbnZhbGlkXG4gIH07XG4gIHJldHVybiBuZXcgRGF0ZVRpbWUoX2V4dGVuZHMoe30sIGN1cnJlbnQsIGFsdHMsIHtcbiAgICBvbGQ6IGN1cnJlbnRcbiAgfSkpO1xufSAvLyBmaW5kIHRoZSByaWdodCBvZmZzZXQgYSBnaXZlbiBsb2NhbCB0aW1lLiBUaGUgbyBpbnB1dCBpcyBvdXIgZ3Vlc3MsIHdoaWNoIGRldGVybWluZXMgd2hpY2hcbi8vIG9mZnNldCB3ZSdsbCBwaWNrIGluIGFtYmlndW91cyBjYXNlcyAoZS5nLiB0aGVyZSBhcmUgdHdvIDMgQU1zIGIvYyBGYWxsYmFjayBEU1QpXG5cblxuZnVuY3Rpb24gZml4T2Zmc2V0KGxvY2FsVFMsIG8sIHR6KSB7XG4gIC8vIE91ciBVVEMgdGltZSBpcyBqdXN0IGEgZ3Vlc3MgYmVjYXVzZSBvdXIgb2Zmc2V0IGlzIGp1c3QgYSBndWVzc1xuICB2YXIgdXRjR3Vlc3MgPSBsb2NhbFRTIC0gbyAqIDYwICogMTAwMDsgLy8gVGVzdCB3aGV0aGVyIHRoZSB6b25lIG1hdGNoZXMgdGhlIG9mZnNldCBmb3IgdGhpcyB0c1xuXG4gIHZhciBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7IC8vIElmIHNvLCBvZmZzZXQgZGlkbid0IGNoYW5nZSBhbmQgd2UncmUgZG9uZVxuXG4gIGlmIChvID09PSBvMikge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG9dO1xuICB9IC8vIElmIG5vdCwgY2hhbmdlIHRoZSB0cyBieSB0aGUgZGlmZmVyZW5jZSBpbiB0aGUgb2Zmc2V0XG5cblxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMTAwMDsgLy8gSWYgdGhhdCBnaXZlcyB1cyB0aGUgbG9jYWwgdGltZSB3ZSB3YW50LCB3ZSdyZSBkb25lXG5cbiAgdmFyIG8zID0gdHoub2Zmc2V0KHV0Y0d1ZXNzKTtcblxuICBpZiAobzIgPT09IG8zKSB7XG4gICAgcmV0dXJuIFt1dGNHdWVzcywgbzJdO1xuICB9IC8vIElmIGl0J3MgZGlmZmVyZW50LCB3ZSdyZSBpbiBhIGhvbGUgdGltZS4gVGhlIG9mZnNldCBoYXMgY2hhbmdlZCwgYnV0IHRoZSB3ZSBkb24ndCBhZGp1c3QgdGhlIHRpbWVcblxuXG4gIHJldHVybiBbbG9jYWxUUyAtIE1hdGgubWluKG8yLCBvMykgKiA2MCAqIDEwMDAsIE1hdGgubWF4KG8yLCBvMyldO1xufSAvLyBjb252ZXJ0IGFuIGVwb2NoIHRpbWVzdGFtcCBpbnRvIGEgY2FsZW5kYXIgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG9mZnNldFxuXG5cbmZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldCkge1xuICB0cyArPSBvZmZzZXQgKiA2MCAqIDEwMDA7XG4gIHZhciBkID0gbmV3IERhdGUodHMpO1xuICByZXR1cm4ge1xuICAgIHllYXI6IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXk6IGQuZ2V0VVRDRGF0ZSgpLFxuICAgIGhvdXI6IGQuZ2V0VVRDSG91cnMoKSxcbiAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLFxuICAgIHNlY29uZDogZC5nZXRVVENTZWNvbmRzKCksXG4gICAgbWlsbGlzZWNvbmQ6IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgfTtcbn0gLy8gY29udmVydCBhIGNhbGVuZGFyIG9iamVjdCB0byBhIGVwb2NoIHRpbWVzdGFtcFxuXG5cbmZ1bmN0aW9uIG9ialRvVFMob2JqLCBvZmZzZXQsIHpvbmUpIHtcbiAgcmV0dXJuIGZpeE9mZnNldChvYmpUb0xvY2FsVFMob2JqKSwgb2Zmc2V0LCB6b25lKTtcbn0gLy8gY3JlYXRlIGEgbmV3IERUIGluc3RhbmNlIGJ5IGFkZGluZyBhIGR1cmF0aW9uLCBhZGp1c3RpbmcgZm9yIERTVHNcblxuXG5mdW5jdGlvbiBhZGp1c3RUaW1lKGluc3QsIGR1cikge1xuICB2YXIgb1ByZSA9IGluc3QubyxcbiAgICAgIHllYXIgPSBpbnN0LmMueWVhciArIE1hdGgudHJ1bmMoZHVyLnllYXJzKSxcbiAgICAgIG1vbnRoID0gaW5zdC5jLm1vbnRoICsgTWF0aC50cnVuYyhkdXIubW9udGhzKSArIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSAqIDMsXG4gICAgICBjID0gX2V4dGVuZHMoe30sIGluc3QuYywge1xuICAgIHllYXI6IHllYXIsXG4gICAgbW9udGg6IG1vbnRoLFxuICAgIGRheTogTWF0aC5taW4oaW5zdC5jLmRheSwgZGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArIE1hdGgudHJ1bmMoZHVyLmRheXMpICsgTWF0aC50cnVuYyhkdXIud2Vla3MpICogN1xuICB9KSxcbiAgICAgIG1pbGxpc1RvQWRkID0gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgeWVhcnM6IGR1ci55ZWFycyAtIE1hdGgudHJ1bmMoZHVyLnllYXJzKSxcbiAgICBxdWFydGVyczogZHVyLnF1YXJ0ZXJzIC0gTWF0aC50cnVuYyhkdXIucXVhcnRlcnMpLFxuICAgIG1vbnRoczogZHVyLm1vbnRocyAtIE1hdGgudHJ1bmMoZHVyLm1vbnRocyksXG4gICAgd2Vla3M6IGR1ci53ZWVrcyAtIE1hdGgudHJ1bmMoZHVyLndlZWtzKSxcbiAgICBkYXlzOiBkdXIuZGF5cyAtIE1hdGgudHJ1bmMoZHVyLmRheXMpLFxuICAgIGhvdXJzOiBkdXIuaG91cnMsXG4gICAgbWludXRlczogZHVyLm1pbnV0ZXMsXG4gICAgc2Vjb25kczogZHVyLnNlY29uZHMsXG4gICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzXG4gIH0pLmFzKFwibWlsbGlzZWNvbmRzXCIpLFxuICAgICAgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyhjKTtcblxuICB2YXIgX2ZpeE9mZnNldCA9IGZpeE9mZnNldChsb2NhbFRTLCBvUHJlLCBpbnN0LnpvbmUpLFxuICAgICAgdHMgPSBfZml4T2Zmc2V0WzBdLFxuICAgICAgbyA9IF9maXhPZmZzZXRbMV07XG5cbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7IC8vIHRoYXQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZSBvZmZzZXQgYnkgZ29pbmcgb3ZlciBhIERTVCwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgdHMgdGhlIHNhbWVcblxuICAgIG8gPSBpbnN0LnpvbmUub2Zmc2V0KHRzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHM6IHRzLFxuICAgIG86IG9cbiAgfTtcbn0gLy8gaGVscGVyIHVzZWZ1bCBpbiB0dXJuaW5nIHRoZSByZXN1bHRzIG9mIHBhcnNpbmcgaW50byByZWFsIGRhdGVzXG4vLyBieSBoYW5kbGluZyB0aGUgem9uZSBvcHRpb25zXG5cblxuZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMsIGZvcm1hdCwgdGV4dCwgc3BlY2lmaWNPZmZzZXQpIHtcbiAgdmFyIHNldFpvbmUgPSBvcHRzLnNldFpvbmUsXG4gICAgICB6b25lID0gb3B0cy56b25lO1xuXG4gIGlmIChwYXJzZWQgJiYgT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggIT09IDApIHtcbiAgICB2YXIgaW50ZXJwcmV0YXRpb25ab25lID0gcGFyc2VkWm9uZSB8fCB6b25lLFxuICAgICAgICBpbnN0ID0gRGF0ZVRpbWUuZnJvbU9iamVjdChwYXJzZWQsIF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmUsXG4gICAgICBzcGVjaWZpY09mZnNldDogc3BlY2lmaWNPZmZzZXRcbiAgICB9KSk7XG4gICAgcmV0dXJuIHNldFpvbmUgPyBpbnN0IDogaW5zdC5zZXRab25lKHpvbmUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKG5ldyBJbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBcInRoZSBpbnB1dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIGNhbid0IGJlIHBhcnNlZCBhcyBcIiArIGZvcm1hdCkpO1xuICB9XG59IC8vIGlmIHlvdSB3YW50IHRvIG91dHB1dCBhIHRlY2huaWNhbCBmb3JtYXQgKGUuZy4gUkZDIDI4MjIpLCB0aGlzIGhlbHBlclxuLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzXG5cblxuZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93Wikge1xuICBpZiAoYWxsb3daID09PSB2b2lkIDApIHtcbiAgICBhbGxvd1ogPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGR0LmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKExvY2FsZS5jcmVhdGUoXCJlbi1VU1wiKSwge1xuICAgIGFsbG93WjogYWxsb3daLFxuICAgIGZvcmNlU2ltcGxlOiB0cnVlXG4gIH0pLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyhkdCwgZm9ybWF0KSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIF90b0lTT0RhdGUobywgZXh0ZW5kZWQpIHtcbiAgdmFyIGxvbmdGb3JtYXQgPSBvLmMueWVhciA+IDk5OTkgfHwgby5jLnllYXIgPCAwO1xuICB2YXIgYyA9IFwiXCI7XG4gIGlmIChsb25nRm9ybWF0ICYmIG8uYy55ZWFyID49IDApIGMgKz0gXCIrXCI7XG4gIGMgKz0gcGFkU3RhcnQoby5jLnllYXIsIGxvbmdGb3JtYXQgPyA2IDogNCk7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9IGVsc2Uge1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9XG5cbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIF90b0lTT1RpbWUobywgZXh0ZW5kZWQsIHN1cHByZXNzU2Vjb25kcywgc3VwcHJlc3NNaWxsaXNlY29uZHMsIGluY2x1ZGVPZmZzZXQpIHtcbiAgdmFyIGMgPSBwYWRTdGFydChvLmMuaG91cik7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIjpcIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuXG4gICAgaWYgKG8uYy5zZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzU2Vjb25kcykge1xuICAgICAgYyArPSBcIjpcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgfVxuXG4gIGlmIChvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuXG4gICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHtcbiAgICAgIGMgKz0gXCIuXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwKSB7XG4gICAgICBjICs9IFwiWlwiO1xuICAgIH0gZWxzZSBpZiAoby5vIDwgMCkge1xuICAgICAgYyArPSBcIi1cIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vIC8gNjApKTtcbiAgICAgIGMgKz0gXCI6XCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoLW8ubyAlIDYwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgKz0gXCIrXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vIC8gNjApKTtcbiAgICAgIGMgKz0gXCI6XCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vICUgNjApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYztcbn0gLy8gZGVmYXVsdHMgZm9yIHVuc3BlY2lmaWVkIHVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzXG5cblxudmFyIGRlZmF1bHRVbml0VmFsdWVzID0ge1xuICBtb250aDogMSxcbiAgZGF5OiAxLFxuICBob3VyOiAwLFxuICBtaW51dGU6IDAsXG4gIHNlY29uZDogMCxcbiAgbWlsbGlzZWNvbmQ6IDBcbn0sXG4gICAgZGVmYXVsdFdlZWtVbml0VmFsdWVzID0ge1xuICB3ZWVrTnVtYmVyOiAxLFxuICB3ZWVrZGF5OiAxLFxuICBob3VyOiAwLFxuICBtaW51dGU6IDAsXG4gIHNlY29uZDogMCxcbiAgbWlsbGlzZWNvbmQ6IDBcbn0sXG4gICAgZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzID0ge1xuICBvcmRpbmFsOiAxLFxuICBob3VyOiAwLFxuICBtaW51dGU6IDAsXG4gIHNlY29uZDogMCxcbiAgbWlsbGlzZWNvbmQ6IDBcbn07IC8vIFVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzLCBzb3J0ZWQgYnkgYmlnbmVzc1xuXG52YXIgb3JkZXJlZFVuaXRzID0gW1wieWVhclwiLCBcIm1vbnRoXCIsIFwiZGF5XCIsIFwiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdLFxuICAgIG9yZGVyZWRXZWVrVW5pdHMgPSBbXCJ3ZWVrWWVhclwiLCBcIndlZWtOdW1iZXJcIiwgXCJ3ZWVrZGF5XCIsIFwiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdLFxuICAgIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTsgLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICB2YXIgbm9ybWFsaXplZCA9IHtcbiAgICB5ZWFyOiBcInllYXJcIixcbiAgICB5ZWFyczogXCJ5ZWFyXCIsXG4gICAgbW9udGg6IFwibW9udGhcIixcbiAgICBtb250aHM6IFwibW9udGhcIixcbiAgICBkYXk6IFwiZGF5XCIsXG4gICAgZGF5czogXCJkYXlcIixcbiAgICBob3VyOiBcImhvdXJcIixcbiAgICBob3VyczogXCJob3VyXCIsXG4gICAgbWludXRlOiBcIm1pbnV0ZVwiLFxuICAgIG1pbnV0ZXM6IFwibWludXRlXCIsXG4gICAgcXVhcnRlcjogXCJxdWFydGVyXCIsXG4gICAgcXVhcnRlcnM6IFwicXVhcnRlclwiLFxuICAgIHNlY29uZDogXCJzZWNvbmRcIixcbiAgICBzZWNvbmRzOiBcInNlY29uZFwiLFxuICAgIG1pbGxpc2Vjb25kOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmRzOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgd2Vla2RheTogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla2RheXM6IFwid2Vla2RheVwiLFxuICAgIHdlZWtudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtzbnVtYmVyOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVrbnVtYmVyczogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3llYXI6IFwid2Vla1llYXJcIixcbiAgICB3ZWVreWVhcnM6IFwid2Vla1llYXJcIixcbiAgICBvcmRpbmFsOiBcIm9yZGluYWxcIlxuICB9W3VuaXQudG9Mb3dlckNhc2UoKV07XG4gIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7XG4gIHJldHVybiBub3JtYWxpemVkO1xufSAvLyB0aGlzIGlzIGEgZHVtYmVkIGRvd24gdmVyc2lvbiBvZiBmcm9tT2JqZWN0KCkgdGhhdCBydW5zIGFib3V0IDYwJSBmYXN0ZXJcbi8vIGJ1dCBkb2Vzbid0IGRvIGFueSB2YWxpZGF0aW9uLCBtYWtlcyBhIGJ1bmNoIG9mIGFzc3VtcHRpb25zIGFib3V0IHdoYXQgdW5pdHNcbi8vIGFyZSBwcmVzZW50LCBhbmQgc28gb24uXG4vLyB0aGlzIGlzIGEgZHVtYmVkIGRvd24gdmVyc2lvbiBvZiBmcm9tT2JqZWN0KCkgdGhhdCBydW5zIGFib3V0IDYwJSBmYXN0ZXJcbi8vIGJ1dCBkb2Vzbid0IGRvIGFueSB2YWxpZGF0aW9uLCBtYWtlcyBhIGJ1bmNoIG9mIGFzc3VtcHRpb25zIGFib3V0IHdoYXQgdW5pdHNcbi8vIGFyZSBwcmVzZW50LCBhbmQgc28gb24uXG5cblxuZnVuY3Rpb24gcXVpY2tEVChvYmosIG9wdHMpIHtcbiAgdmFyIHpvbmUgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgbG9jID0gTG9jYWxlLmZyb21PYmplY3Qob3B0cyksXG4gICAgICB0c05vdyA9IFNldHRpbmdzLm5vdygpO1xuICB2YXIgdHMsIG87IC8vIGFzc3VtZSB3ZSBoYXZlIHRoZSBoaWdoZXItb3JkZXIgdW5pdHNcblxuICBpZiAoIWlzVW5kZWZpbmVkKG9iai55ZWFyKSkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3JkZXJlZFVuaXRzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgIHZhciB1ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChvYmpbdV0pKSB7XG4gICAgICAgIG9ialt1XSA9IGRlZmF1bHRVbml0VmFsdWVzW3VdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbnZhbGlkID0gaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEob2JqKSB8fCBoYXNJbnZhbGlkVGltZURhdGEob2JqKTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0UHJvdmlzID0gem9uZS5vZmZzZXQodHNOb3cpO1xuXG4gICAgdmFyIF9vYmpUb1RTID0gb2JqVG9UUyhvYmosIG9mZnNldFByb3Zpcywgem9uZSk7XG5cbiAgICB0cyA9IF9vYmpUb1RTWzBdO1xuICAgIG8gPSBfb2JqVG9UU1sxXTtcbiAgfSBlbHNlIHtcbiAgICB0cyA9IHRzTm93O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgdHM6IHRzLFxuICAgIHpvbmU6IHpvbmUsXG4gICAgbG9jOiBsb2MsXG4gICAgbzogb1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgdmFyIHJvdW5kID0gaXNVbmRlZmluZWQob3B0cy5yb3VuZCkgPyB0cnVlIDogb3B0cy5yb3VuZCxcbiAgICAgIGZvcm1hdCA9IGZ1bmN0aW9uIGZvcm1hdChjLCB1bml0KSB7XG4gICAgYyA9IHJvdW5kVG8oYywgcm91bmQgfHwgb3B0cy5jYWxlbmRhcnkgPyAwIDogMiwgdHJ1ZSk7XG4gICAgdmFyIGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICB9LFxuICAgICAgZGlmZmVyID0gZnVuY3Rpb24gZGlmZmVyKHVuaXQpIHtcbiAgICBpZiAob3B0cy5jYWxlbmRhcnkpIHtcbiAgICAgIGlmICghZW5kLmhhc1NhbWUoc3RhcnQsIHVuaXQpKSB7XG4gICAgICAgIHJldHVybiBlbmQuc3RhcnRPZih1bml0KS5kaWZmKHN0YXJ0LnN0YXJ0T2YodW5pdCksIHVuaXQpLmdldCh1bml0KTtcbiAgICAgIH0gZWxzZSByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3B0cy51bml0cyksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgdmFyIHVuaXQgPSBfc3RlcDIudmFsdWU7XG4gICAgdmFyIGNvdW50ID0gZGlmZmVyKHVuaXQpO1xuXG4gICAgaWYgKE1hdGguYWJzKGNvdW50KSA+PSAxKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9ybWF0KHN0YXJ0ID4gZW5kID8gLTAgOiAwLCBvcHRzLnVuaXRzW29wdHMudW5pdHMubGVuZ3RoIC0gMV0pO1xufVxuXG5mdW5jdGlvbiBsYXN0T3B0cyhhcmdMaXN0KSB7XG4gIHZhciBvcHRzID0ge30sXG4gICAgICBhcmdzO1xuXG4gIGlmIChhcmdMaXN0Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXSA9PT0gXCJvYmplY3RcIikge1xuICAgIG9wdHMgPSBhcmdMaXN0W2FyZ0xpc3QubGVuZ3RoIC0gMV07XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCkuc2xpY2UoMCwgYXJnTGlzdC5sZW5ndGggLSAxKTtcbiAgfSBlbHNlIHtcbiAgICBhcmdzID0gQXJyYXkuZnJvbShhcmdMaXN0KTtcbiAgfVxuXG4gIHJldHVybiBbb3B0cywgYXJnc107XG59XG4vKipcbiAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBBIERhdGVUaW1lIGNvbXByaXNlcyBvZjpcbiAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guXG4gKiAqIEEgdGltZSB6b25lLiBFYWNoIGluc3RhbmNlIGlzIGNvbnNpZGVyZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpYyB6b25lIChieSBkZWZhdWx0IHRoZSBsb2NhbCBzeXN0ZW0ncyB6b25lKS5cbiAqICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIHRoYXQgZWZmZWN0IGhvdyBvdXRwdXQgc3RyaW5ncyBhcmUgZm9ybWF0dGVkLCBzdWNoIGFzIGBsb2NhbGVgLCBgbnVtYmVyaW5nU3lzdGVtYCwgYW5kIGBvdXRwdXRDYWxlbmRhcmAuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25hbGl0eSBpdCBwcm92aWRlczpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgRGF0ZVRpbWUjbG9jYWx9LCB7QGxpbmsgRGF0ZVRpbWUjdXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgRGF0ZVRpbWUjZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30sIHtAbGluayBEYXRlVGltZSNmcm9tSFRUUH0sIGFuZCB7QGxpbmsgRGF0ZVRpbWUjZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBEYXRlVGltZSNmcm9tRm9ybWF0fS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjZnJvbUpTRGF0ZX0uXG4gKiAqICoqR3JlZ29yaWFuIGNhbGVuZGFyIGFuZCB0aW1lKio6IFRvIGV4YW1pbmUgdGhlIEdyZWdvcmlhbiBwcm9wZXJ0aWVzIG9mIGEgRGF0ZVRpbWUgaW5kaXZpZHVhbGx5IChpLmUgYXMgb3Bwb3NlZCB0byBjb2xsZWN0aXZlbHkgdGhyb3VnaCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9KSwgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjeWVhcn0sIHtAbGluayBEYXRlVGltZSNtb250aH0sXG4gKiB7QGxpbmsgRGF0ZVRpbWUjZGF5fSwge0BsaW5rIERhdGVUaW1lI2hvdXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXRlfSwge0BsaW5rIERhdGVUaW1lI3NlY29uZH0sIHtAbGluayBEYXRlVGltZSNtaWxsaXNlY29uZH0gYWNjZXNzb3JzLlxuICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIERhdGVUaW1lI3dlZWtZZWFyfSwge0BsaW5rIERhdGVUaW1lI3dlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIERhdGVUaW1lI3dlZWtkYXl9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjbG9jYWxlfSBhbmQge0BsaW5rIERhdGVUaW1lI251bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKio6IFRvIHRyYW5zZm9ybSB0aGUgRGF0ZVRpbWUgaW50byBvdGhlciBEYXRlVGltZXMsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjc2V0fSwge0BsaW5rIERhdGVUaW1lI3JlY29uZmlndXJlfSwge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9LCB7QGxpbmsgRGF0ZVRpbWUjc2V0TG9jYWxlfSwge0BsaW5rIERhdGVUaW1lLnBsdXN9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXN9LCB7QGxpbmsgRGF0ZVRpbWUjZW5kT2Z9LCB7QGxpbmsgRGF0ZVRpbWUjc3RhcnRPZn0sIHtAbGluayBEYXRlVGltZSN0b1VUQ30sIGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbH0uXG4gKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZX0sIHtAbGluayBEYXRlVGltZSN0b1JlbGF0aXZlQ2FsZW5kYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9KU09OfSwge0BsaW5rIERhdGVUaW1lI3RvSVNPfSwge0BsaW5rIERhdGVUaW1lI3RvSFRUUH0sIHtAbGluayBEYXRlVGltZSN0b09iamVjdH0sIHtAbGluayBEYXRlVGltZSN0b1JGQzI4MjJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9TdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9LCB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9KU0RhdGV9LlxuICpcbiAqIFRoZXJlJ3MgcGxlbnR5IG90aGVycyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiwgdGltZSB6b25lcywgYWx0ZXJuYXRpdmUgY2FsZW5kYXJzLCB2YWxpZGl0eSwgYW5kIHNvIG9uLCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cblxuXG52YXIgRGF0ZVRpbWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQGFjY2VzcyBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBEYXRlVGltZShjb25maWcpIHtcbiAgICB2YXIgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lO1xuICAgIHZhciBpbnZhbGlkID0gY29uZmlnLmludmFsaWQgfHwgKE51bWJlci5pc05hTihjb25maWcudHMpID8gbmV3IEludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpIDogbnVsbCkgfHwgKCF6b25lLmlzVmFsaWQgPyB1bnN1cHBvcnRlZFpvbmUoem9uZSkgOiBudWxsKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMudHMgPSBpc1VuZGVmaW5lZChjb25maWcudHMpID8gU2V0dGluZ3Mubm93KCkgOiBjb25maWcudHM7XG4gICAgdmFyIGMgPSBudWxsLFxuICAgICAgICBvID0gbnVsbDtcblxuICAgIGlmICghaW52YWxpZCkge1xuICAgICAgdmFyIHVuY2hhbmdlZCA9IGNvbmZpZy5vbGQgJiYgY29uZmlnLm9sZC50cyA9PT0gdGhpcy50cyAmJiBjb25maWcub2xkLnpvbmUuZXF1YWxzKHpvbmUpO1xuXG4gICAgICBpZiAodW5jaGFuZ2VkKSB7XG4gICAgICAgIHZhciBfcmVmID0gW2NvbmZpZy5vbGQuYywgY29uZmlnLm9sZC5vXTtcbiAgICAgICAgYyA9IF9yZWZbMF07XG4gICAgICAgIG8gPSBfcmVmWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90ID0gem9uZS5vZmZzZXQodGhpcy50cyk7XG4gICAgICAgIGMgPSB0c1RvT2JqKHRoaXMudHMsIG90KTtcbiAgICAgICAgaW52YWxpZCA9IE51bWJlci5pc05hTihjLnllYXIpID8gbmV3IEludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpIDogbnVsbDtcbiAgICAgICAgYyA9IGludmFsaWQgPyBudWxsIDogYztcbiAgICAgICAgbyA9IGludmFsaWQgPyBudWxsIDogb3Q7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG5cbiAgICB0aGlzLl96b25lID0gem9uZTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmludmFsaWQgPSBpbnZhbGlkO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy53ZWVrRGF0YSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmMgPSBjO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5vID0gbztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaXNMdXhvbkRhdGVUaW1lID0gdHJ1ZTtcbiAgfSAvLyBDT05TVFJVQ1RcblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZm9yIHRoZSBjdXJyZW50IGluc3RhbnQsIGluIHRoZSBzeXN0ZW0ncyB0aW1lIHpvbmUuXG4gICAqXG4gICAqIFVzZSBTZXR0aW5ncyB0byBvdmVycmlkZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpZiBuZWVkZWQuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvSVNPKCkgLy9+PiBub3cgaW4gdGhlIElTTyBmb3JtYXRcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgRGF0ZVRpbWUubm93ID0gZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe30pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhbCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoeyB6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMCwgd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogXCJ1dGNcIiB9KSAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMCwgaW4gVVRDXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5sb2NhbCA9IGZ1bmN0aW9uIGxvY2FsKCkge1xuICAgIHZhciBfbGFzdE9wdHMgPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgICBvcHRzID0gX2xhc3RPcHRzWzBdLFxuICAgICAgICBhcmdzID0gX2xhc3RPcHRzWzFdLFxuICAgICAgICB5ZWFyID0gYXJnc1swXSxcbiAgICAgICAgbW9udGggPSBhcmdzWzFdLFxuICAgICAgICBkYXkgPSBhcmdzWzJdLFxuICAgICAgICBob3VyID0gYXJnc1szXSxcbiAgICAgICAgbWludXRlID0gYXJnc1s0XSxcbiAgICAgICAgc2Vjb25kID0gYXJnc1s1XSxcbiAgICAgICAgbWlsbGlzZWNvbmQgPSBhcmdzWzZdO1xuXG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcjogeWVhcixcbiAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgIGRheTogZGF5LFxuICAgICAgaG91cjogaG91cixcbiAgICAgIG1pbnV0ZTogbWludXRlLFxuICAgICAgc2Vjb25kOiBzZWNvbmQsXG4gICAgICBtaWxsaXNlY29uZDogbWlsbGlzZWNvbmRcbiAgICB9LCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgaW4gVVRDXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeWVhcl0gLSBUaGUgY2FsZW5kYXIgeWVhci4gSWYgb21pdHRlZCAoYXMgaW4sIGNhbGwgYHV0YygpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaG91cj0wXSAtIFRoZSBob3VyIG9mIHRoZSBkYXksIGluIDI0LWhvdXIgdGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbnV0ZT0wXSAtIFRoZSBtaW51dGUgb2YgdGhlIGhvdXIsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZD0wXSAtIFRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWlsbGlzZWNvbmQ9MF0gLSBUaGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDk5OVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IG5vd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0wMVQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NTowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSwgeyBsb2NhbGU6IFwiZnJcIiB9KSAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaIHdpdGggYSBGcmVuY2ggbG9jYWxlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwKSAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSwgeyBsb2NhbGU6IFwiZnJcIiB9KSAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTAuNzY1WiB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS51dGMgPSBmdW5jdGlvbiB1dGMoKSB7XG4gICAgdmFyIF9sYXN0T3B0czIgPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgICBvcHRzID0gX2xhc3RPcHRzMlswXSxcbiAgICAgICAgYXJncyA9IF9sYXN0T3B0czJbMV0sXG4gICAgICAgIHllYXIgPSBhcmdzWzBdLFxuICAgICAgICBtb250aCA9IGFyZ3NbMV0sXG4gICAgICAgIGRheSA9IGFyZ3NbMl0sXG4gICAgICAgIGhvdXIgPSBhcmdzWzNdLFxuICAgICAgICBtaW51dGUgPSBhcmdzWzRdLFxuICAgICAgICBzZWNvbmQgPSBhcmdzWzVdLFxuICAgICAgICBtaWxsaXNlY29uZCA9IGFyZ3NbNl07XG5cbiAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgcmV0dXJuIHF1aWNrRFQoe1xuICAgICAgeWVhcjogeWVhcixcbiAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgIGRheTogZGF5LFxuICAgICAgaG91cjogaG91cixcbiAgICAgIG1pbnV0ZTogbWludXRlLFxuICAgICAgc2Vjb25kOiBzZWNvbmQsXG4gICAgICBtaWxsaXNlY29uZDogbWlsbGlzZWNvbmRcbiAgICB9LCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21KU0RhdGUgPSBmdW5jdGlvbiBmcm9tSlNEYXRlKGRhdGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRzID0gaXNEYXRlKGRhdGUpID8gZGF0ZS52YWx1ZU9mKCkgOiBOYU47XG5cbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRzKSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpO1xuICAgIH1cblxuICAgIHZhciB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21NaWxsaXMgPSBmdW5jdGlvbiBmcm9tTWlsbGlzKG1pbGxpc2Vjb25kcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTnVtYmVyKG1pbGxpc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21NaWxsaXMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXQsIGJ1dCByZWNlaXZlZCBhIFwiICsgdHlwZW9mIG1pbGxpc2Vjb25kcyArIFwiIHdpdGggdmFsdWUgXCIgKyBtaWxsaXNlY29uZHMpO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzIDwgLU1BWF9EQVRFIHx8IG1pbGxpc2Vjb25kcyA+IE1BWF9EQVRFKSB7XG4gICAgICAvLyB0aGlzIGlzbid0IHBlcmZlY3QgYmVjYXVzZSBiZWNhdXNlIHdlIGNhbiBzdGlsbCBlbmQgdXAgb3V0IG9mIHJhbmdlIGJlY2F1c2Ugb2YgYWRkaXRpb25hbCBzaGlmdGluZywgYnV0IGl0J3MgYSBzdGFydFxuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJUaW1lc3RhbXAgb3V0IG9mIHJhbmdlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IG1pbGxpc2Vjb25kcyxcbiAgICAgICAgem9uZTogbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVwb2NoIChtZWFuaW5nIHNpbmNlIDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgLSBhIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21TZWNvbmRzID0gZnVuY3Rpb24gZnJvbVNlY29uZHMoc2Vjb25kcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTnVtYmVyKHNlY29uZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJmcm9tU2Vjb25kcyByZXF1aXJlcyBhIG51bWVyaWNhbCBpbnB1dFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiBzZWNvbmRzICogMTAwMCxcbiAgICAgICAgem9uZTogbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXInIGFuZCAnaG91cicgd2l0aCByZWFzb25hYmxlIGRlZmF1bHRzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyIC0gYSB5ZWFyLCBzdWNoIGFzIDE5ODdcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5tb250aCAtIGEgbW9udGgsIDEtMTJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5kYXkgLSBhIGRheSBvZiB0aGUgbW9udGgsIDEtMzEsIGRlcGVuZGluZyBvbiB0aGUgbW9udGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5vcmRpbmFsIC0gZGF5IG9mIHRoZSB5ZWFyLCAxLTM2NSBvciAzNjZcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrWWVhciAtIGFuIElTTyB3ZWVrIHllYXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrTnVtYmVyIC0gYW4gSVNPIHdlZWsgbnVtYmVyLCBiZXR3ZWVuIDEgYW5kIDUyIG9yIDUzLCBkZXBlbmRpbmcgb24gdGhlIHllYXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrZGF5IC0gYW4gSVNPIHdlZWtkYXksIDEtNywgd2hlcmUgMSBpcyBNb25kYXkgYW5kIDcgaXMgU3VuZGF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91ciAtIGhvdXIgb2YgdGhlIGRheSwgMC0yM1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbnV0ZSAtIG1pbnV0ZSBvZiB0aGUgaG91ciwgMC01OVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZCAtIHNlY29uZCBvZiB0aGUgbWludXRlLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmQgLSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCAwLTk5OVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGludGVycHJldCB0aGUgbnVtYmVycyBpbiB0aGUgY29udGV4dCBvZiBhIHBhcnRpY3VsYXIgem9uZS4gQ2FuIHRha2UgYW55IHZhbHVlIHRha2VuIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBzZXRab25lKClcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIsIG1vbnRoOiA1LCBkYXk6IDI1fSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wNS0yNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIgfSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wMS0wMSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSkgLy9+PiB0b2RheSBhdCAxMDoyNjowNlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9LCB7IHpvbmU6ICd1dGMnIH0pLFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9LCB7IHpvbmU6ICdsb2NhbCcgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAnQW1lcmljYS9OZXdfWW9yaycgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHdlZWtZZWFyOiAyMDE2LCB3ZWVrTnVtYmVyOiAyLCB3ZWVrZGF5OiAzIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzIwMTYtMDEtMTMnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iaiwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBvYmogPSBvYmogfHwge307XG4gICAgdmFyIHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0cy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG5cbiAgICBpZiAoIXpvbmVUb1VzZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZVRvVXNlKSk7XG4gICAgfVxuXG4gICAgdmFyIHRzTm93ID0gU2V0dGluZ3Mubm93KCksXG4gICAgICAgIG9mZnNldFByb3ZpcyA9ICFpc1VuZGVmaW5lZChvcHRzLnNwZWNpZmljT2Zmc2V0KSA/IG9wdHMuc3BlY2lmaWNPZmZzZXQgOiB6b25lVG9Vc2Uub2Zmc2V0KHRzTm93KSxcbiAgICAgICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZU9iamVjdChvYmosIG5vcm1hbGl6ZVVuaXQpLFxuICAgICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgICAgY29udGFpbnNHcmVnb3JZZWFyID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQueWVhciksXG4gICAgICAgIGNvbnRhaW5zR3JlZ29yTUQgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5tb250aCkgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSxcbiAgICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgICAgZGVmaW5pdGVXZWVrRGVmID0gbm9ybWFsaXplZC53ZWVrWWVhciB8fCBub3JtYWxpemVkLndlZWtOdW1iZXIsXG4gICAgICAgIGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpOyAvLyBjYXNlczpcbiAgICAvLyBqdXN0IGEgd2Vla2RheSAtPiB0aGlzIHdlZWsncyBpbnN0YW5jZSBvZiB0aGF0IHdlZWtkYXksIG5vIHdvcnJpZXNcbiAgICAvLyAoZ3JlZ29yaWFuIGRhdGEgb3Igb3JkaW5hbCkgKyAod2Vla1llYXIgb3Igd2Vla051bWJlcikgLT4gZXJyb3JcbiAgICAvLyAoZ3JlZ29yaWFuIG1vbnRoIG9yIGRheSkgKyBvcmRpbmFsIC0+IGVycm9yXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXNlIHdlZWtzIG9yIG9yZGluYWxzIG9yIGdyZWdvcmlhbiwgZGVwZW5kaW5nIG9uIHdoYXQncyBzcGVjaWZpZWRcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICB2YXIgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgbm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcjsgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcblxuICAgIHZhciB1bml0cyxcbiAgICAgICAgZGVmYXVsdFZhbHVlcyxcbiAgICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcblxuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvV2VlayhvYmpOb3cpO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRVbml0VmFsdWVzO1xuICAgIH0gLy8gc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBtaXNzaW5nIHN0dWZmXG5cblxuICAgIHZhciBmb3VuZEZpcnN0ID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh1bml0cyksIF9zdGVwMzsgIShfc3RlcDMgPSBfaXRlcmF0b3IzKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgdSA9IF9zdGVwMy52YWx1ZTtcbiAgICAgIHZhciB2ID0gbm9ybWFsaXplZFt1XTtcblxuICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2KSkge1xuICAgICAgICBmb3VuZEZpcnN0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZm91bmRGaXJzdCkge1xuICAgICAgICBub3JtYWxpemVkW3VdID0gZGVmYXVsdFZhbHVlc1t1XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBvYmpOb3dbdV07XG4gICAgICB9XG4gICAgfSAvLyBtYWtlIHN1cmUgdGhlIHZhbHVlcyB3ZSBoYXZlIGFyZSBpbiByYW5nZVxuXG5cbiAgICB2YXIgaGlnaGVyT3JkZXJJbnZhbGlkID0gdXNlV2Vla0RhdGEgPyBoYXNJbnZhbGlkV2Vla0RhdGEobm9ybWFsaXplZCkgOiBjb250YWluc09yZGluYWwgPyBoYXNJbnZhbGlkT3JkaW5hbERhdGEobm9ybWFsaXplZCkgOiBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShub3JtYWxpemVkKSxcbiAgICAgICAgaW52YWxpZCA9IGhpZ2hlck9yZGVySW52YWxpZCB8fCBoYXNJbnZhbGlkVGltZURhdGEobm9ybWFsaXplZCk7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfSAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZVxuXG5cbiAgICB2YXIgZ3JlZ29yaWFuID0gdXNlV2Vla0RhdGEgPyB3ZWVrVG9HcmVnb3JpYW4obm9ybWFsaXplZCkgOiBjb250YWluc09yZGluYWwgPyBvcmRpbmFsVG9HcmVnb3JpYW4obm9ybWFsaXplZCkgOiBub3JtYWxpemVkLFxuICAgICAgICBfb2JqVG9UUzIgPSBvYmpUb1RTKGdyZWdvcmlhbiwgb2Zmc2V0UHJvdmlzLCB6b25lVG9Vc2UpLFxuICAgICAgICB0c0ZpbmFsID0gX29ialRvVFMyWzBdLFxuICAgICAgICBvZmZzZXRGaW5hbCA9IF9vYmpUb1RTMlsxXSxcbiAgICAgICAgaW5zdCA9IG5ldyBEYXRlVGltZSh7XG4gICAgICB0czogdHNGaW5hbCxcbiAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgIG86IG9mZnNldEZpbmFsLFxuICAgICAgbG9jOiBsb2NcbiAgICB9KTsgLy8gZ3JlZ29yaWFuIGRhdGEgKyB3ZWVrZGF5IHNlcnZlcyBvbmx5IHRvIHZhbGlkYXRlXG5cblxuICAgIGlmIChub3JtYWxpemVkLndlZWtkYXkgJiYgY29udGFpbnNHcmVnb3IgJiYgb2JqLndlZWtkYXkgIT09IGluc3Qud2Vla2RheSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJtaXNtYXRjaGVkIHdlZWtkYXlcIiwgXCJ5b3UgY2FuJ3Qgc3BlY2lmeSBib3RoIGEgd2Vla2RheSBvZiBcIiArIG5vcm1hbGl6ZWQud2Vla2RheSArIFwiIGFuZCBhIGRhdGUgb2YgXCIgKyBpbnN0LnRvSVNPKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIElTTyA4NjAxIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBJU08gc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5vdXRwdXRDYWxlbmRhcl0gLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMyswNjowMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJywge3NldFpvbmU6IHRydWV9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycsIHt6b25lOiAndXRjJ30pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtVzA1LTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5mcm9tSVNPID0gZnVuY3Rpb24gZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcGFyc2VJU09EYXRlID0gcGFyc2VJU09EYXRlKHRleHQpLFxuICAgICAgICB2YWxzID0gX3BhcnNlSVNPRGF0ZVswXSxcbiAgICAgICAgcGFyc2VkWm9uZSA9IF9wYXJzZUlTT0RhdGVbMV07XG5cbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIklTTyA4NjAxXCIsIHRleHQpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIFJGQyAyODIyIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSB0aGUgb2Zmc2V0IGlzIGFsd2F5cyBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMzoxMiBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignRnJpLCAyNSBOb3YgMjAxNiAxMzoyMzoxMiArMDYwMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMyBaJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbVJGQzI4MjIgPSBmdW5jdGlvbiBmcm9tUkZDMjgyMih0ZXh0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcGFyc2VSRkMyODIyRGF0ZSA9IHBhcnNlUkZDMjgyMkRhdGUodGV4dCksXG4gICAgICAgIHZhbHMgPSBfcGFyc2VSRkMyODIyRGF0ZVswXSxcbiAgICAgICAgcGFyc2VkWm9uZSA9IF9wYXJzZVJGQzI4MjJEYXRlWzFdO1xuXG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJSRkMgMjgyMlwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBIVFRQIGhlYWRlciBkYXRlXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSBIVFRQIGRhdGVzIGFyZSBhbHdheXMgaW4gVVRDLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCB0aGUgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcuIEZvciBIVFRQIGRhdGVzLCB0aGlzIGlzIGFsd2F5cyBVVEMsIHNvIHRoaXMgb3B0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyB0aGUgYHpvbmVgIG9wdGlvbiB0byAndXRjJywgYnV0IHRoaXMgb3B0aW9uIGlzIGluY2x1ZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHNpbWlsYXIgbWV0aG9kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biwgMDYgTm92IDE5OTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1bmRheSwgMDYtTm92LTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5mcm9tSFRUUCA9IGZ1bmN0aW9uIGZyb21IVFRQKHRleHQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9wYXJzZUhUVFBEYXRlID0gcGFyc2VIVFRQRGF0ZSh0ZXh0KSxcbiAgICAgICAgdmFscyA9IF9wYXJzZUhUVFBEYXRlWzBdLFxuICAgICAgICBwYXJzZWRab25lID0gX3BhcnNlSFRUUERhdGVbMV07XG5cbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIkhUVFBcIiwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL3BhcnNpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21Gb3JtYXQgPSBmdW5jdGlvbiBmcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQodGV4dCkgfHwgaXNVbmRlZmluZWQoZm10KSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbUZvcm1hdCByZXF1aXJlcyBhbiBpbnB1dCBzdHJpbmcgYW5kIGEgZm9ybWF0XCIpO1xuICAgIH1cblxuICAgIHZhciBfb3B0cyA9IG9wdHMsXG4gICAgICAgIF9vcHRzJGxvY2FsZSA9IF9vcHRzLmxvY2FsZSxcbiAgICAgICAgbG9jYWxlID0gX29wdHMkbG9jYWxlID09PSB2b2lkIDAgPyBudWxsIDogX29wdHMkbG9jYWxlLFxuICAgICAgICBfb3B0cyRudW1iZXJpbmdTeXN0ZW0gPSBfb3B0cy5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSA9IF9vcHRzJG51bWJlcmluZ1N5c3RlbSA9PT0gdm9pZCAwID8gbnVsbCA6IF9vcHRzJG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSksXG4gICAgICAgIF9wYXJzZUZyb21Ub2tlbnMgPSBwYXJzZUZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCksXG4gICAgICAgIHZhbHMgPSBfcGFyc2VGcm9tVG9rZW5zWzBdLFxuICAgICAgICBwYXJzZWRab25lID0gX3BhcnNlRnJvbVRva2Vuc1sxXSxcbiAgICAgICAgc3BlY2lmaWNPZmZzZXQgPSBfcGFyc2VGcm9tVG9rZW5zWzJdLFxuICAgICAgICBpbnZhbGlkID0gX3BhcnNlRnJvbVRva2Vuc1szXTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJmb3JtYXQgXCIgKyBmbXQsIHRleHQsIHNwZWNpZmljT2Zmc2V0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0IGluc3RlYWRcbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gZnJvbVN0cmluZyh0ZXh0LCBmbXQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIFNRTCBkYXRlLCB0aW1lLCBvciBkYXRldGltZVxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0JylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiswNjowMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiBBbWVyaWNhL0xvc19BbmdlbGVzJywgeyBzZXRab25lOiB0cnVlIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyJywgeyB6b25lOiAnQW1lcmljYS9Mb3NfQW5nZWxlcycgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMDk6MTI6MzQuMzQyJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbVNRTCA9IGZ1bmN0aW9uIGZyb21TUUwodGV4dCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3BhcnNlU1FMID0gcGFyc2VTUUwodGV4dCksXG4gICAgICAgIHZhbHMgPSBfcGFyc2VTUUxbMF0sXG4gICAgICAgIHBhcnNlZFpvbmUgPSBfcGFyc2VTUUxbMV07XG5cbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIlNRTFwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIERhdGVUaW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5pbnZhbGlkID0gZnVuY3Rpb24gaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgaWYgKGV4cGxhbmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEYXRlVGltZSBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICBpbnZhbGlkOiBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhIERhdGVUaW1lLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuaXNEYXRlVGltZSA9IGZ1bmN0aW9uIGlzRGF0ZVRpbWUobykge1xuICAgIHJldHVybiBvICYmIG8uaXNMdXhvbkRhdGVUaW1lIHx8IGZhbHNlO1xuICB9IC8vIElORk9cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnbW9udGgnKTsgLy89PiA3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgdmFyIF9wcm90byA9IERhdGVUaW1lLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KHVuaXQpIHtcbiAgICByZXR1cm4gdGhpc1t1bml0XTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBEYXRlVGltZSBpcyB2YWxpZC4gSW52YWxpZCBEYXRlVGltZXMgb2NjdXIgd2hlbjpcbiAgICogKiBUaGUgRGF0ZVRpbWUgd2FzIGNyZWF0ZWQgZnJvbSBpbnZhbGlkIGNhbGVuZGFyIGluZm9ybWF0aW9uLCBzdWNoIGFzIHRoZSAxM3RoIG1vbnRoIG9yIEZlYnJ1YXJ5IDMwXG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGJ5IGFuIG9wZXJhdGlvbiBvbiBhbm90aGVyIGludmFsaWQgZGF0ZVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcmVzb2x2ZWQgSW50bCBvcHRpb25zIGZvciB0aGlzIERhdGVUaW1lLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpbiB1bmRlcnN0YW5kaW5nIHRoZSBiZWhhdmlvciBvZiBmb3JtYXR0aW5nIG1ldGhvZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSB0aGUgc2FtZSBvcHRpb25zIGFzIHRvTG9jYWxlU3RyaW5nXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIF9wcm90by5yZXNvbHZlZExvY2FsZU9wdGlvbnMgPSBmdW5jdGlvbiByZXNvbHZlZExvY2FsZU9wdGlvbnMob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX0Zvcm1hdHRlciRjcmVhdGUkcmVzID0gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgb3B0cykucmVzb2x2ZWRPcHRpb25zKHRoaXMpLFxuICAgICAgICBsb2NhbGUgPSBfRm9ybWF0dGVyJGNyZWF0ZSRyZXMubG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfRm9ybWF0dGVyJGNyZWF0ZSRyZXMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBjYWxlbmRhciA9IF9Gb3JtYXR0ZXIkY3JlYXRlJHJlcy5jYWxlbmRhcjtcblxuICAgIHJldHVybiB7XG4gICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbTogbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgb3V0cHV0Q2FsZW5kYXI6IGNhbGVuZGFyXG4gICAgfTtcbiAgfSAvLyBUUkFOU0ZPUk1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIFVUQy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKlxuICAgKiBFcXVpdmFsZW50IHRvIHtAbGluayBEYXRlVGltZSNzZXRab25lfSgndXRjJylcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBvcHRpb25hbGx5LCBhbiBvZmZzZXQgZnJvbSBVVEMgaW4gbWludXRlc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gb3B0aW9ucyB0byBwYXNzIHRvIGBzZXRab25lKClgXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1VUQyA9IGZ1bmN0aW9uIHRvVVRDKG9mZnNldCwgb3B0cykge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0Wm9uZShGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2Uob2Zmc2V0KSwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byB0aGUgaG9zdCdzIGxvY2FsIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byBgc2V0Wm9uZSgnbG9jYWwnKWBcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTG9jYWwgPSBmdW5jdGlvbiB0b0xvY2FsKCkge1xuICAgIHJldHVybiB0aGlzLnNldFpvbmUoU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgdGltZXN0YW1wKSwgYnV0IHRoZSBuZXcgaW5zdGFuY2Ugd2lsbCByZXBvcnQgZGlmZmVyZW50IGxvY2FsIHRpbWVzIGFuZCBjb25zaWRlciBEU1RzIHdoZW4gbWFraW5nIGNvbXB1dGF0aW9ucywgYXMgd2l0aCB7QGxpbmsgRGF0ZVRpbWUjcGx1c30uIFlvdSBtYXkgd2lzaCB0byB1c2Uge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9IHdoaWNoIHByb3ZpZGUgc2ltcGxlIGNvbnZlbmllbmNlIHdyYXBwZXJzIGZvciBjb21tb25seSB1c2VkIHpvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIGEgem9uZSBpZGVudGlmaWVyLiBBcyBhIHN0cmluZywgdGhhdCBjYW4gYmUgYW55IElBTkEgem9uZSBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgZW52aXJvbm1lbnQsIG9yIGEgZml4ZWQtb2Zmc2V0IG5hbWUgb2YgdGhlIGZvcm0gJ1VUQyszJywgb3IgdGhlIHN0cmluZ3MgJ2xvY2FsJyBvciAndXRjJy4gWW91IG1heSBhbHNvIHN1cHBseSBhbiBpbnN0YW5jZSBvZiBhIHtAbGluayBEYXRlVGltZSNab25lfSBjbGFzcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMua2VlcExvY2FsVGltZT1mYWxzZV0gLSBJZiB0cnVlLCBhZGp1c3QgdGhlIHVuZGVybHlpbmcgdGltZSBzbyB0aGF0IHRoZSBsb2NhbCB0aW1lIHN0YXlzIHRoZSBzYW1lLCBidXQgaW4gdGhlIHRhcmdldCB6b25lLiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRoaXMuXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRab25lID0gZnVuY3Rpb24gc2V0Wm9uZSh6b25lLCBfdGVtcCkge1xuICAgIHZhciBfcmVmMiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBfcmVmMiRrZWVwTG9jYWxUaW1lID0gX3JlZjIua2VlcExvY2FsVGltZSxcbiAgICAgICAga2VlcExvY2FsVGltZSA9IF9yZWYyJGtlZXBMb2NhbFRpbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIka2VlcExvY2FsVGltZSxcbiAgICAgICAgX3JlZjIka2VlcENhbGVuZGFyVGltID0gX3JlZjIua2VlcENhbGVuZGFyVGltZSxcbiAgICAgICAga2VlcENhbGVuZGFyVGltZSA9IF9yZWYyJGtlZXBDYWxlbmRhclRpbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRrZWVwQ2FsZW5kYXJUaW07XG5cbiAgICB6b25lID0gbm9ybWFsaXplWm9uZSh6b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG5cbiAgICBpZiAoem9uZS5lcXVhbHModGhpcy56b25lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmICghem9uZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV3VFMgPSB0aGlzLnRzO1xuXG4gICAgICBpZiAoa2VlcExvY2FsVGltZSB8fCBrZWVwQ2FsZW5kYXJUaW1lKSB7XG4gICAgICAgIHZhciBvZmZzZXRHdWVzcyA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICB2YXIgYXNPYmogPSB0aGlzLnRvT2JqZWN0KCk7XG5cbiAgICAgICAgdmFyIF9vYmpUb1RTMyA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTtcblxuICAgICAgICBuZXdUUyA9IF9vYmpUb1RTM1swXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgICAgdHM6IG5ld1RTLFxuICAgICAgICB6b25lOiB6b25lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvciBvdXRwdXRDYWxlbmRhci4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlY29uZmlndXJlID0gZnVuY3Rpb24gcmVjb25maWd1cmUoX3RlbXAyKSB7XG4gICAgdmFyIF9yZWYzID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMixcbiAgICAgICAgbG9jYWxlID0gX3JlZjMubG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmMy5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG91dHB1dENhbGVuZGFyID0gX3JlZjMub3V0cHV0Q2FsZW5kYXI7XG5cbiAgICB2YXIgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG91dHB1dENhbGVuZGFyOiBvdXRwdXRDYWxlbmRhclxuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7XG4gICAgICBsb2M6IGxvY1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogSnVzdCBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIHJlY29uZmlndXJlKHsgbG9jYWxlIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5zZXRMb2NhbGUoJ2VuLUdCJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldExvY2FsZSA9IGZ1bmN0aW9uIHNldExvY2FsZShsb2NhbGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvbmZpZ3VyZSh7XG4gICAgICBsb2NhbGU6IGxvY2FsZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqIFlvdSBjYW4gb25seSBzZXQgdW5pdHMgd2l0aCB0aGlzIG1ldGhvZDsgZm9yIFwic2V0dGluZ1wiIG1ldGFkYXRhLCBzZWUge0BsaW5rIERhdGVUaW1lI3JlY29uZmlndXJlfSBhbmQge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9LlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyBob3VyOiA4LCBtaW51dGU6IDMwIH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IHdlZWtkYXk6IDUgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAwNSwgb3JkaW5hbDogMjM0IH0pXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQodmFsdWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHZhciBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KHZhbHVlcywgbm9ybWFsaXplVW5pdCksXG4gICAgICAgIHNldHRpbmdXZWVrU3R1ZmYgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrWWVhcikgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla051bWJlcikgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla2RheSksXG4gICAgICAgIGNvbnRhaW5zT3JkaW5hbCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm9yZGluYWwpLFxuICAgICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgICAgY29udGFpbnNHcmVnb3JNRCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm1vbnRoKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpLFxuICAgICAgICBjb250YWluc0dyZWdvciA9IGNvbnRhaW5zR3JlZ29yWWVhciB8fCBjb250YWluc0dyZWdvck1ELFxuICAgICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcjtcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICB2YXIgbWl4ZWQ7XG5cbiAgICBpZiAoc2V0dGluZ1dlZWtTdHVmZikge1xuICAgICAgbWl4ZWQgPSB3ZWVrVG9HcmVnb3JpYW4oX2V4dGVuZHMoe30sIGdyZWdvcmlhblRvV2Vlayh0aGlzLmMpLCBub3JtYWxpemVkKSk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oX2V4dGVuZHMoe30sIGdyZWdvcmlhblRvT3JkaW5hbCh0aGlzLmMpLCBub3JtYWxpemVkKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0gX2V4dGVuZHMoe30sIHRoaXMudG9PYmplY3QoKSwgbm9ybWFsaXplZCk7IC8vIGlmIHdlIGRpZG4ndCBzZXQgdGhlIGRheSBidXQgd2UgZW5kZWQgdXAgb24gYW4gb3ZlcmZsb3cgZGF0ZSxcbiAgICAgIC8vIHVzZSB0aGUgbGFzdCBkYXkgb2YgdGhlIHJpZ2h0IG1vbnRoXG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSkpIHtcbiAgICAgICAgbWl4ZWQuZGF5ID0gTWF0aC5taW4oZGF5c0luTW9udGgobWl4ZWQueWVhciwgbWl4ZWQubW9udGgpLCBtaXhlZC5kYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfb2JqVG9UUzQgPSBvYmpUb1RTKG1peGVkLCB0aGlzLm8sIHRoaXMuem9uZSksXG4gICAgICAgIHRzID0gX29ialRvVFM0WzBdLFxuICAgICAgICBvID0gX29ialRvVFM0WzFdO1xuXG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgIHRzOiB0cyxcbiAgICAgIG86IG9cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICpcbiAgICogQWRkaW5nIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBvciBtaWxsaXNlY29uZHMgaW5jcmVhc2VzIHRoZSB0aW1lc3RhbXAgYnkgdGhlIHJpZ2h0IG51bWJlciBvZiBtaWxsaXNlY29uZHMuIEFkZGluZyBkYXlzLCBtb250aHMsIG9yIHllYXJzIHNoaWZ0cyB0aGUgY2FsZW5kYXIsIGFjY291bnRpbmcgZm9yIERTVHMgYW5kIGxlYXAgeWVhcnMgYWxvbmcgdGhlIHdheS4gVGh1cywgYGR0LnBsdXMoeyBob3VyczogMjQgfSlgIG1heSByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdGltZSB0aGFuIGBkdC5wbHVzKHsgZGF5czogMSB9KWAgaWYgdGhlcmUncyBhIERTVCBzaGlmdCBpbiBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoMTIzKSAvL34+IGluIDEyMyBtaWxsaXNlY29uZHNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IG1pbnV0ZXM6IDE1IH0pIC8vfj4gaW4gMTUgbWludXRlc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KSAvL34+IHRoaXMgdGltZSB0b21vcnJvd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogLTEgfSkgLy9+PiB0aGlzIHRpbWUgeWVzdGVyZGF5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBob3VyczogMywgbWludXRlczogMTMgfSkgLy9+PiBpbiAzIGhyLCAxMyBtaW5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyhEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDMsIG1pbnV0ZXM6IDEzIH0pKSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGx1cyA9IGZ1bmN0aW9uIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG4gIC8qKlxuICAgKiBTdWJ0cmFjdCBhIHBlcmlvZCBvZiB0aW1lIHRvIHRoaXMgRGF0ZVRpbWUgYW5kIHJldHVybiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lXG4gICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c31cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWludXMgPSBmdW5jdGlvbiBtaW51cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbikubmVnYXRlKCk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBiZWdpbm5pbmcgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ21vbnRoJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDMtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3llYXInKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMS0wMSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuc3RhcnRPZignd2VlaycpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAzJywgd2Vla3MgYWx3YXlzIHN0YXJ0IG9uIE1vbmRheXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLnN0YXJ0T2YoJ2RheScpLnRvSVNPVGltZSgpOyAvLz0+ICcwMDowMC4wMDAtMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdob3VyJykudG9JU09UaW1lKCk7IC8vPT4gJzA1OjAwOjAwLjAwMC0wNTowMCdcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0YXJ0T2YgPSBmdW5jdGlvbiBzdGFydE9mKHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG8gPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuXG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSBcInllYXJzXCI6XG4gICAgICAgIG8ubW9udGggPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwicXVhcnRlcnNcIjpcbiAgICAgIGNhc2UgXCJtb250aHNcIjpcbiAgICAgICAgby5kYXkgPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJtaW51dGVzXCI6XG4gICAgICAgIG8uc2Vjb25kID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gbm8gZGVmYXVsdCwgaW52YWxpZCB1bml0cyB0aHJvdyBpbiBub3JtYWxpemVVbml0KClcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwid2Vla3NcIikge1xuICAgICAgby53ZWVrZGF5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwicXVhcnRlcnNcIikge1xuICAgICAgdmFyIHEgPSBNYXRoLmNlaWwodGhpcy5tb250aCAvIDMpO1xuICAgICAgby5tb250aCA9IChxIC0gMSkgKiAzICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZXQobyk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgZW5kIChtZWFuaW5nIHRoZSBsYXN0IG1pbGxpc2Vjb25kKSBvZiBhIHVuaXQgb2YgdGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBlbmQgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCdtb250aCcpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMzFUMjM6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZigneWVhcicpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMTItMzFUMjM6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZignd2VlaycpLnRvSVNPKCk7IC8vID0+ICcyMDE0LTAzLTA5VDIzOjU5OjU5Ljk5OS0wNTowMCcsIHdlZWtzIHN0YXJ0IG9uIE1vbmRheXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLmVuZE9mKCdkYXknKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLmVuZE9mKCdob3VyJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QwNTo1OTo1OS45OTktMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmRPZiA9IGZ1bmN0aW9uIGVuZE9mKHVuaXQpIHtcbiAgICB2YXIgX3RoaXMkcGx1cztcblxuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnBsdXMoKF90aGlzJHBsdXMgPSB7fSwgX3RoaXMkcGx1c1t1bml0XSA9IDEsIF90aGlzJHBsdXMpKS5zdGFydE9mKHVuaXQpLm1pbnVzKDEpIDogdGhpcztcbiAgfSAvLyBPVVRQVVRcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLlxuICAgKiAqKllvdSBtYXkgbm90IHdhbnQgdGhpcy4qKiBTZWUge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3IgYSBtb3JlIGZsZXhpYmxlIGZvcm1hdHRpbmcgdG9vbC4gRm9yIGEgdGFibGUgb2YgdG9rZW5zIGFuZCB0aGVpciBpbnRlcnByZXRhdGlvbnMsIHNlZSBbaGVyZV0oaHR0cHM6Ly9tb21lbnQuZ2l0aHViLmlvL2x1eG9uLyMvZm9ybWF0dGluZz9pZD10YWJsZS1vZi10b2tlbnMpLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvbiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgQXByIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2ZyJykudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBhdnIuIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnLCB7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoXCJISCAnaG91cnMgYW5kJyBtbSAnbWludXRlcydcIikgLy89PiAnMjAgaG91cnMgYW5kIDU1IG1pbnV0ZXMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9Gb3JtYXQgPSBmdW5jdGlvbiB0b0Zvcm1hdChmbXQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MucmVkZWZhdWx0VG9FTihvcHRzKSkuZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKHRoaXMsIGZtdCkgOiBJTlZBTElEO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhpcyBkYXRlLiBBY2NlcHRzIHRoZSBzYW1lIG9wdGlvbnMgYXMgdGhlIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3IgYW5kIGFueSBwcmVzZXRzIGRlZmluZWQgYnkgTHV4b24sIHN1Y2ggYXMgYERhdGVUaW1lLkRBVEVfRlVMTGAgb3IgYERhdGVUaW1lLlRJTUVfU0lNUExFYC5cbiAgICogVGhlIGV4YWN0IGJlaGF2aW9yIG9mIHRoaXMgbWV0aG9kIGlzIGJyb3dzZXItc3BlY2lmaWMsIGJ1dCBpbiBnZW5lcmFsIGl0IHdpbGwgcmV0dXJuIGFuIGFwcHJvcHJpYXRlIHJlcHJlc2VudGF0aW9uXG4gICAqIG9mIHRoZSBEYXRlVGltZSBpbiB0aGUgYXNzaWduZWQgbG9jYWxlLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdFxuICAgKiBAcGFyYW0gZm9ybWF0T3B0cyB7T2JqZWN0fSAtIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3Igb3B0aW9ucyBhbmQgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0cyB0byBvdmVycmlkZSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zIG9uIHRoaXMgRGF0ZVRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiA0LzIwLzIwMTdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCdlbi1nYicpLnRvTG9jYWxlU3RyaW5nKCk7IC8vPT4gJzIwLzA0LzIwMTcnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgbG9jYWxlOiAnZW4tZ2InIH0pOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpOyAvLz0+ICdBcHJpbCAyMCwgMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV9TSU1QTEUpOyAvLz0+ICcxMTozMiBBTSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfU0hPUlQpOyAvLz0+ICc0LzIwLzIwMTcsIDExOjMyIEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IHdlZWtkYXk6ICdsb25nJywgbW9udGg6ICdsb25nJywgZGF5OiAnMi1kaWdpdCcgfSk7IC8vPT4gJ1RodXJzZGF5LCBBcHJpbCAyMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnMi1kaWdpdCcsIGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSk7IC8vPT4gJ1RodSwgQXByIDIwLCAxMToyNyBBTSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnLCBob3VyQ3ljbGU6ICdoMjMnIH0pOyAvLz0+ICcxMTozMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKGZvcm1hdE9wdHMsIG9wdHMpIHtcbiAgICBpZiAoZm9ybWF0T3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBmb3JtYXRPcHRzID0gREFURV9TSE9SVDtcbiAgICB9XG5cbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIGZvcm1hdE9wdHMpLmZvcm1hdERhdGVUaW1lKHRoaXMpIDogSU5WQUxJRDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBmb3JtYXQgXCJwYXJ0c1wiLCBtZWFuaW5nIGluZGl2aWR1YWwgdG9rZW5zIGFsb25nIHdpdGggbWV0YWRhdGEuIFRoaXMgaXMgYWxsb3dzIGNhbGxlcnMgdG8gcG9zdC1wcm9jZXNzIGluZGl2aWR1YWwgc2VjdGlvbnMgb2YgdGhlIGZvcm1hdHRlZCBvdXRwdXQuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0L2Zvcm1hdFRvUGFydHNcbiAgICogQHBhcmFtIG9wdHMge09iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMsIHNhbWUgYXMgYHRvTG9jYWxlU3RyaW5nYC5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVQYXJ0cygpOyAvLz0+IFtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdkYXknLCB2YWx1ZTogJzI1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbW9udGgnLCB2YWx1ZTogJzA1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAneWVhcicsIHZhbHVlOiAnMTk4MicgfVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiBdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTG9jYWxlUGFydHMgPSBmdW5jdGlvbiB0b0xvY2FsZVBhcnRzKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIG9wdHMpLmZvcm1hdERhdGVUaW1lUGFydHModGhpcykgOiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MywgNSwgMjUpLnRvSVNPKCkgLy89PiAnMTk4Mi0wNS0yNVQwMDowMDowMC4wMDBaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTygpIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1LTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcyMDE3MDQyMlQyMDQ3MDUuMzM1LTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU08gPSBmdW5jdGlvbiB0b0lTTyhfdGVtcDMpIHtcbiAgICB2YXIgX3JlZjQgPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzLFxuICAgICAgICBfcmVmNCRmb3JtYXQgPSBfcmVmNC5mb3JtYXQsXG4gICAgICAgIGZvcm1hdCA9IF9yZWY0JGZvcm1hdCA9PT0gdm9pZCAwID8gXCJleHRlbmRlZFwiIDogX3JlZjQkZm9ybWF0LFxuICAgICAgICBfcmVmNCRzdXBwcmVzc1NlY29uZHMgPSBfcmVmNC5zdXBwcmVzc1NlY29uZHMsXG4gICAgICAgIHN1cHByZXNzU2Vjb25kcyA9IF9yZWY0JHN1cHByZXNzU2Vjb25kcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNCRzdXBwcmVzc1NlY29uZHMsXG4gICAgICAgIF9yZWY0JHN1cHByZXNzTWlsbGlzZSA9IF9yZWY0LnN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IF9yZWY0JHN1cHByZXNzTWlsbGlzZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNCRzdXBwcmVzc01pbGxpc2UsXG4gICAgICAgIF9yZWY0JGluY2x1ZGVPZmZzZXQgPSBfcmVmNC5pbmNsdWRlT2Zmc2V0LFxuICAgICAgICBpbmNsdWRlT2Zmc2V0ID0gX3JlZjQkaW5jbHVkZU9mZnNldCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY0JGluY2x1ZGVPZmZzZXQ7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGV4dCA9IGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiO1xuXG4gICAgdmFyIGMgPSBfdG9JU09EYXRlKHRoaXMsIGV4dCk7XG5cbiAgICBjICs9IFwiVFwiO1xuICAgIGMgKz0gX3RvSVNPVGltZSh0aGlzLCBleHQsIHN1cHByZXNzU2Vjb25kcywgc3VwcHJlc3NNaWxsaXNlY29uZHMsIGluY2x1ZGVPZmZzZXQpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxOTgyMDUyNSdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT0RhdGUgPSBmdW5jdGlvbiB0b0lTT0RhdGUoX3RlbXA0KSB7XG4gICAgdmFyIF9yZWY1ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNCxcbiAgICAgICAgX3JlZjUkZm9ybWF0ID0gX3JlZjUuZm9ybWF0LFxuICAgICAgICBmb3JtYXQgPSBfcmVmNSRmb3JtYXQgPT09IHZvaWQgMCA/IFwiZXh0ZW5kZWRcIiA6IF9yZWY1JGZvcm1hdDtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RvSVNPRGF0ZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3Mgd2VlayBkYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygxOTgyLCA1LCAyNSkudG9JU09XZWVrRGF0ZSgpIC8vPT4gJzE5ODItVzIxLTInXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU09XZWVrRGF0ZSA9IGZ1bmN0aW9uIHRvSVNPV2Vla0RhdGUoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcImtra2stJ1cnV1ctY1wiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB0aW1lIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlUHJlZml4PWZhbHNlXSAtIGluY2x1ZGUgdGhlIGBUYCBwcmVmaXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQgfSkudG9JU09UaW1lKCkgLy89PiAnMDc6MzQ6MTkuMzYxWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCwgc2Vjb25kczogMCwgbWlsbGlzZWNvbmRzOiAwIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzU2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcwNzozNFonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQgfSkudG9JU09UaW1lKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzA3MzQxOS4zNjFaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSh7IGluY2x1ZGVQcmVmaXg6IHRydWUgfSkgLy89PiAnVDA3OjM0OjE5LjM2MVonXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU09UaW1lID0gZnVuY3Rpb24gdG9JU09UaW1lKF90ZW1wNSkge1xuICAgIHZhciBfcmVmNiA9IF90ZW1wNSA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDUsXG4gICAgICAgIF9yZWY2JHN1cHByZXNzTWlsbGlzZSA9IF9yZWY2LnN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IF9yZWY2JHN1cHByZXNzTWlsbGlzZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNiRzdXBwcmVzc01pbGxpc2UsXG4gICAgICAgIF9yZWY2JHN1cHByZXNzU2Vjb25kcyA9IF9yZWY2LnN1cHByZXNzU2Vjb25kcyxcbiAgICAgICAgc3VwcHJlc3NTZWNvbmRzID0gX3JlZjYkc3VwcHJlc3NTZWNvbmRzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JHN1cHByZXNzU2Vjb25kcyxcbiAgICAgICAgX3JlZjYkaW5jbHVkZU9mZnNldCA9IF9yZWY2LmluY2x1ZGVPZmZzZXQsXG4gICAgICAgIGluY2x1ZGVPZmZzZXQgPSBfcmVmNiRpbmNsdWRlT2Zmc2V0ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkaW5jbHVkZU9mZnNldCxcbiAgICAgICAgX3JlZjYkaW5jbHVkZVByZWZpeCA9IF9yZWY2LmluY2x1ZGVQcmVmaXgsXG4gICAgICAgIGluY2x1ZGVQcmVmaXggPSBfcmVmNiRpbmNsdWRlUHJlZml4ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JGluY2x1ZGVQcmVmaXgsXG4gICAgICAgIF9yZWY2JGZvcm1hdCA9IF9yZWY2LmZvcm1hdCxcbiAgICAgICAgZm9ybWF0ID0gX3JlZjYkZm9ybWF0ID09PSB2b2lkIDAgPyBcImV4dGVuZGVkXCIgOiBfcmVmNiRmb3JtYXQ7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGMgPSBpbmNsdWRlUHJlZml4ID8gXCJUXCIgOiBcIlwiO1xuICAgIHJldHVybiBjICsgX3RvSVNPVGltZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIiwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gUkZDIDI4MjItY29tcGF0aWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgKzAwMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIC0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvUkZDMjgyMiA9IGZ1bmN0aW9uIHRvUkZDMjgyMigpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIFwiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyBaWlpcIiwgZmFsc2UpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBIVFRQIGhlYWRlcnMuIFRoZSBvdXRwdXQgaXMgYWx3YXlzIGV4cHJlc3NlZCBpbiBHTVQuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHN0cmluZyBjb25mb3JtcyB0byBSRkMgMTEyMy5cbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b0hUVFAoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIEdNVCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzLCAxOSkudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAxOTowMDowMCBHTVQnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9IVFRQID0gZnVuY3Rpb24gdG9IVFRQKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcy50b1VUQygpLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgJ0dNVCdcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1NRTERhdGUgPSBmdW5jdGlvbiB0b1NRTERhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfdG9JU09EYXRlKHRoaXMsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS50b1NRTCgpIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b1NRTCh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlWm9uZTogZmFsc2UgfSkgLy89PiAnMDU6MTU6MTYuMzQ1IEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TUUxUaW1lID0gZnVuY3Rpb24gdG9TUUxUaW1lKF90ZW1wNikge1xuICAgIHZhciBfcmVmNyA9IF90ZW1wNiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDYsXG4gICAgICAgIF9yZWY3JGluY2x1ZGVPZmZzZXQgPSBfcmVmNy5pbmNsdWRlT2Zmc2V0LFxuICAgICAgICBpbmNsdWRlT2Zmc2V0ID0gX3JlZjckaW5jbHVkZU9mZnNldCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY3JGluY2x1ZGVPZmZzZXQsXG4gICAgICAgIF9yZWY3JGluY2x1ZGVab25lID0gX3JlZjcuaW5jbHVkZVpvbmUsXG4gICAgICAgIGluY2x1ZGVab25lID0gX3JlZjckaW5jbHVkZVpvbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjckaW5jbHVkZVpvbmUsXG4gICAgICAgIF9yZWY3JGluY2x1ZGVPZmZzZXRTcCA9IF9yZWY3LmluY2x1ZGVPZmZzZXRTcGFjZSxcbiAgICAgICAgaW5jbHVkZU9mZnNldFNwYWNlID0gX3JlZjckaW5jbHVkZU9mZnNldFNwID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjckaW5jbHVkZU9mZnNldFNwO1xuXG4gICAgdmFyIGZtdCA9IFwiSEg6bW06c3MuU1NTXCI7XG5cbiAgICBpZiAoaW5jbHVkZVpvbmUgfHwgaW5jbHVkZU9mZnNldCkge1xuICAgICAgaWYgKGluY2x1ZGVPZmZzZXRTcGFjZSkge1xuICAgICAgICBmbXQgKz0gXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlWm9uZSkge1xuICAgICAgICBmbXQgKz0gXCJ6XCI7XG4gICAgICB9IGVsc2UgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgICAgZm10ICs9IFwiWlpcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIGZtdCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IHRydWUgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgQW1lcmljYS9OZXdfWW9yaydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1NRTCA9IGZ1bmN0aW9uIHRvU1FMKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRvU1FMRGF0ZSgpICsgXCIgXCIgKyB0aGlzLnRvU1FMVGltZShvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciBkZWJ1Z2dpbmdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvSVNPKCkgOiBJTlZBTElEO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4gQWxpYXMgb2Yge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZhbHVlT2YgPSBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTWlsbGlzID0gZnVuY3Rpb24gdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1NlY29uZHMgPSBmdW5jdGlvbiB0b1NlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgLyAxMDAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBzZWNvbmRzIChhcyBhIHdob2xlIG51bWJlcikgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1VuaXhJbnRlZ2VyID0gZnVuY3Rpb24gdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBCU09OIHNlcmlhbGl6YWJsZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvQlNPTiA9IGZ1bmN0aW9uIHRvQlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTRGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCB0aGlzIERhdGVUaW1lJ3MgeWVhciwgbW9udGgsIGRheSwgYW5kIHNvIG9uLlxuICAgKiBAcGFyYW0gb3B0cyAtIG9wdGlvbnMgZm9yIGdlbmVyYXRpbmcgdGhlIG9iamVjdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVDb25maWc9ZmFsc2VdIC0gaW5jbHVkZSBjb25maWd1cmF0aW9uIGF0dHJpYnV0ZXMgaW4gdGhlIG91dHB1dFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b09iamVjdCgpIC8vPT4geyB5ZWFyOiAyMDE3LCBtb250aDogNCwgZGF5OiAyMiwgaG91cjogMjAsIG1pbnV0ZTogNDksIHNlY29uZDogNDIsIG1pbGxpc2Vjb25kOiAyNjggfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3Qob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHt9O1xuXG4gICAgdmFyIGJhc2UgPSBfZXh0ZW5kcyh7fSwgdGhpcy5jKTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSlNEYXRlID0gZnVuY3Rpb24gdG9KU0RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU4pO1xuICB9IC8vIENPTVBBUkVcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIERhdGVUaW1lcyBhcyBhIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIERhdGVUaW1lIHRvIGNvbXBhcmUgdGhpcyBvbmUgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgYXJyYXkgb2YgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGkxID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4Mi0wNS0yNVQwOTo0NScpLFxuICAgKiAgICAgaTIgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgzLTEwLTE0VDEwOjMwJyk7XG4gICAqIGkyLmRpZmYoaTEpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogNDM4MDc1MDAwMDAgfVxuICAgKiBpMi5kaWZmKGkxLCAnaG91cnMnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTIxNjguNzUgfVxuICAgKiBpMi5kaWZmKGkxLCBbJ21vbnRocycsICdkYXlzJ10pLnRvT2JqZWN0KCkgLy89PiB7IG1vbnRoczogMTYsIGRheXM6IDE5LjAzMTI1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cycsICdob3VycyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOSwgaG91cnM6IDAuNzUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlmZiA9IGZ1bmN0aW9uIGRpZmYob3RoZXJEYXRlVGltZSwgdW5pdCwgb3B0cykge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiO1xuICAgIH1cblxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIHZhciBkdXJPcHRzID0gX2V4dGVuZHMoe1xuICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW1cbiAgICB9LCBvcHRzKTtcblxuICAgIHZhciB1bml0cyA9IG1heWJlQXJyYXkodW5pdCkubWFwKER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLFxuICAgICAgICBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLFxuICAgICAgICBlYXJsaWVyID0gb3RoZXJJc0xhdGVyID8gdGhpcyA6IG90aGVyRGF0ZVRpbWUsXG4gICAgICAgIGxhdGVyID0gb3RoZXJJc0xhdGVyID8gb3RoZXJEYXRlVGltZSA6IHRoaXMsXG4gICAgICAgIGRpZmZlZCA9IF9kaWZmKGVhcmxpZXIsIGxhdGVyLCB1bml0cywgZHVyT3B0cyk7XG5cbiAgICByZXR1cm4gb3RoZXJJc0xhdGVyID8gZGlmZmVkLm5lZ2F0ZSgpIDogZGlmZmVkO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGlzIERhdGVUaW1lIGFuZCByaWdodCBub3cuXG4gICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjZGlmZn1cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgdW5pdHMgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlmZk5vdyA9IGZ1bmN0aW9uIGRpZmZOb3codW5pdCwgb3B0cykge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiO1xuICAgIH1cblxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kaWZmKERhdGVUaW1lLm5vdygpLCB1bml0LCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHNwYW5uaW5nIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgYW5vdGhlciBEYXRlVGltZVxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIG90aGVyIGVuZCBwb2ludCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVudGlsID0gZnVuY3Rpb24gdW50aWwob3RoZXJEYXRlVGltZSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHRoaXMsIG90aGVyRGF0ZVRpbWUpIDogdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBEYXRlVGltZSBpcyBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWUgYXMgYW5vdGhlciBEYXRlVGltZS5cbiAgICogSGlnaGVyLW9yZGVyIHVuaXRzIG11c3QgYWxzbyBiZSBpZGVudGljYWwgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYC5cbiAgICogTm90ZSB0aGF0IHRpbWUgem9uZXMgYXJlICoqaWdub3JlZCoqIGluIHRoaXMgY29tcGFyaXNvbiwgd2hpY2ggY29tcGFyZXMgdGhlICoqbG9jYWwqKiBjYWxlbmRhciB0aW1lLiBVc2Uge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9IHRvIGNvbnZlcnQgb25lIG9mIHRoZSBkYXRlcyBpZiBuZWVkZWQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLmhhc1NhbWUob3RoZXJEVCwgJ2RheScpOyAvL34+IHRydWUgaWYgb3RoZXJEVCBpcyBpbiB0aGUgc2FtZSBjdXJyZW50IGNhbGVuZGFyIGRheVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNTYW1lID0gZnVuY3Rpb24gaGFzU2FtZShvdGhlckRhdGVUaW1lLCB1bml0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgaW5wdXRNcyA9IG90aGVyRGF0ZVRpbWUudmFsdWVPZigpO1xuICAgIHZhciBhZGp1c3RlZFRvWm9uZSA9IHRoaXMuc2V0Wm9uZShvdGhlckRhdGVUaW1lLnpvbmUsIHtcbiAgICAgIGtlZXBMb2NhbFRpbWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gYWRqdXN0ZWRUb1pvbmUuc3RhcnRPZih1bml0KSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gYWRqdXN0ZWRUb1pvbmUuZW5kT2YodW5pdCk7XG4gIH1cbiAgLyoqXG4gICAqIEVxdWFsaXR5IGNoZWNrXG4gICAqIFR3byBEYXRlVGltZXMgYXJlIGVxdWFsIGlmZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLlxuICAgKiBUbyBjb21wYXJlIGp1c3QgdGhlIG1pbGxpc2Vjb25kIHZhbHVlcywgdXNlIGArZHQxID09PSArZHQyYC5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCAmJiBvdGhlci5pc1ZhbGlkICYmIHRoaXMudmFsdWVPZigpID09PSBvdGhlci52YWx1ZU9mKCkgJiYgdGhpcy56b25lLmVxdWFscyhvdGhlci56b25lKSAmJiB0aGlzLmxvYy5lcXVhbHMob3RoZXIubG9jKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHRoaXMgdGltZSByZWxhdGl2ZSB0byBub3csIHN1Y2ggYXMgXCJpbiB0d28gZGF5c1wiLiBDYW4gb25seSBpbnRlcm5hdGlvbmFsaXplIGlmIHlvdXJcbiAgICogcGxhdGZvcm0gc3VwcG9ydHMgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQuIFJvdW5kcyBkb3duIGJ5IGRlZmF1bHQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgb3V0cHV0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IFtvcHRpb25zLmJhc2U9RGF0ZVRpbWUubm93KCldIC0gdGhlIERhdGVUaW1lIHRvIHVzZSBhcyB0aGUgYmFzaXMgdG8gd2hpY2ggdGhpcyB0aW1lIGlzIGNvbXBhcmVkLiBEZWZhdWx0cyB0byBub3cuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdHlsZT1cImxvbmdcIl0gLSB0aGUgc3R5bGUgb2YgdW5pdHMsIG11c3QgYmUgXCJsb25nXCIsIFwic2hvcnRcIiwgb3IgXCJuYXJyb3dcIlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gb3B0aW9ucy51bml0IC0gdXNlIGEgc3BlY2lmaWMgdW5pdCBvciBhcnJheSBvZiB1bml0czsgaWYgb21pdHRlZCwgb3IgYW4gYXJyYXksIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSBiZXN0IHVuaXQuIFVzZSBhbiBhcnJheSBvciBvbmUgb2YgXCJ5ZWFyc1wiLCBcInF1YXJ0ZXJzXCIsIFwibW9udGhzXCIsIFwid2Vla3NcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIG9yIFwic2Vjb25kc1wiXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucm91bmQ9dHJ1ZV0gLSB3aGV0aGVyIHRvIHJvdW5kIHRoZSBudW1iZXJzIGluIHRoZSBvdXRwdXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5wYWRkaW5nPTBdIC0gcGFkZGluZyBpbiBtaWxsaXNlY29uZHMuIFRoaXMgYWxsb3dzIHlvdSB0byByb3VuZCB1cCB0aGUgcmVzdWx0IGlmIGl0IGZpdHMgaW5zaWRlIHRoZSB0aHJlc2hvbGQuIERvbid0IHVzZSBpbiBjb21iaW5hdGlvbiB3aXRoIHtyb3VuZDogZmFsc2V9IGJlY2F1c2UgdGhlIGRlY2ltYWwgb3V0cHV0IHdpbGwgaW5jbHVkZSB0aGUgcGFkZGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gXCJpbiAxIGRheVwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnRvUmVsYXRpdmUoeyBkYXlzOiAxIH0pIC8vPT4gXCJkZW50cm8gZGUgMSBkw61hXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSh7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkYW5zIDIzIGhldXJlc1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZSh7IHVuaXQ6IFwiaG91cnNcIiB9KSAvLz0+IFwiNDggaG91cnMgYWdvXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBob3VyczogMzYgfSkudG9SZWxhdGl2ZSh7IHJvdW5kOiBmYWxzZSB9KSAvLz0+IFwiMS41IGRheXMgYWdvXCJcbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9SZWxhdGl2ZSA9IGZ1bmN0aW9uIHRvUmVsYXRpdmUob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwge1xuICAgICAgem9uZTogdGhpcy56b25lXG4gICAgfSksXG4gICAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcgPyB0aGlzIDwgYmFzZSA/IC1vcHRpb25zLnBhZGRpbmcgOiBvcHRpb25zLnBhZGRpbmcgOiAwO1xuICAgIHZhciB1bml0cyA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl07XG4gICAgdmFyIHVuaXQgPSBvcHRpb25zLnVuaXQ7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnVuaXQpKSB7XG4gICAgICB1bml0cyA9IG9wdGlvbnMudW5pdDtcbiAgICAgIHVuaXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpZmZSZWxhdGl2ZShiYXNlLCB0aGlzLnBsdXMocGFkZGluZyksIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBudW1lcmljOiBcImFsd2F5c1wiLFxuICAgICAgdW5pdHM6IHVuaXRzLFxuICAgICAgdW5pdDogdW5pdFxuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRhdGUgcmVsYXRpdmUgdG8gdG9kYXksIHN1Y2ggYXMgXCJ5ZXN0ZXJkYXlcIiBvciBcIm5leHQgbW9udGhcIi5cbiAgICogT25seSBpbnRlcm5hdGlvbmFsaXplcyBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0OyBpZiBvbWl0dGVkLCB0aGUgbWV0aG9kIHdpbGwgcGljayB0aGUgdW5pdC4gVXNlIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBvciBcImRheXNcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSBvdmVycmlkZSB0aGUgbnVtYmVyaW5nU3lzdGVtIG9mIHRoaXMgRGF0ZVRpbWUuIFRoZSBJbnRsIHN5c3RlbSBtYXkgY2hvb3NlIG5vdCB0byBob25vciB0aGlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCJ0b21vcnJvd1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiXCJtYcOxYW5hXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKHsgbG9jYWxlOiBcImZyXCIgfSkgLy89PiBcImRlbWFpblwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoKSAvLz0+IFwiMiBkYXlzIGFnb1wiXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvUmVsYXRpdmVDYWxlbmRhciA9IGZ1bmN0aW9uIHRvUmVsYXRpdmVDYWxlbmRhcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKG9wdGlvbnMuYmFzZSB8fCBEYXRlVGltZS5mcm9tT2JqZWN0KHt9LCB7XG4gICAgICB6b25lOiB0aGlzLnpvbmVcbiAgICB9KSwgdGhpcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG51bWVyaWM6IFwiYXV0b1wiLFxuICAgICAgdW5pdHM6IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiXSxcbiAgICAgIGNhbGVuZGFyeTogdHJ1ZVxuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtaW4gb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1pbmltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtaW4gRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLm1pbiA9IGZ1bmN0aW9uIG1pbigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZGF0ZVRpbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZGF0ZVRpbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICghZGF0ZVRpbWVzLmV2ZXJ5KERhdGVUaW1lLmlzRGF0ZVRpbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJtaW4gcmVxdWlyZXMgYWxsIGFyZ3VtZW50cyBiZSBEYXRlVGltZXNcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gaS52YWx1ZU9mKCk7XG4gICAgfSwgTWF0aC5taW4pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG1heCBvZiBzZXZlcmFsIGRhdGUgdGltZXNcbiAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIERhdGVUaW1lcyBmcm9tIHdoaWNoIHRvIGNob29zZSB0aGUgbWF4aW11bVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX0gdGhlIG1heCBEYXRlVGltZSwgb3IgdW5kZWZpbmVkIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUubWF4ID0gZnVuY3Rpb24gbWF4KCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZGF0ZVRpbWVzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBkYXRlVGltZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWF4IHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBiZXN0QnkoZGF0ZVRpbWVzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGkudmFsdWVPZigpO1xuICAgIH0sIE1hdGgubWF4KTtcbiAgfSAvLyBNSVNDXG5cbiAgLyoqXG4gICAqIEV4cGxhaW4gaG93IGEgc3RyaW5nIHdvdWxkIGJlIHBhcnNlZCBieSBmcm9tRm9ybWF0KClcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSBkZXNjcmlwdGlvbilcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRha2VuIGJ5IGZyb21Gb3JtYXQoKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbUZvcm1hdEV4cGxhaW4gPSBmdW5jdGlvbiBmcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgX29wdGlvbnMkbG9jYWxlID0gX29wdGlvbnMubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRsb2NhbGUsXG4gICAgICAgIF9vcHRpb25zJG51bWJlcmluZ1N5cyA9IF9vcHRpb25zLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX29wdGlvbnMkbnVtYmVyaW5nU3lzID09PSB2b2lkIDAgPyBudWxsIDogX29wdGlvbnMkbnVtYmVyaW5nU3lzLFxuICAgICAgICBsb2NhbGVUb1VzZSA9IExvY2FsZS5mcm9tT3B0cyh7XG4gICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbTogbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgZGVmYXVsdFRvRU46IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0RXhwbGFpbiBpbnN0ZWFkXG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbVN0cmluZ0V4cGxhaW4gPSBmdW5jdGlvbiBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyk7XG4gIH0gLy8gRk9STUFUIFBSRVNFVFNcblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKERhdGVUaW1lLCBbe1xuICAgIGtleTogXCJpc1ZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBEYXRlVGltZSBpcyBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEYXRlVGltZSBpcyB2YWxpZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnZhbGlkUmVhc29uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImludmFsaWRFeHBsYW5hdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9jYWxlIG9mIGEgRGF0ZVRpbWUsIHN1Y2ggJ2VuLUdCJy4gVGhlIGxvY2FsZSBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsb2NhbGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5sb2NhbGUgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm51bWJlcmluZ1N5c3RlbVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgb3V0cHV0IGNhbGVuZGFyIG9mIGEgRGF0ZVRpbWUsIHN1Y2ggJ2lzbGFtaWMnLiBUaGUgb3V0cHV0IGNhbGVuZGFyIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm91dHB1dENhbGVuZGFyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRpbWUgem9uZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBEYXRlVGltZS5cbiAgICAgKiBAdHlwZSB7Wm9uZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInpvbmVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl96b25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5hbWUgb2YgdGhlIHRpbWUgem9uZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiem9uZU5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgeWVhclxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxN1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ5ZWFyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnllYXIgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcXVhcnRlclxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5xdWFydGVyIC8vPT4gMlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJxdWFydGVyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5jZWlsKHRoaXMuYy5tb250aCAvIDMpIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1vbnRoICgxLTEyKS5cbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkubW9udGggLy89PiA1XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1vbnRoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRheSBvZiB0aGUgbW9udGggKDEtMzBpc2gpLlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5kYXkgLy89PiAyNVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkYXlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuZGF5IDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDkpLmhvdXIgLy89PiA5XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImhvdXJcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuaG91ciA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaW51dGUgb2YgdGhlIGhvdXIgKDAtNTkpLlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCkubWludXRlIC8vPT4gMzBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWludXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSAoMC01OSkuXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1Mikuc2Vjb25kIC8vPT4gNTJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vjb25kXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnNlY29uZCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1MiwgNjU0KS5taWxsaXNlY29uZCAvLz0+IDY1NFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtaWxsaXNlY29uZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5taWxsaXNlY29uZCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3ZWVrIHllYXJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMiwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3ZWVrWWVhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEodGhpcykud2Vla1llYXIgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciAoMS01MmlzaCkuXG4gICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLndlZWtOdW1iZXIgLy89PiAyMVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrTnVtYmVyIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRheSBvZiB0aGUgd2Vlay5cbiAgICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMSwgMzEpLndlZWtkYXkgLy89PiA0XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndlZWtkYXlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgb3JkaW5hbCAobWVhbmluZyB0aGUgZGF5IG9mIHRoZSB5ZWFyKVxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1XG4gICAgICogQHR5cGUge251bWJlcnxEYXRlVGltZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9yZGluYWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKS5vcmRpbmFsIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdCcuXG4gICAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS5tb250aFNob3J0IC8vPT4gT2N0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1vbnRoU2hvcnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocyhcInNob3J0XCIsIHtcbiAgICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgICAgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBsb25nIG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdG9iZXInLlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtb250aExvbmdcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocyhcImxvbmdcIiwge1xuICAgICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgICB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IHdlZWtkYXksIHN1Y2ggYXMgJ01vbicuXG4gICAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5U2hvcnQgLy89PiBNb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2Vla2RheVNob3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cyhcInNob3J0XCIsIHtcbiAgICAgICAgbG9jT2JqOiB0aGlzLmxvY1xuICAgICAgfSlbdGhpcy53ZWVrZGF5IC0gMV0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIGxvbmcgd2Vla2RheSwgc3VjaCBhcyAnTW9uZGF5Jy5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLndlZWtkYXlMb25nIC8vPT4gTW9uZGF5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndlZWtkYXlMb25nXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cyhcImxvbmdcIiwge1xuICAgICAgICBsb2NPYmo6IHRoaXMubG9jXG4gICAgICB9KVt0aGlzLndlZWtkYXkgLSAxXSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgVVRDIG9mZnNldCBvZiB0aGlzIERhdGVUaW1lIGluIG1pbnV0ZXNcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5vZmZzZXQgLy89PiAtMjQwXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvZmZzZXRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyArdGhpcy5vIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib2Zmc2V0TmFtZVNob3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgICAgZm9ybWF0OiBcInNob3J0XCIsXG4gICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvZmZzZXROYW1lTG9uZ1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICAgIGZvcm1hdDogXCJsb25nXCIsXG4gICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzT2Zmc2V0Rml4ZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUuaXNVbml2ZXJzYWwgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0luRFNUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5pc09mZnNldEZpeGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCA+IHRoaXMuc2V0KHtcbiAgICAgICAgICBtb250aDogMVxuICAgICAgICB9KS5vZmZzZXQgfHwgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7XG4gICAgICAgICAgbW9udGg6IDVcbiAgICAgICAgfSkub2Zmc2V0O1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBEYXRlVGltZSBpcyBpbiBhIGxlYXAgeWVhciwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNikuaXNJbkxlYXBZZWFyIC8vPT4gdHJ1ZVxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc0luTGVhcFllYXJcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyBtb250aFxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYsIDIpLmRheXNJbk1vbnRoIC8vPT4gMjlcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAzKS5kYXlzSW5Nb250aCAvLz0+IDMxXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRheXNJbk1vbnRoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRheXMgaW4gdGhpcyBEYXRlVGltZSdzIHllYXJcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxMykuZGF5c0luWWVhciAvLz0+IDM2NVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkYXlzSW5ZZWFyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZGF5c0luWWVhcih0aGlzLnllYXIpIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygd2Vla3MgaW4gdGhpcyBEYXRlVGltZSdzIHllYXJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDA0KS53ZWVrc0luV2Vla1llYXIgLy89PiA1M1xuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLndlZWtzSW5XZWVrWWVhciAvLz0+IDUyXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndlZWtzSW5XZWVrWWVhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHdlZWtzSW5XZWVrWWVhcih0aGlzLndlZWtZZWFyKSA6IE5hTjtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJEQVRFX1NIT1JUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURV9TSE9SVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzJ1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFX01FRFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVfTUVEO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIE9jdCAxNCwgMTk4MydcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURV9NRURfV0lUSF9XRUVLREFZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURV9NRURfV0lUSF9XRUVLREFZO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzJ1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFX0ZVTExcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFX0ZVTEw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ1R1ZXNkYXksIE9jdG9iZXIgMTQsIDE5ODMnXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVfSFVHRVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVfSFVHRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV9TSU1QTEVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FX1NJTVBMRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV9XSVRIX1NFQ09ORFNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FX1dJVEhfU0VDT05EUztcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIlRJTUVfV0lUSF9TSE9SVF9PRkZTRVRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV9XSVRIX0xPTkdfT0ZGU0VUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gVElNRV9XSVRIX0xPTkdfT0ZGU0VUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMCcsIGFsd2F5cyAyNC1ob3VyLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUSU1FXzI0X1NJTVBMRVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFRJTUVfMjRfU0lNUExFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMycsIGFsd2F5cyAyNC1ob3VyLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUSU1FXzI0X1dJVEhfU0VDT05EU1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9TRUNPTkRTO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFRFQnLCBhbHdheXMgMjQtaG91ci5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScsIGFsd2F5cyAyNC1ob3VyLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzEwLzE0LzE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfU0hPUlRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9TSE9SVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdCAxNCwgMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFVElNRV9NRURcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9NRUQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdCAxNCwgMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUztcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpLCAxNCBPY3QgMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMCBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfRlVMTFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVUSU1FX0ZVTEw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMsIDk6MzA6MzMgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaWRheSwgT2N0b2JlciAxNCwgMTk4MywgOTozMCBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfSFVHRVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVUSU1FX0hVR0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaWRheSwgT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZVRpbWU7XG59KCk7XG5mdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7XG4gIGlmIChEYXRlVGltZS5pc0RhdGVUaW1lKGRhdGVUaW1laXNoKSkge1xuICAgIHJldHVybiBkYXRlVGltZWlzaDtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgdHlwZW9mIGRhdGVUaW1laXNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIlVua25vd24gZGF0ZXRpbWUgYXJndW1lbnQ6IFwiICsgZGF0ZVRpbWVpc2ggKyBcIiwgb2YgdHlwZSBcIiArIHR5cGVvZiBkYXRlVGltZWlzaCk7XG4gIH1cbn1cblxudmFyIFZFUlNJT04gPSBcIjIuMy4xXCI7XG5cbmV4cG9ydHMuRGF0ZVRpbWUgPSBEYXRlVGltZTtcbmV4cG9ydHMuRHVyYXRpb24gPSBEdXJhdGlvbjtcbmV4cG9ydHMuRml4ZWRPZmZzZXRab25lID0gRml4ZWRPZmZzZXRab25lO1xuZXhwb3J0cy5JQU5BWm9uZSA9IElBTkFab25lO1xuZXhwb3J0cy5JbmZvID0gSW5mbztcbmV4cG9ydHMuSW50ZXJ2YWwgPSBJbnRlcnZhbDtcbmV4cG9ydHMuSW52YWxpZFpvbmUgPSBJbnZhbGlkWm9uZTtcbmV4cG9ydHMuU2V0dGluZ3MgPSBTZXR0aW5ncztcbmV4cG9ydHMuU3lzdGVtWm9uZSA9IFN5c3RlbVpvbmU7XG5leHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xuZXhwb3J0cy5ab25lID0gWm9uZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWx1eG9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gXCJsdXhvblwiO1xuXG5mdW5jdGlvbiBkaXNwbGF5V2VhdGhlcihkYXRhKSB7XG4gICAgLy8gY2xlYXIgc2VhcmNoIFxuICAgIGNvbnN0IHNlYXJjaGJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hib3gnKVxuICAgIHNlYXJjaGJveC52YWx1ZSA9ICcnXG4gICAgLy8gY2hhbmdlIHRoZSB0ZW1wZXJhdHVyZSBhbmQgZmVlbHMgbGlrZVxuICAgIC8vIHRpbWUgY2l0eSBzdW5yaXNzZSBzdW5zZXQgdGVtcCBjb25kIGhpZ2ggYW5kIGxvdyAgZmVlbHMgIGh1bWlkaXR5IHByZXNzdXJlIHdpbmRcbiAgICBjb25zdCBjaXR5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNpdHktY3VycmVudCcpXG4gICAgY2l0eURpdi5pbm5lckhUTUwgPSBgJHtkYXRhLm5hbWV9LCAke2RhdGEuc3lzLmNvdW50cnl9YFxuICAgIFxuICAgIGNvbnN0IHRpbWVEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGltZS1jdXJyZW50JylcbiAgICB0aW1lRGl2LmlubmVySFRNTCA9IGAke3RpbWVDb252ZXJ0ZXIoZGF0YS5kdCwgZGF0YS50aW1lem9uZSl9YFxuXG4gICAgY29uc3Qgc3VucmlzZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdW5yaXNlLWN1cnJlbnQnKVxuICAgIHN1bnJpc2VEaXYuaW5uZXJIVE1MID0gYFN1bnJpc2UgJHt0aW1lQ29udmVydGVyKGRhdGEuc3lzLnN1bnJpc2UsIGRhdGEudGltZXpvbmUpfWBcblxuICAgIGNvbnN0IHN1bnNldERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdW5zZXQtY3VycmVudCcpXG4gICAgc3Vuc2V0RGl2LmlubmVySFRNTCA9IGBTdW5zZXQgJHt0aW1lQ29udmVydGVyKGRhdGEuc3lzLnN1bnNldCwgZGF0YS50aW1lem9uZSl9YFxuXG4gICAgY29uc3QgdGVtcGVyYXR1cmVDdXJyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlbXBlcmF0dXJlLWN1cnJlbnQnKVxuICAgIHRlbXBlcmF0dXJlQ3VyckRpdi5pbm5lckhUTUwgPSBgJHt0ZW1wQ29udmVydGVyKGRhdGEubWFpbi50ZW1wKX0mIzE3NjtgXG5cblxuICAgIGNvbnN0IHdlYXRoZXJJZEN1cnJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlcmlkLWN1cnJlbnQnKVxuICAgIHdlYXRoZXJJZEN1cnJEaXYuaW5uZXJIVE1MID0gYCR7c3RyQ29udmVydGVyKGRhdGEud2VhdGhlclswXS5kZXNjcmlwdGlvbil9YFxuXG4gICAgY29uc3Qgd2VhdGhlckhpZ2hMb3dEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlci1oaWdobG93JylcbiAgICB3ZWF0aGVySGlnaExvd0Rpdi5pbm5lckhUTUwgPSBgSDogJHt0ZW1wQ29udmVydGVyKGRhdGEubWFpbi50ZW1wX21heCl9JiMxNzY7IHwgTDogJHt0ZW1wQ29udmVydGVyKGRhdGEubWFpbi50ZW1wX21pbil9JiMxNzY7YFxuXG4gICAgY29uc3QgZmVlbHNMaWtlRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWxzbGlrZS1jdXJyZW50JylcbiAgICBmZWVsc0xpa2VEaXYuaW5uZXJIVE1MID0gYCR7dGVtcENvbnZlcnRlcihkYXRhLm1haW4uZmVlbHNfbGlrZSl9JiMxNzY7YFxuXG4gICAgY29uc3QgaHVtaWRpdHlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaHVtaWRpdHktY3VycmVudCcpXG4gICAgaHVtaWRpdHlEaXYuaW5uZXJIVE1MID0gYCR7ZGF0YS5tYWluLmh1bWlkaXR5fSVgXG5cbiAgICBjb25zdCBwcmVzc3VyZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVzc3VyZS1jdXJyZW50JylcbiAgICBwcmVzc3VyZURpdi5pbm5lckhUTUwgPSBgJHtkYXRhLm1haW4ucHJlc3N1cmV9aFBhYFxuXG4gICAgY29uc3Qgd2luZERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aW5kLWN1cnJlbnQnKVxuICAgIHdpbmREaXYuaW5uZXJIVE1MID0gYCR7dGVtcENvbnZlcnRlcihkYXRhLndpbmQuc3BlZWQpfW0vc2BcblxuICAgIGNvbnNvbGUubG9nKGRhdGEud2VhdGhlclswXS5pZCk7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAvLyBjaGFuZ2UgYmFja2dyb3VuZHMgXG4gICAgY2hhbmdlQmFja2dyb3VuZChkYXRhKTtcblxuICAgIFxuICAgIFxufVxuXG5leHBvcnQgeyBkaXNwbGF5V2VhdGhlciB9XG5cbmZ1bmN0aW9uIGNoYW5nZUJhY2tncm91bmQgKGRhdGEpIHtcbiAgICBjb25zdCBiYWNrZ3JvdW5kID0gZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2VcbiAgICBjb25zdCB3ZWF0aGVySWQgPSBkYXRhLndlYXRoZXJbMF0uaWRcblxuICAgXG4gICAgaWYgKHdlYXRoZXJJZCA9PSA4MDApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCI4MDBcIik7XG4gICAgICAgIFxuICAgIH0gZWxzZSBpZiAod2VhdGhlcklkID09IDcwMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImVsc2VcIik7XG4gICAgICAgIFxuICAgIH0gZWxzZSB7Y29uc29sZS5sb2coXCJkdXBhXCIpO1xuICAgIH1cbiAgICAgICBcblxuXG4gICAgXG59XG5cblxuXG5mdW5jdGlvbiB0aW1lQ29udmVydGVyKHRpbWUsdGltZXpvbmUpIHtcblxuICAgIGxldCB0aW1lMiA9IHRpbWUgKyB0aW1lem9uZVxuICAgIFxuICAgIGxldCB0ZXN0RGF0ZSA9IERhdGVUaW1lLmZyb21TZWNvbmRzKHRpbWUyKS5taW51cyh7aG91cnM6IDF9KVxuICAgIGxldCBzaW1wbGVUaW1lID0gdGVzdERhdGUudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV8yNF9TSU1QTEUpXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIHNpbXBsZVRpbWVcbn1cblxuZnVuY3Rpb24gdGVtcENvbnZlcnRlcih0ZW1wKSB7XG4gICAgcmV0dXJuIE1hdGgudHJ1bmModGVtcClcbiAgICBcbn1cblxuZnVuY3Rpb24gc3RyQ29udmVydGVyIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG4vLyBhZGQgc3BhY2UgdG8gc2VhcmNoIG9ua2V5ZG93bj1cInJldHVybiAvW2Etel0vaS50ZXN0KGV2ZW50LmtleSlcIlxuXG5cbi8vICB7XG4vLyAgICAgXCJjb29yZFwiOiB7XG4vLyAgICAgICAgIFwibG9uXCI6IDE4LjUzMTksXG4vLyAgICAgICAgIFwibGF0XCI6IDU0LjUxODlcbi8vICAgICB9LFxuLy8gICAgIFwid2VhdGhlclwiOiBbXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICAgIFwiaWRcIjogODAwLFxuLy8gICAgICAgICAgICAgXCJtYWluXCI6IFwiQ2xlYXJcIixcbi8vICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjbGVhciBza3lcIixcbi8vICAgICAgICAgICAgIFwiaWNvblwiOiBcIjAxZFwiXG4vLyAgICAgICAgIH1cbi8vICAgICBdLFxuLy8gICAgIFwiYmFzZVwiOiBcInN0YXRpb25zXCIsXG4vLyAgICAgXCJtYWluXCI6IHtcbi8vICAgICAgICAgXCJ0ZW1wXCI6IDEwLjc1LFxuLy8gICAgICAgICBcImZlZWxzX2xpa2VcIjogOS4yMSxcbi8vICAgICAgICAgXCJ0ZW1wX21pblwiOiA5LjgxLFxuLy8gICAgICAgICBcInRlbXBfbWF4XCI6IDEyLjgsXG4vLyAgICAgICAgIFwicHJlc3N1cmVcIjogMTAzMyxcbi8vICAgICAgICAgXCJodW1pZGl0eVwiOiA1MVxuLy8gICAgIH0sXG4vLyAgICAgXCJ2aXNpYmlsaXR5XCI6IDEwMDAwLFxuLy8gICAgIFwid2luZFwiOiB7XG4vLyAgICAgICAgIFwic3BlZWRcIjogNi4xNyxcbi8vICAgICAgICAgXCJkZWdcIjogMTMwXG4vLyAgICAgfSxcbi8vICAgICBcImNsb3Vkc1wiOiB7XG4vLyAgICAgICAgIFwiYWxsXCI6IDBcbi8vICAgICB9LFxuLy8gICAgIFwiZHRcIjogMTY0NzUxNzcyNixcbi8vICAgICBcInN5c1wiOiB7XG4vLyAgICAgICAgIFwidHlwZVwiOiAxLFxuLy8gICAgICAgICBcImlkXCI6IDE2OTYsXG4vLyAgICAgICAgIFwiY291bnRyeVwiOiBcIlBMXCIsXG4vLyAgICAgICAgIFwic3VucmlzZVwiOiAxNjQ3NDkyOTgzLFxuLy8gICAgICAgICBcInN1bnNldFwiOiAxNjQ3NTM1OTM1XG4vLyAgICAgfSxcbi8vICAgICBcInRpbWV6b25lXCI6IDM2MDAsXG4vLyAgICAgXCJpZFwiOiAzMDk5NDI0LFxuLy8gICAgIFwibmFtZVwiOiBcIkdkeW5pYVwiLFxuLy8gICAgIFwiY29kXCI6IDIwMFxuLy8gfSIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0ICogYXMgd2VhdGhlckFwaSBmcm9tICcuL21vZHVsZXMvd2VhdGhlci5qcydcblxuY29uc3Qgc2VhcmNoYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJtaXRcIilcbmNvbnN0IHNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2VhcmNoYm94XCIpXG4gICAgXG5cbmxldCBjaXR5O1xuXG4gICBcbnNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICBjaXR5ID0gc2VhcmNoLnZhbHVlLnRvTG93ZXJDYXNlKClcbiAgICBzZWFyY2guY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpXG5cbiAgICBpZiAoY2l0eSA9PT0gJycpIHtcbiAgICAgICAgc2VhcmNoLmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKVxuICAgIH0gXG59KVxuXG5cbnNlYXJjaGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIC8vZG91YmxlIGNoZWNrIGlmIGNpdHkgaXMgXCJcIiBhZnRlciBiYWNrc3BhY2VcbiAgICAgICAgaWYgKGNpdHkgPT0gJycgfHwgY2l0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibm8gY2l0eVwiKTsgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgZnVudGlvbnMgdG8gY2hhbmdlIHRoZSB2aWV3IGFuZCBkaXNwbGF5XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjaXR5KTtcbiAgICAgICAgICAgIHdlYXRoZXJBcGkuZ2V0V2VhdGhlcihjaXR5KTtcbiAgICAgICAgfVxufSlcblxuY29uc29sZS5sb2coXCJoZWxsb1wiKTtcblxuXG5cblxuXG5cbiIsIlxuLy8gQVBJIEtleSA4NzEzZGQwYzIwZWRmMzlmOTM4YzEyMmIwMTg0Zjg1YlxuaW1wb3J0IHsgZGlzcGxheVdlYXRoZXIgfSBmcm9tICcuL3ZpZXcuanMnXG5cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYXRoZXIoY2l0eSkge1xuICAgIFxuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0ke2NpdHl9JnVuaXRzPW1ldHJpYyZhcHBpZD04NzEzZGQwYzIwZWRmMzlmOTM4YzEyMmIwMTg0Zjg1YmBcblxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge21vZGU6ICdjb3JzJ30pXG4gICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKGBDaXR5ICR7Y2l0eX0gbm90IGZvdW5kYCk7XG4gICAgXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIGRpc3BsYXlXZWF0aGVyKGRhdGEpO1xuICAgIFxufVxuXG5cblxuXG5cblxuZXhwb3J0IHsgZ2V0V2VhdGhlciB9O1xuXG5cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImFyZ3VtZW50cyIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsImFyZ3MiLCJDbGFzcyIsImEiLCJpbnN0YW5jZSIsIkZ1bmN0aW9uIiwiYmluZCIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJmbiIsImluZGV4T2YiLCJUeXBlRXJyb3IiLCJoYXMiLCJnZXQiLCJzZXQiLCJXcmFwcGVyIiwidmFsdWUiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiaXNBcnJheSIsIm1pbkxlbiIsIm4iLCJzbGljZSIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImRvbmUiLCJMdXhvbkVycm9yIiwiX0Vycm9yIiwiRXJyb3IiLCJJbnZhbGlkRGF0ZVRpbWVFcnJvciIsIl9MdXhvbkVycm9yIiwicmVhc29uIiwidG9NZXNzYWdlIiwiSW52YWxpZEludGVydmFsRXJyb3IiLCJfTHV4b25FcnJvcjIiLCJJbnZhbGlkRHVyYXRpb25FcnJvciIsIl9MdXhvbkVycm9yMyIsIkNvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIiwiX0x1eG9uRXJyb3I0IiwiSW52YWxpZFVuaXRFcnJvciIsIl9MdXhvbkVycm9yNSIsInVuaXQiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIl9MdXhvbkVycm9yNiIsIlpvbmVJc0Fic3RyYWN0RXJyb3IiLCJfTHV4b25FcnJvcjciLCJzIiwibCIsIkRBVEVfU0hPUlQiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJEQVRFX01FRCIsIkRBVEVfTUVEX1dJVEhfV0VFS0RBWSIsIndlZWtkYXkiLCJEQVRFX0ZVTEwiLCJEQVRFX0hVR0UiLCJUSU1FX1NJTVBMRSIsImhvdXIiLCJtaW51dGUiLCJUSU1FX1dJVEhfU0VDT05EUyIsInNlY29uZCIsIlRJTUVfV0lUSF9TSE9SVF9PRkZTRVQiLCJ0aW1lWm9uZU5hbWUiLCJUSU1FX1dJVEhfTE9OR19PRkZTRVQiLCJUSU1FXzI0X1NJTVBMRSIsImhvdXJDeWNsZSIsIlRJTUVfMjRfV0lUSF9TRUNPTkRTIiwiVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCIsIlRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCIsIkRBVEVUSU1FX1NIT1JUIiwiREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfTUVEIiwiREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyIsIkRBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkiLCJEQVRFVElNRV9GVUxMIiwiREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9IVUdFIiwiREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMiLCJpc1VuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaGFzUmVsYXRpdmUiLCJJbnRsIiwiUmVsYXRpdmVUaW1lRm9ybWF0IiwiYmVzdEJ5IiwiYnkiLCJjb21wYXJlIiwicmVkdWNlIiwiYmVzdCIsInBhaXIiLCJvYmoiLCJwcm9wIiwiaW50ZWdlckJldHdlZW4iLCJ0aGluZyIsImJvdHRvbSIsInRvcCIsInBhZFN0YXJ0IiwiaW5wdXQiLCJwYXJzZUludGVnZXIiLCJzdHJpbmciLCJwYXJzZUludCIsInBhcnNlRmxvYXRpbmciLCJwYXJzZUZsb2F0IiwicGFyc2VNaWxsaXMiLCJmcmFjdGlvbiIsImYiLCJNYXRoIiwiZmxvb3IiLCJyb3VuZFRvIiwibnVtYmVyIiwiZGlnaXRzIiwidG93YXJkWmVybyIsImZhY3RvciIsInBvdyIsInRydW5jIiwicm91bmQiLCJpc0xlYXBZZWFyIiwiZGF5c0luWWVhciIsImRheXNJbk1vbnRoIiwieCIsIm1vZE1vbnRoIiwib2JqVG9Mb2NhbFRTIiwiZCIsIkRhdGUiLCJVVEMiLCJtaWxsaXNlY29uZCIsInNldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJ3ZWVrc0luV2Vla1llYXIiLCJ3ZWVrWWVhciIsInAxIiwibGFzdCIsInAyIiwidW50cnVuY2F0ZVllYXIiLCJwYXJzZVpvbmVJbmZvIiwidHMiLCJvZmZzZXRGb3JtYXQiLCJsb2NhbGUiLCJ0aW1lWm9uZSIsImRhdGUiLCJpbnRsT3B0cyIsIm1vZGlmaWVkIiwicGFyc2VkIiwiRGF0ZVRpbWVGb3JtYXQiLCJmb3JtYXRUb1BhcnRzIiwiZmluZCIsIm0iLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJzaWduZWRPZmZzZXQiLCJvZmZIb3VyU3RyIiwib2ZmTWludXRlU3RyIiwib2ZmSG91ciIsIk51bWJlciIsImlzTmFOIiwib2ZmTWluIiwiaXMiLCJhc051bWJlciIsIm51bWVyaWNWYWx1ZSIsIm5vcm1hbGl6ZU9iamVjdCIsIm5vcm1hbGl6ZXIiLCJub3JtYWxpemVkIiwidSIsInYiLCJmb3JtYXRPZmZzZXQiLCJvZmZzZXQiLCJmb3JtYXQiLCJob3VycyIsImFicyIsIm1pbnV0ZXMiLCJzaWduIiwiUmFuZ2VFcnJvciIsInRpbWVPYmplY3QiLCJwaWNrIiwiaWFuYVJlZ2V4IiwibW9udGhzTG9uZyIsIm1vbnRoc1Nob3J0IiwibW9udGhzTmFycm93IiwibW9udGhzIiwid2Vla2RheXNMb25nIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTmFycm93Iiwid2Vla2RheXMiLCJtZXJpZGllbXMiLCJlcmFzTG9uZyIsImVyYXNTaG9ydCIsImVyYXNOYXJyb3ciLCJlcmFzIiwic3RyaW5naWZ5VG9rZW5zIiwic3BsaXRzIiwidG9rZW5Ub1N0cmluZyIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwidG9rZW4iLCJsaXRlcmFsIiwidmFsIiwiX21hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMiLCJEIiwiREQiLCJEREQiLCJEREREIiwidCIsInR0IiwidHR0IiwidHR0dCIsIlQiLCJUVCIsIlRUVCIsIlRUVFQiLCJmZiIsImZmZiIsImZmZmYiLCJGIiwiRkYiLCJGRkYiLCJGRkZGIiwiRm9ybWF0dGVyIiwiZm9ybWF0T3B0cyIsIm9wdHMiLCJsb2MiLCJzeXN0ZW1Mb2MiLCJwYXJzZUZvcm1hdCIsImZtdCIsImN1cnJlbnQiLCJjdXJyZW50RnVsbCIsImJyYWNrZXRlZCIsImMiLCJjaGFyQXQiLCJtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzIiwiX3Byb3RvIiwiZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQiLCJkdCIsInJlZGVmYXVsdFRvU3lzdGVtIiwiZHRGb3JtYXR0ZXIiLCJmb3JtYXREYXRlVGltZSIsImZvcm1hdERhdGVUaW1lUGFydHMiLCJyZXNvbHZlZE9wdGlvbnMiLCJudW0iLCJmb3JjZVNpbXBsZSIsInBhZFRvIiwibnVtYmVyRm9ybWF0dGVyIiwiZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nIiwiX3RoaXMiLCJrbm93bkVuZ2xpc2giLCJsaXN0aW5nTW9kZSIsInVzZURhdGVUaW1lRm9ybWF0dGVyIiwib3V0cHV0Q2FsZW5kYXIiLCJleHRyYWN0IiwiaXNPZmZzZXRGaXhlZCIsImFsbG93WiIsImlzVmFsaWQiLCJ6b25lIiwic3RhbmRhbG9uZSIsIm1vbnRoRm9yRGF0ZVRpbWUiLCJ3ZWVrZGF5Rm9yRGF0ZVRpbWUiLCJlcmEiLCJlcmFGb3JEYXRlVGltZSIsIm9mZnNldE5hbWUiLCJ6b25lTmFtZSIsIm1lcmlkaWVtRm9yRGF0ZVRpbWUiLCJ3ZWVrTnVtYmVyIiwib3JkaW5hbCIsInF1YXJ0ZXIiLCJtYXliZU1hY3JvIiwiZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nIiwiZHVyIiwibGlsZHVyIiwiX3RoaXMyIiwidG9rZW5Ub0ZpZWxkIiwidG9rZW5zIiwicmVhbFRva2VucyIsImZvdW5kIiwiX3JlZiIsImNvbGxhcHNlZCIsInNoaWZ0VG8iLCJmaWx0ZXIiLCJtYXBwZWQiLCJJbnZhbGlkIiwiZXhwbGFuYXRpb24iLCJab25lIiwiZXF1YWxzIiwib3RoZXJab25lIiwic2luZ2xldG9uJDEiLCJTeXN0ZW1ab25lIiwiX1pvbmUiLCJnZXRUaW1lem9uZU9mZnNldCIsIlJlZ0V4cCIsImR0ZkNhY2hlIiwidHlwZVRvUG9zIiwiaWFuYVpvbmVDYWNoZSIsIklBTkFab25lIiwidmFsaWQiLCJpc1ZhbGlkWm9uZSIsInJlc2V0Q2FjaGUiLCJpc1ZhbGlkU3BlY2lmaWVyIiwiTmFOIiwiZHRmIiwiaG91cjEyIiwiX3JlZjIiLCJmb3JtYXR0ZWQiLCJmaWxsZWQiLCJfZm9ybWF0dGVkJGkiLCJwb3MiLCJwYXJ0c09mZnNldCIsInJlcGxhY2UiLCJleGVjIiwiZk1vbnRoIiwiZkRheSIsImhhY2t5T2Zmc2V0IiwiYXNUUyIsIm92ZXIiLCJzaW5nbGV0b24iLCJGaXhlZE9mZnNldFpvbmUiLCJmaXhlZCIsInV0Y0luc3RhbmNlIiwicGFyc2VTcGVjaWZpZXIiLCJyIiwibWF0Y2giLCJJbnZhbGlkWm9uZSIsIm5vcm1hbGl6ZVpvbmUiLCJkZWZhdWx0Wm9uZSIsImxvd2VyZWQiLCJ0aHJvd09uSW52YWxpZCIsIm5vdyIsImRlZmF1bHRMb2NhbGUiLCJkZWZhdWx0TnVtYmVyaW5nU3lzdGVtIiwiZGVmYXVsdE91dHB1dENhbGVuZGFyIiwiU2V0dGluZ3MiLCJyZXNldENhY2hlcyIsIkxvY2FsZSIsIm51bWJlcmluZ1N5c3RlbSIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJpbnRsTEZDYWNoZSIsImludGxEVENhY2hlIiwiZ2V0Q2FjaGVkRFRGIiwibG9jU3RyaW5nIiwiaW50bE51bUNhY2hlIiwiaW50bFJlbENhY2hlIiwic3lzTG9jYWxlQ2FjaGUiLCJsaXN0U3R1ZmYiLCJkZWZhdWx0T0siLCJlbmdsaXNoRm4iLCJpbnRsRm4iLCJtb2RlIiwiUG9seU51bWJlckZvcm1hdHRlciIsImludGwiLCJvdGhlck9wdHMiLCJ1c2VHcm91cGluZyIsIm1pbmltdW1JbnRlZ2VyRGlnaXRzIiwiaW5mIiwiTnVtYmVyRm9ybWF0IiwiZ2V0Q2FjaGVkSU5GIiwiUG9seURhdGVGb3JtYXR0ZXIiLCJ6IiwiaXNVbml2ZXJzYWwiLCJnbXRPZmZzZXQiLCJvZmZzZXRaIiwiRGF0ZVRpbWUiLCJmcm9tTWlsbGlzIiwiX3Byb3RvMiIsInRvSlNEYXRlIiwiUG9seVJlbEZvcm1hdHRlciIsImlzRW5nbGlzaCIsInN0eWxlIiwicnRmIiwiX29wdHMiLCJiYXNlIiwiY2FjaGVLZXlPcHRzIiwiZ2V0Q2FjaGVkUlRGIiwiX3Byb3RvMyIsImNvdW50IiwibnVtZXJpYyIsIm5hcnJvdyIsInVuaXRzIiwieWVhcnMiLCJxdWFydGVycyIsIndlZWtzIiwiZGF5cyIsInNlY29uZHMiLCJsYXN0YWJsZSIsImlzRGF5IiwiaXNJblBhc3QiLCJmbXRWYWx1ZSIsInNpbmd1bGFyIiwibGlsVW5pdHMiLCJmbXRVbml0IiwiZm9ybWF0UmVsYXRpdmVUaW1lIiwibnVtYmVyaW5nIiwic3BlY2lmaWVkTG9jYWxlIiwiX3BhcnNlTG9jYWxlU3RyaW5nIiwibG9jYWxlU3RyIiwidUluZGV4Iiwib3B0aW9ucyIsInNtYWxsZXIiLCJzdWJzdHJpbmciLCJfb3B0aW9ucyIsImNhbGVuZGFyIiwicGFyc2VMb2NhbGVTdHJpbmciLCJwYXJzZWRMb2NhbGUiLCJwYXJzZWROdW1iZXJpbmdTeXN0ZW0iLCJwYXJzZWRPdXRwdXRDYWxlbmRhciIsImludGxDb25maWdTdHJpbmciLCJ3ZWVrZGF5c0NhY2hlIiwibW9udGhzQ2FjaGUiLCJtZXJpZGllbUNhY2hlIiwiZXJhQ2FjaGUiLCJmYXN0TnVtYmVyc0NhY2hlZCIsImZyb21PcHRzIiwiZGVmYXVsdFRvRU4iLCJmcm9tT2JqZWN0IiwiX3RlbXAiLCJfcHJvdG80IiwiaXNBY3R1YWxseUVuIiwiaGFzTm9XZWlyZG5lc3MiLCJjbG9uZSIsImFsdHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicmVkZWZhdWx0VG9FTiIsImZvcm1hdFN0ciIsIm1zIiwidXRjIiwibWFwTW9udGhzIiwibWFwV2Vla2RheXMiLCJfdGhpczMiLCJfdGhpczQiLCJmaWVsZCIsIm1hdGNoaW5nIiwiZmFzdE51bWJlcnMiLCJyZWxGb3JtYXR0ZXIiLCJsaXN0Rm9ybWF0dGVyIiwiTGlzdEZvcm1hdCIsImdldENhY2hlZExGIiwic3RhcnRzV2l0aCIsIm90aGVyIiwiY29tYmluZVJlZ2V4ZXMiLCJfbGVuIiwicmVnZXhlcyIsIl9rZXkiLCJmdWxsIiwiY29tYmluZUV4dHJhY3RvcnMiLCJfbGVuMiIsImV4dHJhY3RvcnMiLCJfa2V5MiIsImV4IiwibWVyZ2VkVmFscyIsIm1lcmdlZFpvbmUiLCJjdXJzb3IiLCJfZXgiLCJwYXJzZSIsIl9sZW4zIiwicGF0dGVybnMiLCJfa2V5MyIsIl9pIiwiX3BhdHRlcm5zIiwiX3BhdHRlcm5zJF9pIiwicmVnZXgiLCJleHRyYWN0b3IiLCJzaW1wbGVQYXJzZSIsIl9sZW40IiwiX2tleTQiLCJyZXQiLCJvZmZzZXRSZWdleCIsImlzb1RpbWVCYXNlUmVnZXgiLCJpc29UaW1lUmVnZXgiLCJpc29UaW1lRXh0ZW5zaW9uUmVnZXgiLCJleHRyYWN0SVNPV2Vla0RhdGEiLCJleHRyYWN0SVNPT3JkaW5hbERhdGEiLCJzcWxUaW1lUmVnZXgiLCJzcWxUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpbnQiLCJmYWxsYmFjayIsImV4dHJhY3RJU09ZbWQiLCJleHRyYWN0SVNPVGltZSIsIm1pbGxpc2Vjb25kcyIsImV4dHJhY3RJU09PZmZzZXQiLCJsb2NhbCIsImZ1bGxPZmZzZXQiLCJleHRyYWN0SUFOQVpvbmUiLCJpc29UaW1lT25seSIsImlzb0R1cmF0aW9uIiwiZXh0cmFjdElTT0R1cmF0aW9uIiwieWVhclN0ciIsIm1vbnRoU3RyIiwid2Vla1N0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJtaWxsaXNlY29uZHNTdHIiLCJoYXNOZWdhdGl2ZVByZWZpeCIsIm5lZ2F0aXZlU2Vjb25kcyIsIm1heWJlTmVnYXRlIiwiZm9yY2UiLCJvYnNPZmZzZXRzIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiZnJvbVN0cmluZ3MiLCJ3ZWVrZGF5U3RyIiwicmVzdWx0IiwicmZjMjgyMiIsImV4dHJhY3RSRkMyODIyIiwib2JzT2Zmc2V0IiwibWlsT2Zmc2V0IiwicmZjMTEyMyIsInJmYzg1MCIsImFzY2lpIiwiZXh0cmFjdFJGQzExMjNPcjg1MCIsImV4dHJhY3RBU0NJSSIsImlzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsImlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvVGltZUNvbWJpbmVkUmVnZXgiLCJleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUiLCJleHRyYWN0SVNPVGltZUFuZE9mZnNldCIsImV4dHJhY3RJU09UaW1lT25seSIsInNxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJzcWxUaW1lQ29tYmluZWRSZWdleCIsImV4dHJhY3RJU09ZbWRUaW1lT2Zmc2V0QW5kSUFOQVpvbmUiLCJleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lIiwibG93T3JkZXJNYXRyaXgiLCJjYXN1YWxNYXRyaXgiLCJhY2N1cmF0ZU1hdHJpeCIsImRheXNJblllYXJBY2N1cmF0ZSIsImRheXNJbk1vbnRoQWNjdXJhdGUiLCJvcmRlcmVkVW5pdHMkMSIsInJldmVyc2VVbml0cyIsInJldmVyc2UiLCJjbG9uZSQxIiwiY2xlYXIiLCJjb25mIiwidmFsdWVzIiwiY29udmVyc2lvbkFjY3VyYWN5IiwiRHVyYXRpb24iLCJjb252ZXJ0IiwibWF0cml4IiwiZnJvbU1hcCIsImZyb21Vbml0IiwidG9NYXAiLCJ0b1VuaXQiLCJjb252IiwicmF3IiwiYWRkZWQiLCJjZWlsIiwiYW50aVRydW5jIiwiY29uZmlnIiwiYWNjdXJhdGUiLCJpbnZhbGlkIiwiaXNMdXhvbkR1cmF0aW9uIiwibm9ybWFsaXplVW5pdCIsImZyb21EdXJhdGlvbkxpa2UiLCJkdXJhdGlvbkxpa2UiLCJpc0R1cmF0aW9uIiwiZnJvbUlTTyIsInRleHQiLCJfcGFyc2VJU09EdXJhdGlvbiIsInBhcnNlSVNPRHVyYXRpb24iLCJmcm9tSVNPVGltZSIsIl9wYXJzZUlTT1RpbWVPbmx5IiwicGFyc2VJU09UaW1lT25seSIsIndlZWsiLCJ0b0Zvcm1hdCIsImZtdE9wdHMiLCJ0b0h1bWFuIiwidW5pdERpc3BsYXkiLCJsaXN0U3R5bGUiLCJ0b09iamVjdCIsInRvSVNPIiwidG9JU09UaW1lIiwibWlsbGlzIiwidG9NaWxsaXMiLCJzdXBwcmVzc01pbGxpc2Vjb25kcyIsInN1cHByZXNzU2Vjb25kcyIsImluY2x1ZGVQcmVmaXgiLCJzdHIiLCJ0b0pTT04iLCJhcyIsInBsdXMiLCJkdXJhdGlvbiIsIm1pbnVzIiwibmVnYXRlIiwibWFwVW5pdHMiLCJfT2JqZWN0JGtleXMiLCJyZWNvbmZpZ3VyZSIsIm5vcm1hbGl6ZSIsInZhbHMiLCJwcmV2aW91cyIsIm5vcm1hbGl6ZVZhbHVlcyIsImxhc3RVbml0IiwiX3N0ZXAyIiwiYnVpbHQiLCJhY2N1bXVsYXRlZCIsIl9pdGVyYXRvcjIiLCJvd24iLCJhayIsImRvd24iLCJuZWdhdGVkIiwiX2kyIiwiX09iamVjdCRrZXlzMiIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJ2MSIsInYyIiwiSU5WQUxJRCQxIiwidmFsaWRhdGVTdGFydEVuZCIsInN0YXJ0IiwiZW5kIiwiSW50ZXJ2YWwiLCJpc0x1eG9uSW50ZXJ2YWwiLCJmcm9tRGF0ZVRpbWVzIiwiYnVpbHRTdGFydCIsImZyaWVuZGx5RGF0ZVRpbWUiLCJidWlsdEVuZCIsInZhbGlkYXRlRXJyb3IiLCJhZnRlciIsImJlZm9yZSIsIl9zcGxpdCIsInNwbGl0Iiwic3RhcnRJc1ZhbGlkIiwiZW5kSXNWYWxpZCIsIl9kdXIiLCJpc0ludGVydmFsIiwidG9EdXJhdGlvbiIsInN0YXJ0T2YiLCJkaWZmIiwiaGFzU2FtZSIsImlzRW1wdHkiLCJpc0FmdGVyIiwiZGF0ZVRpbWUiLCJpc0JlZm9yZSIsImNvbnRhaW5zIiwic3BsaXRBdCIsImRhdGVUaW1lcyIsInNvcnRlZCIsInNvcnQiLCJyZXN1bHRzIiwic3BsaXRCeSIsImlkeCIsImRpdmlkZUVxdWFsbHkiLCJudW1iZXJPZlBhcnRzIiwib3ZlcmxhcHMiLCJhYnV0c1N0YXJ0IiwiYWJ1dHNFbmQiLCJlbmd1bGZzIiwiaW50ZXJzZWN0aW9uIiwidW5pb24iLCJtZXJnZSIsImludGVydmFscyIsIl9pbnRlcnZhbHMkc29ydCRyZWR1YyIsImIiLCJzb2ZhciIsImZpbmFsIiwieG9yIiwiX0FycmF5JHByb3RvdHlwZSIsImN1cnJlbnRDb3VudCIsImVuZHMiLCJ0aW1lIiwiZGlmZmVyZW5jZSIsInRvSVNPRGF0ZSIsImRhdGVGb3JtYXQiLCJfdGVtcDIiLCJfcmVmMyRzZXBhcmF0b3IiLCJzZXBhcmF0b3IiLCJpbnZhbGlkUmVhc29uIiwibWFwRW5kcG9pbnRzIiwibWFwRm4iLCJJbmZvIiwiaGFzRFNUIiwicHJvdG8iLCJzZXRab25lIiwiaXNWYWxpZElBTkFab25lIiwiX3JlZiRsb2NhbGUiLCJfcmVmJG51bWJlcmluZ1N5c3RlbSIsIl9yZWYkbG9jT2JqIiwibG9jT2JqIiwiX3JlZiRvdXRwdXRDYWxlbmRhciIsIm1vbnRoc0Zvcm1hdCIsIl9yZWYyJGxvY2FsZSIsIl9yZWYyJG51bWJlcmluZ1N5c3RlbSIsIl9yZWYyJGxvY09iaiIsIl9yZWYyJG91dHB1dENhbGVuZGFyIiwiX3RlbXAzIiwiX3JlZjMiLCJfcmVmMyRsb2NhbGUiLCJfcmVmMyRudW1iZXJpbmdTeXN0ZW0iLCJfcmVmMyRsb2NPYmoiLCJ3ZWVrZGF5c0Zvcm1hdCIsIl90ZW1wNCIsIl9yZWY0IiwiX3JlZjQkbG9jYWxlIiwiX3JlZjQkbnVtYmVyaW5nU3lzdGVtIiwiX3JlZjQkbG9jT2JqIiwiX3RlbXA1IiwiX3JlZjUkbG9jYWxlIiwiX3RlbXA2IiwiX3JlZjYkbG9jYWxlIiwiZmVhdHVyZXMiLCJyZWxhdGl2ZSIsImRheURpZmYiLCJlYXJsaWVyIiwibGF0ZXIiLCJ1dGNEYXlTdGFydCIsInRvVVRDIiwia2VlcExvY2FsVGltZSIsIm51bWJlcmluZ1N5c3RlbXMiLCJhcmFiIiwiYXJhYmV4dCIsImJhbGkiLCJiZW5nIiwiZGV2YSIsImZ1bGx3aWRlIiwiZ3VqciIsImhhbmlkZWMiLCJraG1yIiwia25kYSIsImxhb28iLCJsaW1iIiwibWx5bSIsIm1vbmciLCJteW1yIiwib3J5YSIsInRhbWxkZWMiLCJ0ZWx1IiwidGhhaSIsInRpYnQiLCJsYXRuIiwibnVtYmVyaW5nU3lzdGVtc1VURjE2IiwiaGFuaWRlY0NoYXJzIiwiZGlnaXRSZWdleCIsImFwcGVuZCIsImludFVuaXQiLCJwb3N0IiwiZGVzZXIiLCJjb2RlIiwiY2hhckNvZGVBdCIsInNlYXJjaCIsIl9udW1iZXJpbmdTeXN0ZW1zVVRGIiwibWluIiwibWF4IiwicGFyc2VEaWdpdHMiLCJzcGFjZU9yTkJTUCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNwYWNlT3JOQlNQUmVnRXhwIiwiZml4TGlzdFJlZ2V4Iiwic3RyaXBJbnNlbnNpdGl2aXRpZXMiLCJvbmVPZiIsInN0cmluZ3MiLCJzdGFydEluZGV4IiwiZmluZEluZGV4IiwiZ3JvdXBzIiwic2ltcGxlIiwicGFydFR5cGVTdHlsZVRvVG9rZW5WYWwiLCJzaG9ydCIsImxvbmciLCJkYXlwZXJpb2QiLCJkYXlQZXJpb2QiLCJkdW1teURhdGVUaW1lQ2FjaGUiLCJleHBsYWluRnJvbVRva2VucyIsInBhcnQiLCJ0b2tlbkZvclBhcnQiLCJpbmNsdWRlcyIsIm1heWJlRXhwYW5kTWFjcm9Ub2tlbiIsImV4cGFuZE1hY3JvVG9rZW5zIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic2l4Iiwib25lT3JUd28iLCJvbmVUb1RocmVlIiwib25lVG9TaXgiLCJvbmVUb05pbmUiLCJ0d29Ub0ZvdXIiLCJmb3VyVG9TaXgiLCJfcmVmNSIsInVuaXRhdGUiLCJkaXNxdWFsaWZ5aW5nVW5pdCIsIl9idWlsZFJlZ2V4IiwiYnVpbGRSZWdleCIsInJlZ2V4U3RyaW5nIiwiaGFuZGxlcnMiLCJfbWF0Y2giLCJtYXRjaGVzIiwiYWxsIiwibWF0Y2hJbmRleCIsImgiLCJyYXdNYXRjaGVzIiwiX3JlZjYiLCJzcGVjaWZpY09mZnNldCIsIloiLCJxIiwiTSIsIkciLCJ5IiwiUyIsInRvRmllbGQiLCJkYXRlVGltZUZyb21NYXRjaGVzIiwibm9uTGVhcExhZGRlciIsImxlYXBMYWRkZXIiLCJ1bml0T3V0T2ZSYW5nZSIsImRheU9mV2VlayIsImpzIiwiZ2V0VVRDRGF5IiwiY29tcHV0ZU9yZGluYWwiLCJ1bmNvbXB1dGVPcmRpbmFsIiwidGFibGUiLCJtb250aDAiLCJncmVnb3JpYW5Ub1dlZWsiLCJncmVnT2JqIiwid2Vla1RvR3JlZ29yaWFuIiwid2Vla0RhdGEiLCJ3ZWVrZGF5T2ZKYW40IiwieWVhckluRGF5cyIsIl91bmNvbXB1dGVPcmRpbmFsIiwiZ3JlZ29yaWFuVG9PcmRpbmFsIiwiZ3JlZ0RhdGEiLCJvcmRpbmFsVG9HcmVnb3JpYW4iLCJvcmRpbmFsRGF0YSIsIl91bmNvbXB1dGVPcmRpbmFsMiIsImhhc0ludmFsaWRHcmVnb3JpYW5EYXRhIiwidmFsaWRZZWFyIiwidmFsaWRNb250aCIsInZhbGlkRGF5IiwiaGFzSW52YWxpZFRpbWVEYXRhIiwidmFsaWRIb3VyIiwidmFsaWRNaW51dGUiLCJ2YWxpZFNlY29uZCIsInZhbGlkTWlsbGlzZWNvbmQiLCJJTlZBTElEIiwiTUFYX0RBVEUiLCJ1bnN1cHBvcnRlZFpvbmUiLCJwb3NzaWJseUNhY2hlZFdlZWtEYXRhIiwiaW5zdCIsIm9sZCIsImZpeE9mZnNldCIsImxvY2FsVFMiLCJ0eiIsInV0Y0d1ZXNzIiwibzIiLCJvMyIsInRzVG9PYmoiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwib2JqVG9UUyIsImFkanVzdFRpbWUiLCJvUHJlIiwibWlsbGlzVG9BZGQiLCJfZml4T2Zmc2V0IiwicGFyc2VEYXRhVG9EYXRlVGltZSIsInBhcnNlZFpvbmUiLCJpbnRlcnByZXRhdGlvblpvbmUiLCJ0b1RlY2hGb3JtYXQiLCJfdG9JU09EYXRlIiwiZXh0ZW5kZWQiLCJsb25nRm9ybWF0IiwiX3RvSVNPVGltZSIsImluY2x1ZGVPZmZzZXQiLCJkZWZhdWx0VW5pdFZhbHVlcyIsImRlZmF1bHRXZWVrVW5pdFZhbHVlcyIsImRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcyIsIm9yZGVyZWRVbml0cyIsIm9yZGVyZWRXZWVrVW5pdHMiLCJvcmRlcmVkT3JkaW5hbFVuaXRzIiwid2Vla251bWJlciIsIndlZWtzbnVtYmVyIiwid2Vla251bWJlcnMiLCJ3ZWVreWVhciIsIndlZWt5ZWFycyIsInF1aWNrRFQiLCJ0c05vdyIsIl9vYmpUb1RTIiwiZGlmZlJlbGF0aXZlIiwiY2FsZW5kYXJ5IiwiZGlmZmVyIiwibGFzdE9wdHMiLCJhcmdMaXN0Iiwib3QiLCJfem9uZSIsImlzTHV4b25EYXRlVGltZSIsIl9sYXN0T3B0cyIsIl9sYXN0T3B0czIiLCJmcm9tSlNEYXRlIiwiem9uZVRvVXNlIiwiZnJvbVNlY29uZHMiLCJvZmZzZXRQcm92aXMiLCJjb250YWluc09yZGluYWwiLCJjb250YWluc0dyZWdvclllYXIiLCJjb250YWluc0dyZWdvck1EIiwiY29udGFpbnNHcmVnb3IiLCJkZWZpbml0ZVdlZWtEZWYiLCJkZWZhdWx0VmFsdWVzIiwidXNlV2Vla0RhdGEiLCJvYmpOb3ciLCJmb3VuZEZpcnN0IiwiaGlnaGVyT3JkZXJJbnZhbGlkIiwidmFsaWRXZWVrIiwidmFsaWRXZWVrZGF5IiwiaGFzSW52YWxpZFdlZWtEYXRhIiwidmFsaWRPcmRpbmFsIiwiaGFzSW52YWxpZE9yZGluYWxEYXRhIiwiX29ialRvVFMyIiwiX3BhcnNlSVNPRGF0ZSIsInBhcnNlSVNPRGF0ZSIsImZyb21SRkMyODIyIiwiX3BhcnNlUkZDMjgyMkRhdGUiLCJ0cmltIiwicHJlcHJvY2Vzc1JGQzI4MjIiLCJwYXJzZVJGQzI4MjJEYXRlIiwiZnJvbUhUVFAiLCJfcGFyc2VIVFRQRGF0ZSIsInBhcnNlSFRUUERhdGUiLCJmcm9tRm9ybWF0IiwiX29wdHMkbG9jYWxlIiwiX29wdHMkbnVtYmVyaW5nU3lzdGVtIiwiX3BhcnNlRnJvbVRva2VucyIsIl9leHBsYWluRnJvbVRva2VucyIsInBhcnNlRnJvbVRva2VucyIsImZyb21TdHJpbmciLCJmcm9tU1FMIiwiX3BhcnNlU1FMIiwicGFyc2VTUUwiLCJpc0RhdGVUaW1lIiwicmVzb2x2ZWRMb2NhbGVPcHRpb25zIiwiX0Zvcm1hdHRlciRjcmVhdGUkcmVzIiwidG9Mb2NhbCIsIl9yZWYyJGtlZXBMb2NhbFRpbWUiLCJfcmVmMiRrZWVwQ2FsZW5kYXJUaW0iLCJrZWVwQ2FsZW5kYXJUaW1lIiwibmV3VFMiLCJvZmZzZXRHdWVzcyIsInNldExvY2FsZSIsIm1peGVkIiwic2V0dGluZ1dlZWtTdHVmZiIsIl9vYmpUb1RTNCIsIm5vcm1hbGl6ZWRVbml0IiwiZW5kT2YiLCJfdGhpcyRwbHVzIiwidG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVBhcnRzIiwiX3JlZjQkZm9ybWF0IiwiX3JlZjQkc3VwcHJlc3NTZWNvbmRzIiwiX3JlZjQkc3VwcHJlc3NNaWxsaXNlIiwiX3JlZjQkaW5jbHVkZU9mZnNldCIsImV4dCIsIl9yZWY1JGZvcm1hdCIsInRvSVNPV2Vla0RhdGUiLCJfcmVmNiRzdXBwcmVzc01pbGxpc2UiLCJfcmVmNiRzdXBwcmVzc1NlY29uZHMiLCJfcmVmNiRpbmNsdWRlT2Zmc2V0IiwiX3JlZjYkaW5jbHVkZVByZWZpeCIsIl9yZWY2JGZvcm1hdCIsInRvUkZDMjgyMiIsInRvSFRUUCIsInRvU1FMRGF0ZSIsInRvU1FMVGltZSIsIl9yZWY3IiwiX3JlZjckaW5jbHVkZU9mZnNldCIsIl9yZWY3JGluY2x1ZGVab25lIiwiaW5jbHVkZVpvbmUiLCJfcmVmNyRpbmNsdWRlT2Zmc2V0U3AiLCJpbmNsdWRlT2Zmc2V0U3BhY2UiLCJ0b1NRTCIsInRvU2Vjb25kcyIsInRvVW5peEludGVnZXIiLCJ0b0JTT04iLCJpbmNsdWRlQ29uZmlnIiwib3RoZXJEYXRlVGltZSIsImR1ck9wdHMiLCJvdGhlcklzTGF0ZXIiLCJkaWZmZWQiLCJfY3Vyc29yJHBsdXMzIiwiX2hpZ2hPcmRlckRpZmZzIiwibG93ZXN0T3JkZXIiLCJoaWdoV2F0ZXIiLCJfZGlmZmVycyIsIl9kaWZmZXJzJF9pIiwiX2N1cnNvciRwbHVzIiwiX2N1cnNvciRwbHVzMiIsImRlbHRhIiwiaGlnaE9yZGVyRGlmZnMiLCJyZW1haW5pbmdNaWxsaXMiLCJsb3dlck9yZGVyVW5pdHMiLCJfRHVyYXRpb24kZnJvbU1pbGxpcyIsIl9kaWZmIiwiZGlmZk5vdyIsInVudGlsIiwiaW5wdXRNcyIsImFkanVzdGVkVG9ab25lIiwidG9SZWxhdGl2ZSIsInBhZGRpbmciLCJ0b1JlbGF0aXZlQ2FsZW5kYXIiLCJldmVyeSIsImZyb21Gb3JtYXRFeHBsYWluIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbnVtYmVyaW5nU3lzIiwiZnJvbVN0cmluZ0V4cGxhaW4iLCJkYXRlVGltZWlzaCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJ0aW1lQ29udmVydGVyIiwidGltZXpvbmUiLCJ0aW1lMiIsInRlbXBDb252ZXJ0ZXIiLCJ0ZW1wIiwic2VhcmNoYnRuIiwiY2l0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciLCJhc3luYyIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsImpzb24iLCJpbm5lckhUTUwiLCJzeXMiLCJjb3VudHJ5Iiwic3VucmlzZSIsInN1bnNldCIsIm1haW4iLCJ3ZWF0aGVyIiwiZGVzY3JpcHRpb24iLCJ0b1VwcGVyQ2FzZSIsInRlbXBfbWF4IiwidGVtcF9taW4iLCJmZWVsc19saWtlIiwiaHVtaWRpdHkiLCJwcmVzc3VyZSIsIndpbmQiLCJzcGVlZCIsImJvZHkiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJ3ZWF0aGVySWQiLCJjaGFuZ2VCYWNrZ3JvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==